ARM GAS  /tmp/ccepMe6n.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sysmem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._sbrk,"ax",%progbits
  18              		.align	1
  19              		.global	_sbrk
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_sbrk:
  27              	.LVL0:
  28              	.LFB3:
  29              		.file 1 "Core/Src/sysmem.c"
   1:Core/Src/sysmem.c **** /**
   2:Core/Src/sysmem.c **** *****************************************************************************
   3:Core/Src/sysmem.c **** **
   4:Core/Src/sysmem.c **** **  File        : sysmem.c
   5:Core/Src/sysmem.c **** **
   6:Core/Src/sysmem.c **** **  Author	    : Auto-generated by STM32CubeIDE
   7:Core/Src/sysmem.c **** **
   8:Core/Src/sysmem.c **** **  Abstract    : STM32CubeIDE Minimal System Memory calls file
   9:Core/Src/sysmem.c **** **
  10:Core/Src/sysmem.c **** ** 		          For more information about which c-functions
  11:Core/Src/sysmem.c **** **                need which of these lowlevel functions
  12:Core/Src/sysmem.c **** **                please consult the Newlib libc-manual
  13:Core/Src/sysmem.c **** **
  14:Core/Src/sysmem.c **** **  Environment : STM32CubeIDE MCU
  15:Core/Src/sysmem.c **** **
  16:Core/Src/sysmem.c **** **  Distribution: The file is distributed as is, without any warranty
  17:Core/Src/sysmem.c **** **                of any kind.
  18:Core/Src/sysmem.c **** **
  19:Core/Src/sysmem.c **** *****************************************************************************
  20:Core/Src/sysmem.c **** **
  21:Core/Src/sysmem.c **** ** <h2><center>&copy; COPYRIGHT(c) 2018 STMicroelectronics</center></h2>
  22:Core/Src/sysmem.c **** **
  23:Core/Src/sysmem.c **** ** Redistribution and use in source and binary forms, with or without modification,
  24:Core/Src/sysmem.c **** ** are permitted provided that the following conditions are met:
  25:Core/Src/sysmem.c **** **   1. Redistributions of source code must retain the above copyright notice,
  26:Core/Src/sysmem.c **** **      this list of conditions and the following disclaimer.
  27:Core/Src/sysmem.c **** **   2. Redistributions in binary form must reproduce the above copyright notice,
  28:Core/Src/sysmem.c **** **      this list of conditions and the following disclaimer in the documentation
  29:Core/Src/sysmem.c **** **      and/or other materials provided with the distribution.
ARM GAS  /tmp/ccepMe6n.s 			page 2


  30:Core/Src/sysmem.c **** **   3. Neither the name of STMicroelectronics nor the names of its contributors
  31:Core/Src/sysmem.c **** **      may be used to endorse or promote products derived from this software
  32:Core/Src/sysmem.c **** **      without specific prior written permission.
  33:Core/Src/sysmem.c **** **
  34:Core/Src/sysmem.c **** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  35:Core/Src/sysmem.c **** ** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  36:Core/Src/sysmem.c **** ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  37:Core/Src/sysmem.c **** ** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  38:Core/Src/sysmem.c **** ** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  39:Core/Src/sysmem.c **** ** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  40:Core/Src/sysmem.c **** ** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  41:Core/Src/sysmem.c **** ** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  42:Core/Src/sysmem.c **** ** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  43:Core/Src/sysmem.c **** ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  44:Core/Src/sysmem.c **** **
  45:Core/Src/sysmem.c **** **
  46:Core/Src/sysmem.c **** *****************************************************************************
  47:Core/Src/sysmem.c **** */
  48:Core/Src/sysmem.c **** 
  49:Core/Src/sysmem.c **** /* Includes */
  50:Core/Src/sysmem.c **** #include <errno.h>
  51:Core/Src/sysmem.c **** #include <stdio.h>
  52:Core/Src/sysmem.c **** 
  53:Core/Src/sysmem.c **** /* Variables */
  54:Core/Src/sysmem.c **** extern int errno;
  55:Core/Src/sysmem.c **** register char * stack_ptr asm("sp");
  56:Core/Src/sysmem.c **** 
  57:Core/Src/sysmem.c **** /* Functions */
  58:Core/Src/sysmem.c **** 
  59:Core/Src/sysmem.c **** /**
  60:Core/Src/sysmem.c ****  _sbrk
  61:Core/Src/sysmem.c ****  Increase program data space. Malloc and related functions depend on this
  62:Core/Src/sysmem.c **** **/
  63:Core/Src/sysmem.c **** caddr_t _sbrk(int incr)
  64:Core/Src/sysmem.c **** {
  30              		.loc 1 64 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 64 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
  40 0002 0346     		mov	r3, r0
  65:Core/Src/sysmem.c **** 	extern char end asm("end");
  41              		.loc 1 65 2 is_stmt 1 view .LVU2
  66:Core/Src/sysmem.c **** 	static char *heap_end;
  42              		.loc 1 66 2 view .LVU3
  67:Core/Src/sysmem.c **** 	char *prev_heap_end;
  43              		.loc 1 67 2 view .LVU4
  68:Core/Src/sysmem.c **** 
  69:Core/Src/sysmem.c **** 	if (heap_end == 0)
  44              		.loc 1 69 2 view .LVU5
  45              		.loc 1 69 15 is_stmt 0 view .LVU6
  46 0004 0B4A     		ldr	r2, .L8
ARM GAS  /tmp/ccepMe6n.s 			page 3


  47 0006 1268     		ldr	r2, [r2]
  48              		.loc 1 69 5 view .LVU7
  49 0008 42B1     		cbz	r2, .L6
  50              	.L2:
  70:Core/Src/sysmem.c **** 		heap_end = &end;
  71:Core/Src/sysmem.c **** 
  72:Core/Src/sysmem.c **** 	prev_heap_end = heap_end;
  51              		.loc 1 72 2 is_stmt 1 view .LVU8
  52              		.loc 1 72 16 is_stmt 0 view .LVU9
  53 000a 0A4A     		ldr	r2, .L8
  54 000c 1068     		ldr	r0, [r2]
  55              	.LVL1:
  73:Core/Src/sysmem.c **** 	if (heap_end + incr > stack_ptr)
  56              		.loc 1 73 2 is_stmt 1 view .LVU10
  57              		.loc 1 73 15 is_stmt 0 view .LVU11
  58 000e 0344     		add	r3, r3, r0
  59              	.LVL2:
  60              		.loc 1 73 5 view .LVU12
  61 0010 6A46     		mov	r2, sp
  62 0012 9342     		cmp	r3, r2
  63 0014 06D8     		bhi	.L7
  74:Core/Src/sysmem.c **** 	{
  75:Core/Src/sysmem.c **** 		errno = ENOMEM;
  76:Core/Src/sysmem.c **** 		return (caddr_t) -1;
  77:Core/Src/sysmem.c **** 	}
  78:Core/Src/sysmem.c **** 
  79:Core/Src/sysmem.c **** 	heap_end += incr;
  64              		.loc 1 79 2 is_stmt 1 view .LVU13
  65              		.loc 1 79 11 is_stmt 0 view .LVU14
  66 0016 074A     		ldr	r2, .L8
  67 0018 1360     		str	r3, [r2]
  80:Core/Src/sysmem.c **** 
  81:Core/Src/sysmem.c **** 	return (caddr_t) prev_heap_end;
  68              		.loc 1 81 2 is_stmt 1 view .LVU15
  69              	.LVL3:
  70              	.L1:
  82:Core/Src/sysmem.c **** }
  71              		.loc 1 82 1 is_stmt 0 view .LVU16
  72 001a 08BD     		pop	{r3, pc}
  73              	.LVL4:
  74              	.L6:
  70:Core/Src/sysmem.c **** 
  75              		.loc 1 70 3 is_stmt 1 view .LVU17
  70:Core/Src/sysmem.c **** 
  76              		.loc 1 70 12 is_stmt 0 view .LVU18
  77 001c 054A     		ldr	r2, .L8
  78 001e 0649     		ldr	r1, .L8+4
  79 0020 1160     		str	r1, [r2]
  80 0022 F2E7     		b	.L2
  81              	.LVL5:
  82              	.L7:
  75:Core/Src/sysmem.c **** 		return (caddr_t) -1;
  83              		.loc 1 75 3 is_stmt 1 view .LVU19
  84 0024 FFF7FEFF 		bl	__errno
  85              	.LVL6:
  75:Core/Src/sysmem.c **** 		return (caddr_t) -1;
  86              		.loc 1 75 9 is_stmt 0 view .LVU20
ARM GAS  /tmp/ccepMe6n.s 			page 4


  87 0028 0C23     		movs	r3, #12
  88 002a 0360     		str	r3, [r0]
  76:Core/Src/sysmem.c **** 	}
  89              		.loc 1 76 3 is_stmt 1 view .LVU21
  76:Core/Src/sysmem.c **** 	}
  90              		.loc 1 76 10 is_stmt 0 view .LVU22
  91 002c 4FF0FF30 		mov	r0, #-1
  92 0030 F3E7     		b	.L1
  93              	.L9:
  94 0032 00BF     		.align	2
  95              	.L8:
  96 0034 00000000 		.word	.LANCHOR0
  97 0038 00000000 		.word	end
  98              		.cfi_endproc
  99              	.LFE3:
 101              		.section	.bss.heap_end.6547,"aw",%nobits
 102              		.align	2
 103              		.set	.LANCHOR0,. + 0
 106              	heap_end.6547:
 107 0000 00000000 		.space	4
 108              		.text
 109              	.Letext0:
 110              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 111              		.file 3 "/usr/include/newlib/sys/_types.h"
 112              		.file 4 "/usr/include/newlib/sys/reent.h"
 113              		.file 5 "/usr/include/newlib/sys/lock.h"
 114              		.file 6 "/usr/include/newlib/sys/errno.h"
 115              		.file 7 "/usr/include/newlib/sys/types.h"
ARM GAS  /tmp/ccepMe6n.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sysmem.c
     /tmp/ccepMe6n.s:18     .text._sbrk:0000000000000000 $t
     /tmp/ccepMe6n.s:26     .text._sbrk:0000000000000000 _sbrk
     /tmp/ccepMe6n.s:96     .text._sbrk:0000000000000034 $d
     /tmp/ccepMe6n.s:102    .bss.heap_end.6547:0000000000000000 $d
     /tmp/ccepMe6n.s:106    .bss.heap_end.6547:0000000000000000 heap_end.6547

UNDEFINED SYMBOLS
__errno
end
