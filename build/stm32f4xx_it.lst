ARM GAS  /tmp/ccRePLki.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	NMI_Handler:
  27              	.LFB238:
  28              		.file 1 "Core/Src/stm32f4xx_it.c"
   1:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f4xx_it.c **** /**
   3:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Core/Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f4xx_it.c ****   * @attention
   8:Core/Src/stm32f4xx_it.c ****   *
   9:Core/Src/stm32f4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Core/Src/stm32f4xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32f4xx_it.c ****   *
  12:Core/Src/stm32f4xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32f4xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32f4xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32f4xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32f4xx_it.c ****   *
  17:Core/Src/stm32f4xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32f4xx_it.c ****   */
  19:Core/Src/stm32f4xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32f4xx_it.c **** 
  21:Core/Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32f4xx_it.c **** #include "main.h"
  23:Core/Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  24:Core/Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32f4xx_it.c **** #include <stdio.h>
  27:Core/Src/stm32f4xx_it.c **** #include "structs.h"
  28:Core/Src/stm32f4xx_it.c **** #include "usart.h"
  29:Core/Src/stm32f4xx_it.c **** #include "fsm.h"
  30:Core/Src/stm32f4xx_it.c **** #include "spi.h"
ARM GAS  /tmp/ccRePLki.s 			page 2


  31:Core/Src/stm32f4xx_it.c **** #include "gpio.h"
  32:Core/Src/stm32f4xx_it.c **** #include "adc.h"
  33:Core/Src/stm32f4xx_it.c **** #include "foc.h"
  34:Core/Src/stm32f4xx_it.c **** #include "can.h"
  35:Core/Src/stm32f4xx_it.c **** #include "position_sensor.h"
  36:Core/Src/stm32f4xx_it.c **** #include "hw_config.h"
  37:Core/Src/stm32f4xx_it.c **** #include "user_config.h"
  38:Core/Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  39:Core/Src/stm32f4xx_it.c **** 
  40:Core/Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  41:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  42:Core/Src/stm32f4xx_it.c **** 
  43:Core/Src/stm32f4xx_it.c **** /* USER CODE END TD */
  44:Core/Src/stm32f4xx_it.c **** 
  45:Core/Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  46:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  47:Core/Src/stm32f4xx_it.c ****  
  48:Core/Src/stm32f4xx_it.c **** /* USER CODE END PD */
  49:Core/Src/stm32f4xx_it.c **** 
  50:Core/Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  51:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  52:Core/Src/stm32f4xx_it.c **** 
  53:Core/Src/stm32f4xx_it.c **** /* USER CODE END PM */
  54:Core/Src/stm32f4xx_it.c **** 
  55:Core/Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  56:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  57:Core/Src/stm32f4xx_it.c **** 
  58:Core/Src/stm32f4xx_it.c **** /* USER CODE END PV */
  59:Core/Src/stm32f4xx_it.c **** 
  60:Core/Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  61:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  62:Core/Src/stm32f4xx_it.c **** 
  63:Core/Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  64:Core/Src/stm32f4xx_it.c **** 
  65:Core/Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  66:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  67:Core/Src/stm32f4xx_it.c **** 
  68:Core/Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  69:Core/Src/stm32f4xx_it.c **** 
  70:Core/Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  71:Core/Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  72:Core/Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim1;
  73:Core/Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart2;
  74:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  75:Core/Src/stm32f4xx_it.c **** 
  76:Core/Src/stm32f4xx_it.c **** /* USER CODE END EV */
  77:Core/Src/stm32f4xx_it.c **** 
  78:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  79:Core/Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  80:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
  81:Core/Src/stm32f4xx_it.c **** /**
  82:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  83:Core/Src/stm32f4xx_it.c ****   */
  84:Core/Src/stm32f4xx_it.c **** void NMI_Handler(void)
  85:Core/Src/stm32f4xx_it.c **** {
  29              		.loc 1 85 1 view -0
  30              		.cfi_startproc
ARM GAS  /tmp/ccRePLki.s 			page 3


  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  86:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  87:Core/Src/stm32f4xx_it.c **** 
  88:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  89:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  90:Core/Src/stm32f4xx_it.c **** 
  91:Core/Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  92:Core/Src/stm32f4xx_it.c **** }
  34              		.loc 1 92 1 view .LVU1
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE238:
  39              		.section	.text.HardFault_Handler,"ax",%progbits
  40              		.align	1
  41              		.global	HardFault_Handler
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	HardFault_Handler:
  48              	.LFB239:
  93:Core/Src/stm32f4xx_it.c **** 
  94:Core/Src/stm32f4xx_it.c **** /**
  95:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  96:Core/Src/stm32f4xx_it.c ****   */
  97:Core/Src/stm32f4xx_it.c **** void HardFault_Handler(void)
  98:Core/Src/stm32f4xx_it.c **** {
  49              		.loc 1 98 1 view -0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L3:
  99:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 100:Core/Src/stm32f4xx_it.c **** 
 101:Core/Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 102:Core/Src/stm32f4xx_it.c ****   while (1)
  56              		.loc 1 102 3 discriminator 1 view .LVU3
 103:Core/Src/stm32f4xx_it.c ****   {
 104:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 105:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 106:Core/Src/stm32f4xx_it.c ****   }
  57              		.loc 1 106 3 discriminator 1 view .LVU4
 102:Core/Src/stm32f4xx_it.c ****   {
  58              		.loc 1 102 9 discriminator 1 view .LVU5
  59 0000 FEE7     		b	.L3
  60              		.cfi_endproc
  61              	.LFE239:
  63              		.section	.text.MemManage_Handler,"ax",%progbits
  64              		.align	1
  65              		.global	MemManage_Handler
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
ARM GAS  /tmp/ccRePLki.s 			page 4


  69              		.fpu fpv4-sp-d16
  71              	MemManage_Handler:
  72              	.LFB240:
 107:Core/Src/stm32f4xx_it.c **** }
 108:Core/Src/stm32f4xx_it.c **** 
 109:Core/Src/stm32f4xx_it.c **** /**
 110:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 111:Core/Src/stm32f4xx_it.c ****   */
 112:Core/Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 113:Core/Src/stm32f4xx_it.c **** {
  73              		.loc 1 113 1 view -0
  74              		.cfi_startproc
  75              		@ Volatile: function does not return.
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.L5:
 114:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 115:Core/Src/stm32f4xx_it.c **** 
 116:Core/Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 117:Core/Src/stm32f4xx_it.c ****   while (1)
  80              		.loc 1 117 3 discriminator 1 view .LVU7
 118:Core/Src/stm32f4xx_it.c ****   {
 119:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 120:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 121:Core/Src/stm32f4xx_it.c ****   }
  81              		.loc 1 121 3 discriminator 1 view .LVU8
 117:Core/Src/stm32f4xx_it.c ****   {
  82              		.loc 1 117 9 discriminator 1 view .LVU9
  83 0000 FEE7     		b	.L5
  84              		.cfi_endproc
  85              	.LFE240:
  87              		.section	.text.BusFault_Handler,"ax",%progbits
  88              		.align	1
  89              		.global	BusFault_Handler
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv4-sp-d16
  95              	BusFault_Handler:
  96              	.LFB241:
 122:Core/Src/stm32f4xx_it.c **** }
 123:Core/Src/stm32f4xx_it.c **** 
 124:Core/Src/stm32f4xx_it.c **** /**
 125:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 126:Core/Src/stm32f4xx_it.c ****   */
 127:Core/Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 128:Core/Src/stm32f4xx_it.c **** {
  97              		.loc 1 128 1 view -0
  98              		.cfi_startproc
  99              		@ Volatile: function does not return.
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103              	.L7:
 129:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 130:Core/Src/stm32f4xx_it.c **** 
ARM GAS  /tmp/ccRePLki.s 			page 5


 131:Core/Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 132:Core/Src/stm32f4xx_it.c ****   while (1)
 104              		.loc 1 132 3 discriminator 1 view .LVU11
 133:Core/Src/stm32f4xx_it.c ****   {
 134:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 135:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 136:Core/Src/stm32f4xx_it.c ****   }
 105              		.loc 1 136 3 discriminator 1 view .LVU12
 132:Core/Src/stm32f4xx_it.c ****   {
 106              		.loc 1 132 9 discriminator 1 view .LVU13
 107 0000 FEE7     		b	.L7
 108              		.cfi_endproc
 109              	.LFE241:
 111              		.section	.text.UsageFault_Handler,"ax",%progbits
 112              		.align	1
 113              		.global	UsageFault_Handler
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu fpv4-sp-d16
 119              	UsageFault_Handler:
 120              	.LFB242:
 137:Core/Src/stm32f4xx_it.c **** }
 138:Core/Src/stm32f4xx_it.c **** 
 139:Core/Src/stm32f4xx_it.c **** /**
 140:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 141:Core/Src/stm32f4xx_it.c ****   */
 142:Core/Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 143:Core/Src/stm32f4xx_it.c **** {
 121              		.loc 1 143 1 view -0
 122              		.cfi_startproc
 123              		@ Volatile: function does not return.
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.L9:
 144:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 145:Core/Src/stm32f4xx_it.c **** 
 146:Core/Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 147:Core/Src/stm32f4xx_it.c ****   while (1)
 128              		.loc 1 147 3 discriminator 1 view .LVU15
 148:Core/Src/stm32f4xx_it.c ****   {
 149:Core/Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 150:Core/Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 151:Core/Src/stm32f4xx_it.c ****   }
 129              		.loc 1 151 3 discriminator 1 view .LVU16
 147:Core/Src/stm32f4xx_it.c ****   {
 130              		.loc 1 147 9 discriminator 1 view .LVU17
 131 0000 FEE7     		b	.L9
 132              		.cfi_endproc
 133              	.LFE242:
 135              		.section	.text.SVC_Handler,"ax",%progbits
 136              		.align	1
 137              		.global	SVC_Handler
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
ARM GAS  /tmp/ccRePLki.s 			page 6


 141              		.fpu fpv4-sp-d16
 143              	SVC_Handler:
 144              	.LFB243:
 152:Core/Src/stm32f4xx_it.c **** }
 153:Core/Src/stm32f4xx_it.c **** 
 154:Core/Src/stm32f4xx_it.c **** /**
 155:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 156:Core/Src/stm32f4xx_it.c ****   */
 157:Core/Src/stm32f4xx_it.c **** void SVC_Handler(void)
 158:Core/Src/stm32f4xx_it.c **** {
 145              		.loc 1 158 1 view -0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 159:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 160:Core/Src/stm32f4xx_it.c **** 
 161:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 162:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 163:Core/Src/stm32f4xx_it.c **** 
 164:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 165:Core/Src/stm32f4xx_it.c **** }
 150              		.loc 1 165 1 view .LVU19
 151 0000 7047     		bx	lr
 152              		.cfi_endproc
 153              	.LFE243:
 155              		.section	.text.DebugMon_Handler,"ax",%progbits
 156              		.align	1
 157              		.global	DebugMon_Handler
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu fpv4-sp-d16
 163              	DebugMon_Handler:
 164              	.LFB244:
 166:Core/Src/stm32f4xx_it.c **** 
 167:Core/Src/stm32f4xx_it.c **** /**
 168:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 169:Core/Src/stm32f4xx_it.c ****   */
 170:Core/Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 171:Core/Src/stm32f4xx_it.c **** {
 165              		.loc 1 171 1 view -0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 172:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 173:Core/Src/stm32f4xx_it.c **** 
 174:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 175:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 176:Core/Src/stm32f4xx_it.c **** 
 177:Core/Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 178:Core/Src/stm32f4xx_it.c **** }
 170              		.loc 1 178 1 view .LVU21
 171 0000 7047     		bx	lr
 172              		.cfi_endproc
 173              	.LFE244:
ARM GAS  /tmp/ccRePLki.s 			page 7


 175              		.section	.text.PendSV_Handler,"ax",%progbits
 176              		.align	1
 177              		.global	PendSV_Handler
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu fpv4-sp-d16
 183              	PendSV_Handler:
 184              	.LFB245:
 179:Core/Src/stm32f4xx_it.c **** 
 180:Core/Src/stm32f4xx_it.c **** /**
 181:Core/Src/stm32f4xx_it.c ****   * @brief This function handles Pendable request for system service.
 182:Core/Src/stm32f4xx_it.c ****   */
 183:Core/Src/stm32f4xx_it.c **** void PendSV_Handler(void)
 184:Core/Src/stm32f4xx_it.c **** {
 185              		.loc 1 184 1 view -0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 185:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 186:Core/Src/stm32f4xx_it.c **** 
 187:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 188:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 189:Core/Src/stm32f4xx_it.c **** 
 190:Core/Src/stm32f4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 191:Core/Src/stm32f4xx_it.c **** }
 190              		.loc 1 191 1 view .LVU23
 191 0000 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE245:
 195              		.section	.text.SysTick_Handler,"ax",%progbits
 196              		.align	1
 197              		.global	SysTick_Handler
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	SysTick_Handler:
 204              	.LFB246:
 192:Core/Src/stm32f4xx_it.c **** 
 193:Core/Src/stm32f4xx_it.c **** /**
 194:Core/Src/stm32f4xx_it.c ****   * @brief This function handles System tick timer.
 195:Core/Src/stm32f4xx_it.c ****   */
 196:Core/Src/stm32f4xx_it.c **** void SysTick_Handler(void)
 197:Core/Src/stm32f4xx_it.c **** {
 205              		.loc 1 197 1 view -0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 08B5     		push	{r3, lr}
 210              	.LCFI0:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
 198:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 199:Core/Src/stm32f4xx_it.c **** 
ARM GAS  /tmp/ccRePLki.s 			page 8


 200:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 201:Core/Src/stm32f4xx_it.c ****   HAL_IncTick();
 214              		.loc 1 201 3 view .LVU25
 215 0002 FFF7FEFF 		bl	HAL_IncTick
 216              	.LVL0:
 202:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 203:Core/Src/stm32f4xx_it.c **** 
 204:Core/Src/stm32f4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 205:Core/Src/stm32f4xx_it.c **** }
 217              		.loc 1 205 1 is_stmt 0 view .LVU26
 218 0006 08BD     		pop	{r3, pc}
 219              		.cfi_endproc
 220              	.LFE246:
 222              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 223              		.align	1
 224              		.global	CAN1_RX0_IRQHandler
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu fpv4-sp-d16
 230              	CAN1_RX0_IRQHandler:
 231              	.LFB247:
 206:Core/Src/stm32f4xx_it.c **** 
 207:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 208:Core/Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 209:Core/Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 210:Core/Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 211:Core/Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 212:Core/Src/stm32f4xx_it.c **** /******************************************************************************/
 213:Core/Src/stm32f4xx_it.c **** 
 214:Core/Src/stm32f4xx_it.c **** /**
 215:Core/Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupt.
 216:Core/Src/stm32f4xx_it.c ****   */
 217:Core/Src/stm32f4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 218:Core/Src/stm32f4xx_it.c **** {
 232              		.loc 1 218 1 is_stmt 1 view -0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 8
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 237              	.LCFI1:
 238              		.cfi_def_cfa_offset 20
 239              		.cfi_offset 4, -20
 240              		.cfi_offset 5, -16
 241              		.cfi_offset 6, -12
 242              		.cfi_offset 7, -8
 243              		.cfi_offset 14, -4
 244 0002 95B0     		sub	sp, sp, #84
 245              	.LCFI2:
 246              		.cfi_def_cfa_offset 104
 219:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 220:Core/Src/stm32f4xx_it.c **** 
 221:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 222:Core/Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 247              		.loc 1 222 3 view .LVU28
 248 0004 484D     		ldr	r5, .L23
 249 0006 2846     		mov	r0, r5
ARM GAS  /tmp/ccRePLki.s 			page 9


 250 0008 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 251              	.LVL1:
 223:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 224:Core/Src/stm32f4xx_it.c **** 
 225:Core/Src/stm32f4xx_it.c ****   HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 252              		.loc 1 225 3 view .LVU29
 253 000c 474C     		ldr	r4, .L23+4
 254 000e 2346     		mov	r3, r4
 255 0010 04F10B02 		add	r2, r4, #11
 256 0014 0021     		movs	r1, #0
 257 0016 2846     		mov	r0, r5
 258 0018 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 259              	.LVL2:
 226:Core/Src/stm32f4xx_it.c ****   uint32_t TxMailbox;
 260              		.loc 1 226 3 view .LVU30
 227:Core/Src/stm32f4xx_it.c ****   pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, contro
 261              		.loc 1 227 3 view .LVU31
 262              		.loc 1 227 60 is_stmt 0 view .LVU32
 263 001c 444B     		ldr	r3, .L23+8
 264 001e 93ED030A 		vldr.32	s0, [r3, #12]
 265              		.loc 1 227 64 view .LVU33
 266 0022 444A     		ldr	r2, .L23+12
 267 0024 D2ED117A 		vldr.32	s15, [r2, #68]
 268              		.loc 1 227 80 view .LVU34
 269 0028 D3ED180A 		vldr.32	s1, [r3, #96]
 270              		.loc 1 227 104 view .LVU35
 271 002c 424B     		ldr	r3, .L23+16
 272 002e 93ED111A 		vldr.32	s2, [r3, #68]
 273              		.loc 1 227 114 view .LVU36
 274 0032 92ED0E7A 		vldr.32	s14, [r2, #56]
 275              		.loc 1 227 113 view .LVU37
 276 0036 21EE071A 		vmul.f32	s2, s2, s14
 277              		.loc 1 227 3 view .LVU38
 278 003a 404E     		ldr	r6, .L23+20
 279 003c D3ED091A 		vldr.32	s3, [r3, #36]
 280 0040 27EE811A 		vmul.f32	s2, s15, s2
 281 0044 C0EEA70A 		vdiv.f32	s1, s1, s15
 282 0048 80EE270A 		vdiv.f32	s0, s0, s15
 283 004c 3C4B     		ldr	r3, .L23+24
 284 004e 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 285 0050 3046     		mov	r0, r6
 286 0052 FFF7FEFF 		bl	pack_reply
 287              	.LVL3:
 228:Core/Src/stm32f4xx_it.c ****   HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 288              		.loc 1 228 3 is_stmt 1 view .LVU39
 289 0056 13AB     		add	r3, sp, #76
 290 0058 721C     		adds	r2, r6, #1
 291 005a 06F10801 		add	r1, r6, #8
 292 005e 2846     		mov	r0, r5
 293 0060 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 294              	.LVL4:
 229:Core/Src/stm32f4xx_it.c **** 
 230:Core/Src/stm32f4xx_it.c ****   /* Check for special Commands */
 231:Core/Src/stm32f4xx_it.c ****   if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0
 295              		.loc 1 231 3 view .LVU40
 296              		.loc 1 231 19 is_stmt 0 view .LVU41
 297 0064 2346     		mov	r3, r4
ARM GAS  /tmp/ccRePLki.s 			page 10


 298 0066 13F80109 		ldrb	r0, [r3], #-1	@ zero_extendqisi2
 299              		.loc 1 231 44 view .LVU42
 300 006a 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 301              		.loc 1 231 30 view .LVU43
 302 006c 1040     		ands	r0, r0, r2
 303              		.loc 1 231 69 view .LVU44
 304 006e DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 305              		.loc 1 231 55 view .LVU45
 306 0070 1040     		ands	r0, r0, r2
 307              		.loc 1 231 94 view .LVU46
 308 0072 1C79     		ldrb	r4, [r3, #4]	@ zero_extendqisi2
 309              		.loc 1 231 80 view .LVU47
 310 0074 00EA0401 		and	r1, r0, r4
 311              		.loc 1 231 119 view .LVU48
 312 0078 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 313              		.loc 1 231 105 view .LVU49
 314 007a 1140     		ands	r1, r1, r2
 315              		.loc 1 231 144 view .LVU50
 316 007c 9F79     		ldrb	r7, [r3, #6]	@ zero_extendqisi2
 317              		.loc 1 231 130 view .LVU51
 318 007e 3940     		ands	r1, r1, r7
 319              		.loc 1 231 169 view .LVU52
 320 0080 DE79     		ldrb	r6, [r3, #7]	@ zero_extendqisi2
 321              		.loc 1 231 155 view .LVU53
 322 0082 3140     		ands	r1, r1, r6
 323              		.loc 1 231 194 view .LVU54
 324 0084 1D7A     		ldrb	r5, [r3, #8]	@ zero_extendqisi2
 325              		.loc 1 231 5 view .LVU55
 326 0086 FF29     		cmp	r1, #255
 327 0088 08BF     		it	eq
 328 008a FC2D     		cmpeq	r5, #252
 329 008c 29D0     		beq	.L21
 232:Core/Src/stm32f4xx_it.c **** 	  update_fsm(&state, MOTOR_CMD);
 233:Core/Src/stm32f4xx_it.c ****       }
 234:Core/Src/stm32f4xx_it.c ****   else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[
 330              		.loc 1 234 8 is_stmt 1 view .LVU56
 331              		.loc 1 234 102 is_stmt 0 view .LVU57
 332 008e FF2C     		cmp	r4, #255
 333 0090 14BF     		ite	ne
 334 0092 0023     		movne	r3, #0
 335 0094 0123     		moveq	r3, #1
 336              		.loc 1 234 127 view .LVU58
 337 0096 FF2A     		cmp	r2, #255
 338 0098 14BF     		ite	ne
 339 009a 0022     		movne	r2, #0
 340 009c 0122     		moveq	r2, #1
 341              		.loc 1 234 110 view .LVU59
 342 009e 02FB03F3 		mul	r3, r2, r3
 343              		.loc 1 234 85 view .LVU60
 344 00a2 FF28     		cmp	r0, #255
 345 00a4 14BF     		ite	ne
 346 00a6 0023     		movne	r3, #0
 347 00a8 03F00103 		andeq	r3, r3, #1
 348              		.loc 1 234 135 view .LVU61
 349 00ac FF2F     		cmp	r7, #255
 350 00ae 14BF     		ite	ne
 351 00b0 0023     		movne	r3, #0
ARM GAS  /tmp/ccRePLki.s 			page 11


 352 00b2 03F00103 		andeq	r3, r3, #1
 353              		.loc 1 234 160 view .LVU62
 354 00b6 FF2E     		cmp	r6, #255
 355 00b8 14BF     		ite	ne
 356 00ba 0023     		movne	r3, #0
 357 00bc 03F00103 		andeq	r3, r3, #1
 358              		.loc 1 234 185 view .LVU63
 359 00c0 FD2D     		cmp	r5, #253
 360 00c2 14BF     		ite	ne
 361 00c4 0022     		movne	r2, #0
 362 00c6 03F00102 		andeq	r2, r3, #1
 363              		.loc 1 234 10 view .LVU64
 364 00ca 82B9     		cbnz	r2, .L22
 235:Core/Src/stm32f4xx_it.c ****       update_fsm(&state, MENU_CMD);
 236:Core/Src/stm32f4xx_it.c ****       }
 237:Core/Src/stm32f4xx_it.c ****   else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[
 365              		.loc 1 237 8 is_stmt 1 view .LVU65
 366              		.loc 1 237 185 is_stmt 0 view .LVU66
 367 00cc FE2D     		cmp	r5, #254
 368 00ce 14BF     		ite	ne
 369 00d0 0023     		movne	r3, #0
 370 00d2 03F00103 		andeq	r3, r3, #1
 371              		.loc 1 237 10 view .LVU67
 372 00d6 7BB1     		cbz	r3, .L19
 238:Core/Src/stm32f4xx_it.c **** 	  update_fsm(&state, ZERO_CMD);
 373              		.loc 1 238 4 is_stmt 1 view .LVU68
 374 00d8 7A21     		movs	r1, #122
 375 00da 1A48     		ldr	r0, .L23+28
 376 00dc FFF7FEFF 		bl	update_fsm
 377              	.LVL5:
 378 00e0 03E0     		b	.L15
 379              	.L21:
 232:Core/Src/stm32f4xx_it.c **** 	  update_fsm(&state, MOTOR_CMD);
 380              		.loc 1 232 4 view .LVU69
 381 00e2 6D21     		movs	r1, #109
 382 00e4 1748     		ldr	r0, .L23+28
 383 00e6 FFF7FEFF 		bl	update_fsm
 384              	.LVL6:
 385              	.L15:
 239:Core/Src/stm32f4xx_it.c ****       }
 240:Core/Src/stm32f4xx_it.c ****   else{
 241:Core/Src/stm32f4xx_it.c **** 	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 242:Core/Src/stm32f4xx_it.c **** 	  controller.timeout = 0;					// Reset timeout counter
 243:Core/Src/stm32f4xx_it.c ****   }
 244:Core/Src/stm32f4xx_it.c **** 
 245:Core/Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 246:Core/Src/stm32f4xx_it.c **** }
 386              		.loc 1 246 1 is_stmt 0 view .LVU70
 387 00ea 15B0     		add	sp, sp, #84
 388              	.LCFI3:
 389              		.cfi_remember_state
 390              		.cfi_def_cfa_offset 20
 391              		@ sp needed
 392 00ec F0BD     		pop	{r4, r5, r6, r7, pc}
 393              	.L22:
 394              	.LCFI4:
 395              		.cfi_restore_state
ARM GAS  /tmp/ccRePLki.s 			page 12


 235:Core/Src/stm32f4xx_it.c ****       }
 396              		.loc 1 235 7 is_stmt 1 view .LVU71
 397 00ee 1B21     		movs	r1, #27
 398 00f0 1448     		ldr	r0, .L23+28
 399 00f2 FFF7FEFF 		bl	update_fsm
 400              	.LVL7:
 401 00f6 F8E7     		b	.L15
 402              	.L19:
 241:Core/Src/stm32f4xx_it.c **** 	  controller.timeout = 0;					// Reset timeout counter
 403              		.loc 1 241 4 view .LVU72
 404 00f8 134E     		ldr	r6, .L23+32
 405 00fa 144F     		ldr	r7, .L23+36
 406 00fc 1097     		str	r7, [sp, #64]
 407 00fe 6C46     		mov	r4, sp
 408 0100 06F11005 		add	r5, r6, #16
 409 0104 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 410 0106 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 411 0108 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 412 010a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 413 010c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 414 010e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 415 0110 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 416 0114 84E80F00 		stm	r4, {r0, r1, r2, r3}
 417 0118 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 418 011c FFF7FEFF 		bl	unpack_cmd
 419              	.LVL8:
 242:Core/Src/stm32f4xx_it.c ****   }
 420              		.loc 1 242 4 view .LVU73
 242:Core/Src/stm32f4xx_it.c ****   }
 421              		.loc 1 242 23 is_stmt 0 view .LVU74
 422 0120 0023     		movs	r3, #0
 423 0122 47F8143C 		str	r3, [r7, #-20]
 424              		.loc 1 246 1 view .LVU75
 425 0126 E0E7     		b	.L15
 426              	.L24:
 427              		.align	2
 428              	.L23:
 429 0128 00000000 		.word	hcan1
 430 012c 01000000 		.word	can_rx+1
 431 0130 00000000 		.word	comm_encoder
 432 0134 00000000 		.word	__float_reg
 433 0138 00000000 		.word	controller
 434 013c 00000000 		.word	can_tx
 435 0140 00000000 		.word	__int_reg
 436 0144 00000000 		.word	state
 437 0148 00000000 		.word	can_rx
 438 014c D8000000 		.word	controller+216
 439              		.cfi_endproc
 440              	.LFE247:
 442              		.section	.text.USART2_IRQHandler,"ax",%progbits
 443              		.align	1
 444              		.global	USART2_IRQHandler
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu fpv4-sp-d16
 450              	USART2_IRQHandler:
ARM GAS  /tmp/ccRePLki.s 			page 13


 451              	.LFB249:
 247:Core/Src/stm32f4xx_it.c **** 
 248:Core/Src/stm32f4xx_it.c **** /**
 249:Core/Src/stm32f4xx_it.c ****   * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
 250:Core/Src/stm32f4xx_it.c ****   */
 251:Core/Src/stm32f4xx_it.c **** void TIM1_UP_TIM10_IRQHandler(void)
 252:Core/Src/stm32f4xx_it.c **** {
 253:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
 254:Core/Src/stm32f4xx_it.c **** 	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing
 255:Core/Src/stm32f4xx_it.c **** 
 256:Core/Src/stm32f4xx_it.c **** 	/* Sample ADCs */
 257:Core/Src/stm32f4xx_it.c **** 	analog_sample(&controller);
 258:Core/Src/stm32f4xx_it.c **** 
 259:Core/Src/stm32f4xx_it.c **** 	/* Sample position sensor */
 260:Core/Src/stm32f4xx_it.c **** 	ps_sample(&comm_encoder, DT);
 261:Core/Src/stm32f4xx_it.c **** 
 262:Core/Src/stm32f4xx_it.c **** 	/* Run Finite State Machine */
 263:Core/Src/stm32f4xx_it.c **** 	run_fsm(&state);
 264:Core/Src/stm32f4xx_it.c **** 
 265:Core/Src/stm32f4xx_it.c **** 	/* Check for CAN messages */
 266:Core/Src/stm32f4xx_it.c **** 	can_tx_rx();
 267:Core/Src/stm32f4xx_it.c **** 
 268:Core/Src/stm32f4xx_it.c **** 	/* increment loop count */
 269:Core/Src/stm32f4xx_it.c **** 	controller.loop_count++;
 270:Core/Src/stm32f4xx_it.c **** 	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 271:Core/Src/stm32f4xx_it.c **** 
 272:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
 273:Core/Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 274:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
 275:Core/Src/stm32f4xx_it.c ****   /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
 276:Core/Src/stm32f4xx_it.c **** }
 277:Core/Src/stm32f4xx_it.c **** 
 278:Core/Src/stm32f4xx_it.c **** /**
 279:Core/Src/stm32f4xx_it.c ****   * @brief This function handles USART2 global interrupt.
 280:Core/Src/stm32f4xx_it.c ****   */
 281:Core/Src/stm32f4xx_it.c **** void USART2_IRQHandler(void)
 282:Core/Src/stm32f4xx_it.c **** {
 452              		.loc 1 282 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456 0000 10B5     		push	{r4, lr}
 457              	.LCFI5:
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 4, -8
 460              		.cfi_offset 14, -4
 283:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 284:Core/Src/stm32f4xx_it.c **** 	HAL_UART_IRQHandler(&huart2);
 461              		.loc 1 284 2 view .LVU77
 462 0002 064C     		ldr	r4, .L27
 463 0004 2046     		mov	r0, r4
 464 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
 465              	.LVL9:
 285:Core/Src/stm32f4xx_it.c **** 
 286:Core/Src/stm32f4xx_it.c **** 	char c = Serial2RxBuffer[0];
 466              		.loc 1 286 2 view .LVU78
 287:Core/Src/stm32f4xx_it.c **** 	update_fsm(&state, c);
ARM GAS  /tmp/ccRePLki.s 			page 14


 467              		.loc 1 287 2 view .LVU79
 468 000a 054B     		ldr	r3, .L27+4
 469              	.LVL10:
 470              		.loc 1 287 2 is_stmt 0 view .LVU80
 471 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 472 000e 0548     		ldr	r0, .L27+8
 473 0010 FFF7FEFF 		bl	update_fsm
 474              	.LVL11:
 288:Core/Src/stm32f4xx_it.c **** 
 289:Core/Src/stm32f4xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 290:Core/Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 475              		.loc 1 290 3 is_stmt 1 view .LVU81
 476 0014 2046     		mov	r0, r4
 477 0016 FFF7FEFF 		bl	HAL_UART_IRQHandler
 478              	.LVL12:
 291:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 292:Core/Src/stm32f4xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 293:Core/Src/stm32f4xx_it.c **** }
 479              		.loc 1 293 1 is_stmt 0 view .LVU82
 480 001a 10BD     		pop	{r4, pc}
 481              	.L28:
 482              		.align	2
 483              	.L27:
 484 001c 00000000 		.word	huart2
 485 0020 00000000 		.word	Serial2RxBuffer
 486 0024 00000000 		.word	state
 487              		.cfi_endproc
 488              	.LFE249:
 490              		.section	.text.can_tx_rx,"ax",%progbits
 491              		.align	1
 492              		.global	can_tx_rx
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 496              		.fpu fpv4-sp-d16
 498              	can_tx_rx:
 499              	.LFB250:
 294:Core/Src/stm32f4xx_it.c **** 
 295:Core/Src/stm32f4xx_it.c **** 
 296:Core/Src/stm32f4xx_it.c **** /* USER CODE BEGIN 1 */
 297:Core/Src/stm32f4xx_it.c **** 
 298:Core/Src/stm32f4xx_it.c **** void can_tx_rx(void){
 500              		.loc 1 298 21 is_stmt 1 view -0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 8
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 505              	.LCFI6:
 506              		.cfi_def_cfa_offset 20
 507              		.cfi_offset 4, -20
 508              		.cfi_offset 5, -16
 509              		.cfi_offset 6, -12
 510              		.cfi_offset 7, -8
 511              		.cfi_offset 14, -4
 512 0002 95B0     		sub	sp, sp, #84
 513              	.LCFI7:
 514              		.cfi_def_cfa_offset 104
ARM GAS  /tmp/ccRePLki.s 			page 15


 299:Core/Src/stm32f4xx_it.c **** 
 300:Core/Src/stm32f4xx_it.c **** 	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Rea
 515              		.loc 1 300 2 view .LVU84
 516              		.loc 1 300 18 is_stmt 0 view .LVU85
 517 0004 4A4B     		ldr	r3, .L39
 518 0006 03F10B02 		add	r2, r3, #11
 519 000a 0021     		movs	r1, #0
 520 000c 4948     		ldr	r0, .L39+4
 521 000e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 522              	.LVL13:
 301:Core/Src/stm32f4xx_it.c **** 	if(!no_mesage){
 523              		.loc 1 301 2 is_stmt 1 view .LVU86
 524              		.loc 1 301 4 is_stmt 0 view .LVU87
 525 0012 08B1     		cbz	r0, .L36
 526              	.LVL14:
 527              	.L29:
 302:Core/Src/stm32f4xx_it.c **** 		uint32_t TxMailbox;
 303:Core/Src/stm32f4xx_it.c **** 		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, contro
 304:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 305:Core/Src/stm32f4xx_it.c **** 
 306:Core/Src/stm32f4xx_it.c **** 		/* Check for special Commands */
 307:Core/Src/stm32f4xx_it.c **** 		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0
 308:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 309:Core/Src/stm32f4xx_it.c **** 			}
 310:Core/Src/stm32f4xx_it.c **** 		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[
 311:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 312:Core/Src/stm32f4xx_it.c **** 			}
 313:Core/Src/stm32f4xx_it.c **** 		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[
 314:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, ZERO_CMD);
 315:Core/Src/stm32f4xx_it.c **** 			}
 316:Core/Src/stm32f4xx_it.c **** 		else{
 317:Core/Src/stm32f4xx_it.c **** 			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 318:Core/Src/stm32f4xx_it.c **** 			  controller.timeout = 0;					// Reset timeout counter
 319:Core/Src/stm32f4xx_it.c **** 		controller.i_mag_max = controller.i_q;
 320:Core/Src/stm32f4xx_it.c **** 		}
 321:Core/Src/stm32f4xx_it.c **** 	}
 322:Core/Src/stm32f4xx_it.c **** 
 323:Core/Src/stm32f4xx_it.c **** }
 528              		.loc 1 323 1 view .LVU88
 529 0014 15B0     		add	sp, sp, #84
 530              	.LCFI8:
 531              		.cfi_remember_state
 532              		.cfi_def_cfa_offset 20
 533              		@ sp needed
 534 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 535              	.LVL15:
 536              	.L36:
 537              	.LCFI9:
 538              		.cfi_restore_state
 539              	.LBB2:
 302:Core/Src/stm32f4xx_it.c **** 		uint32_t TxMailbox;
 540              		.loc 1 302 3 is_stmt 1 view .LVU89
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 541              		.loc 1 303 3 view .LVU90
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 542              		.loc 1 303 60 is_stmt 0 view .LVU91
 543 0018 474B     		ldr	r3, .L39+8
ARM GAS  /tmp/ccRePLki.s 			page 16


 544 001a 93ED030A 		vldr.32	s0, [r3, #12]
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 545              		.loc 1 303 64 view .LVU92
 546 001e 474A     		ldr	r2, .L39+12
 547 0020 D2ED117A 		vldr.32	s15, [r2, #68]
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 548              		.loc 1 303 80 view .LVU93
 549 0024 D3ED180A 		vldr.32	s1, [r3, #96]
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 550              		.loc 1 303 104 view .LVU94
 551 0028 454B     		ldr	r3, .L39+16
 552 002a 93ED141A 		vldr.32	s2, [r3, #80]
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 553              		.loc 1 303 115 view .LVU95
 554 002e 92ED0E7A 		vldr.32	s14, [r2, #56]
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 555              		.loc 1 303 114 view .LVU96
 556 0032 21EE071A 		vmul.f32	s2, s2, s14
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 557              		.loc 1 303 132 view .LVU97
 558 0036 D3ED3B1A 		vldr.32	s3, [r3, #236]
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 559              		.loc 1 303 149 view .LVU98
 560 003a 93ED3C7A 		vldr.32	s14, [r3, #240]
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 561              		.loc 1 303 3 view .LVU99
 562 003e 414C     		ldr	r4, .L39+20
 563 0040 71EEC71A 		vsub.f32	s3, s3, s14
 564 0044 27EE811A 		vmul.f32	s2, s15, s2
 565 0048 C0EEA70A 		vdiv.f32	s1, s1, s15
 566 004c 80EE270A 		vdiv.f32	s0, s0, s15
 567 0050 3D4B     		ldr	r3, .L39+24
 568 0052 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 569 0054 2046     		mov	r0, r4
 570              	.LVL16:
 303:Core/Src/stm32f4xx_it.c **** 		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 571              		.loc 1 303 3 view .LVU100
 572 0056 FFF7FEFF 		bl	pack_reply
 573              	.LVL17:
 304:Core/Src/stm32f4xx_it.c **** 
 574              		.loc 1 304 3 is_stmt 1 view .LVU101
 575 005a 13AB     		add	r3, sp, #76
 576 005c 621C     		adds	r2, r4, #1
 577 005e 04F10801 		add	r1, r4, #8
 578 0062 3448     		ldr	r0, .L39+4
 579 0064 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 580              	.LVL18:
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 581              		.loc 1 307 3 view .LVU102
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 582              		.loc 1 307 19 is_stmt 0 view .LVU103
 583 0068 384A     		ldr	r2, .L39+28
 584 006a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 585              		.loc 1 307 44 view .LVU104
 586 006c 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
ARM GAS  /tmp/ccRePLki.s 			page 17


 587              		.loc 1 307 30 view .LVU105
 588 006e 0340     		ands	r3, r3, r0
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 589              		.loc 1 307 69 view .LVU106
 590 0070 D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 591              		.loc 1 307 55 view .LVU107
 592 0072 1840     		ands	r0, r0, r3
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 593              		.loc 1 307 94 view .LVU108
 594 0074 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 595              		.loc 1 307 80 view .LVU109
 596 0076 00EA0401 		and	r1, r0, r4
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 597              		.loc 1 307 119 view .LVU110
 598 007a 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 599              		.loc 1 307 105 view .LVU111
 600 007c 1940     		ands	r1, r1, r3
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 601              		.loc 1 307 144 view .LVU112
 602 007e 9679     		ldrb	r6, [r2, #6]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 603              		.loc 1 307 130 view .LVU113
 604 0080 3140     		ands	r1, r1, r6
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 605              		.loc 1 307 169 view .LVU114
 606 0082 D579     		ldrb	r5, [r2, #7]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 607              		.loc 1 307 155 view .LVU115
 608 0084 2940     		ands	r1, r1, r5
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 609              		.loc 1 307 194 view .LVU116
 610 0086 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 307:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, MOTOR_CMD);
 611              		.loc 1 307 5 view .LVU117
 612 0088 FF29     		cmp	r1, #255
 613 008a 08BF     		it	eq
 614 008c FC2A     		cmpeq	r2, #252
 615 008e 29D0     		beq	.L37
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 616              		.loc 1 310 8 is_stmt 1 view .LVU118
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 617              		.loc 1 310 102 is_stmt 0 view .LVU119
 618 0090 FF2C     		cmp	r4, #255
 619 0092 14BF     		ite	ne
 620 0094 0024     		movne	r4, #0
 621 0096 0124     		moveq	r4, #1
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 622              		.loc 1 310 127 view .LVU120
 623 0098 FF2B     		cmp	r3, #255
 624 009a 14BF     		ite	ne
 625 009c 0023     		movne	r3, #0
 626 009e 0123     		moveq	r3, #1
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 627              		.loc 1 310 110 view .LVU121
ARM GAS  /tmp/ccRePLki.s 			page 18


 628 00a0 03FB04F3 		mul	r3, r3, r4
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 629              		.loc 1 310 85 view .LVU122
 630 00a4 FF28     		cmp	r0, #255
 631 00a6 14BF     		ite	ne
 632 00a8 0023     		movne	r3, #0
 633 00aa 03F00103 		andeq	r3, r3, #1
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 634              		.loc 1 310 135 view .LVU123
 635 00ae FF2E     		cmp	r6, #255
 636 00b0 14BF     		ite	ne
 637 00b2 0023     		movne	r3, #0
 638 00b4 03F00103 		andeq	r3, r3, #1
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 639              		.loc 1 310 160 view .LVU124
 640 00b8 FF2D     		cmp	r5, #255
 641 00ba 14BF     		ite	ne
 642 00bc 0023     		movne	r3, #0
 643 00be 03F00103 		andeq	r3, r3, #1
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 644              		.loc 1 310 185 view .LVU125
 645 00c2 FD2A     		cmp	r2, #253
 646 00c4 14BF     		ite	ne
 647 00c6 0021     		movne	r1, #0
 648 00c8 03F00101 		andeq	r1, r3, #1
 310:Core/Src/stm32f4xx_it.c **** 			update_fsm(&state, MENU_CMD);
 649              		.loc 1 310 10 view .LVU126
 650 00cc 79B9     		cbnz	r1, .L38
 313:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, ZERO_CMD);
 651              		.loc 1 313 8 is_stmt 1 view .LVU127
 313:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, ZERO_CMD);
 652              		.loc 1 313 185 is_stmt 0 view .LVU128
 653 00ce FE2A     		cmp	r2, #254
 654 00d0 14BF     		ite	ne
 655 00d2 0023     		movne	r3, #0
 656 00d4 03F00103 		andeq	r3, r3, #1
 313:Core/Src/stm32f4xx_it.c **** 			  update_fsm(&state, ZERO_CMD);
 657              		.loc 1 313 10 view .LVU129
 658 00d8 73B1     		cbz	r3, .L34
 314:Core/Src/stm32f4xx_it.c **** 			}
 659              		.loc 1 314 6 is_stmt 1 view .LVU130
 660 00da 7A21     		movs	r1, #122
 661 00dc 1C48     		ldr	r0, .L39+32
 662 00de FFF7FEFF 		bl	update_fsm
 663              	.LVL19:
 664 00e2 97E7     		b	.L29
 665              	.L37:
 308:Core/Src/stm32f4xx_it.c **** 			}
 666              		.loc 1 308 6 view .LVU131
 667 00e4 6D21     		movs	r1, #109
 668 00e6 1A48     		ldr	r0, .L39+32
 669 00e8 FFF7FEFF 		bl	update_fsm
 670              	.LVL20:
 671 00ec 92E7     		b	.L29
 672              	.L38:
 311:Core/Src/stm32f4xx_it.c **** 			}
 673              		.loc 1 311 4 view .LVU132
ARM GAS  /tmp/ccRePLki.s 			page 19


 674 00ee 1B21     		movs	r1, #27
 675 00f0 1748     		ldr	r0, .L39+32
 676 00f2 FFF7FEFF 		bl	update_fsm
 677              	.LVL21:
 678 00f6 8DE7     		b	.L29
 679              	.L34:
 317:Core/Src/stm32f4xx_it.c **** 			  controller.timeout = 0;					// Reset timeout counter
 680              		.loc 1 317 6 view .LVU133
 681 00f8 144F     		ldr	r7, .L39+28
 682 00fa 164E     		ldr	r6, .L39+36
 683 00fc 1096     		str	r6, [sp, #64]
 684 00fe 6C46     		mov	r4, sp
 685 0100 07F11005 		add	r5, r7, #16
 686 0104 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 687 0106 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 688 0108 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 689 010a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 690 010c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 691 010e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 692 0110 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 693 0114 84E80F00 		stm	r4, {r0, r1, r2, r3}
 694 0118 97E80F00 		ldm	r7, {r0, r1, r2, r3}
 695 011c FFF7FEFF 		bl	unpack_cmd
 696              	.LVL22:
 318:Core/Src/stm32f4xx_it.c **** 		controller.i_mag_max = controller.i_q;
 697              		.loc 1 318 6 view .LVU134
 318:Core/Src/stm32f4xx_it.c **** 		controller.i_mag_max = controller.i_q;
 698              		.loc 1 318 25 is_stmt 0 view .LVU135
 699 0120 0022     		movs	r2, #0
 700 0122 46F8142C 		str	r2, [r6, #-20]
 319:Core/Src/stm32f4xx_it.c **** 		}
 701              		.loc 1 319 3 is_stmt 1 view .LVU136
 319:Core/Src/stm32f4xx_it.c **** 		}
 702              		.loc 1 319 36 is_stmt 0 view .LVU137
 703 0126 56F8982C 		ldr	r2, [r6, #-152]	@ float
 319:Core/Src/stm32f4xx_it.c **** 		}
 704              		.loc 1 319 24 view .LVU138
 705 012a 46F8882C 		str	r2, [r6, #-136]	@ float
 706              	.LBE2:
 707              		.loc 1 323 1 view .LVU139
 708 012e 71E7     		b	.L29
 709              	.L40:
 710              		.align	2
 711              	.L39:
 712 0130 01000000 		.word	can_rx+1
 713 0134 00000000 		.word	hcan1
 714 0138 00000000 		.word	comm_encoder
 715 013c 00000000 		.word	__float_reg
 716 0140 00000000 		.word	controller
 717 0144 00000000 		.word	can_tx
 718 0148 00000000 		.word	__int_reg
 719 014c 00000000 		.word	can_rx
 720 0150 00000000 		.word	state
 721 0154 D8000000 		.word	controller+216
 722              		.cfi_endproc
 723              	.LFE250:
 725              		.section	.text.TIM1_UP_TIM10_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccRePLki.s 			page 20


 726              		.align	1
 727              		.global	TIM1_UP_TIM10_IRQHandler
 728              		.syntax unified
 729              		.thumb
 730              		.thumb_func
 731              		.fpu fpv4-sp-d16
 733              	TIM1_UP_TIM10_IRQHandler:
 734              	.LFB248:
 252:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
 735              		.loc 1 252 1 is_stmt 1 view -0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739 0000 10B5     		push	{r4, lr}
 740              	.LCFI10:
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 4, -8
 743              		.cfi_offset 14, -4
 257:Core/Src/stm32f4xx_it.c **** 
 744              		.loc 1 257 2 view .LVU141
 745 0002 0B4C     		ldr	r4, .L43
 746 0004 2046     		mov	r0, r4
 747 0006 FFF7FEFF 		bl	analog_sample
 748              	.LVL23:
 260:Core/Src/stm32f4xx_it.c **** 
 749              		.loc 1 260 2 view .LVU142
 750 000a 9FED0A0A 		vldr.32	s0, .L43+4
 751 000e 0A48     		ldr	r0, .L43+8
 752 0010 FFF7FEFF 		bl	ps_sample
 753              	.LVL24:
 263:Core/Src/stm32f4xx_it.c **** 
 754              		.loc 1 263 2 view .LVU143
 755 0014 0948     		ldr	r0, .L43+12
 756 0016 FFF7FEFF 		bl	run_fsm
 757              	.LVL25:
 266:Core/Src/stm32f4xx_it.c **** 
 758              		.loc 1 266 2 view .LVU144
 759 001a FFF7FEFF 		bl	can_tx_rx
 760              	.LVL26:
 269:Core/Src/stm32f4xx_it.c **** 	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 761              		.loc 1 269 2 view .LVU145
 269:Core/Src/stm32f4xx_it.c **** 	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 762              		.loc 1 269 12 is_stmt 0 view .LVU146
 763 001e D4F8C030 		ldr	r3, [r4, #192]
 269:Core/Src/stm32f4xx_it.c **** 	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 764              		.loc 1 269 23 view .LVU147
 765 0022 0133     		adds	r3, r3, #1
 766 0024 C4F8C030 		str	r3, [r4, #192]
 273:Core/Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
 767              		.loc 1 273 3 is_stmt 1 view .LVU148
 768 0028 0548     		ldr	r0, .L43+16
 769 002a FFF7FEFF 		bl	HAL_TIM_IRQHandler
 770              	.LVL27:
 276:Core/Src/stm32f4xx_it.c **** 
 771              		.loc 1 276 1 is_stmt 0 view .LVU149
 772 002e 10BD     		pop	{r4, pc}
 773              	.L44:
ARM GAS  /tmp/ccRePLki.s 			page 21


 774              		.align	2
 775              	.L43:
 776 0030 00000000 		.word	controller
 777 0034 17B7D137 		.word	936490775
 778 0038 00000000 		.word	comm_encoder
 779 003c 00000000 		.word	state
 780 0040 00000000 		.word	htim1
 781              		.cfi_endproc
 782              	.LFE248:
 784              		.text
 785              	.Letext0:
 786              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 787              		.file 3 "Drivers/CMSIS/Include/core_cm4.h"
 788              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 789              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 790              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 791              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 792              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 793              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 794              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 795              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 796              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 797              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 798              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 799              		.file 15 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 800              		.file 16 "/usr/include/newlib/sys/_types.h"
 801              		.file 17 "/usr/include/newlib/sys/reent.h"
 802              		.file 18 "/usr/include/newlib/sys/lock.h"
 803              		.file 19 "Core/Inc/spi.h"
 804              		.file 20 "Core/Inc/adc.h"
 805              		.file 21 "Core/Inc/tim.h"
 806              		.file 22 "Core/Inc/position_sensor.h"
 807              		.file 23 "Core/Inc/flash_writer.h"
 808              		.file 24 "Core/Inc/preference_writer.h"
 809              		.file 25 "Core/Inc/fsm.h"
 810              		.file 26 "Core/Inc/drv8323.h"
 811              		.file 27 "Core/Inc/foc.h"
 812              		.file 28 "Core/Inc/calibration.h"
 813              		.file 29 "Core/Inc/can.h"
 814              		.file 30 "Core/Inc/structs.h"
 815              		.file 31 "Core/Inc/usart.h"
 816              		.file 32 "Core/Inc/user_config.h"
ARM GAS  /tmp/ccRePLki.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_it.c
     /tmp/ccRePLki.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccRePLki.s:40     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:47     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccRePLki.s:64     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:71     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccRePLki.s:88     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:95     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccRePLki.s:112    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:119    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccRePLki.s:136    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:143    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccRePLki.s:156    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:163    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccRePLki.s:176    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:183    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccRePLki.s:196    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccRePLki.s:203    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccRePLki.s:223    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccRePLki.s:230    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccRePLki.s:429    .text.CAN1_RX0_IRQHandler:0000000000000128 $d
     /tmp/ccRePLki.s:443    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccRePLki.s:450    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccRePLki.s:484    .text.USART2_IRQHandler:000000000000001c $d
     /tmp/ccRePLki.s:491    .text.can_tx_rx:0000000000000000 $t
     /tmp/ccRePLki.s:498    .text.can_tx_rx:0000000000000000 can_tx_rx
     /tmp/ccRePLki.s:712    .text.can_tx_rx:0000000000000130 $d
     /tmp/ccRePLki.s:726    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 $t
     /tmp/ccRePLki.s:733    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 TIM1_UP_TIM10_IRQHandler
     /tmp/ccRePLki.s:776    .text.TIM1_UP_TIM10_IRQHandler:0000000000000030 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_CAN_IRQHandler
HAL_CAN_GetRxMessage
pack_reply
HAL_CAN_AddTxMessage
update_fsm
unpack_cmd
hcan1
can_rx
comm_encoder
__float_reg
controller
can_tx
__int_reg
state
HAL_UART_IRQHandler
huart2
Serial2RxBuffer
analog_sample
ps_sample
run_fsm
HAL_TIM_IRQHandler
htim1
ARM GAS  /tmp/ccRePLki.s 			page 23


