ARM GAS  /tmp/cczwBOZG.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FLASH_SetLatency,"ax",%progbits
  18              		.align	1
  19              		.global	FLASH_SetLatency
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	FLASH_SetLatency:
  27              	.LVL0:
  28              	.LFB235:
  29              		.file 1 "Core/Src/stm32f4xx_flash.c"
   1:Core/Src/stm32f4xx_flash.c **** /**
   2:Core/Src/stm32f4xx_flash.c ****   ******************************************************************************
   3:Core/Src/stm32f4xx_flash.c ****   * @file    stm32f4xx_flash.c
   4:Core/Src/stm32f4xx_flash.c ****   * @author  MCD Application Team
   5:Core/Src/stm32f4xx_flash.c ****   * @version V1.7.1
   6:Core/Src/stm32f4xx_flash.c ****   * @date    20-May-2016
   7:Core/Src/stm32f4xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Core/Src/stm32f4xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:Core/Src/stm32f4xx_flash.c ****   *            + FLASH Interface configuration
  10:Core/Src/stm32f4xx_flash.c ****   *            + FLASH Memory Programming
  11:Core/Src/stm32f4xx_flash.c ****   *            + Option Bytes Programming
  12:Core/Src/stm32f4xx_flash.c ****   *            + Interrupts and flags management
  13:Core/Src/stm32f4xx_flash.c ****   *  
  14:Core/Src/stm32f4xx_flash.c ****  @verbatim    
  15:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
  16:Core/Src/stm32f4xx_flash.c ****                         ##### How to use this driver #####
  17:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
  18:Core/Src/stm32f4xx_flash.c ****     [..]                             
  19:Core/Src/stm32f4xx_flash.c ****       This driver provides functions to configure and program the FLASH memory 
  20:Core/Src/stm32f4xx_flash.c ****       of all STM32F4xx devices. These functions are split in 4 groups:
  21:Core/Src/stm32f4xx_flash.c ****    
  22:Core/Src/stm32f4xx_flash.c ****       (#) FLASH Interface configuration functions: this group includes the
  23:Core/Src/stm32f4xx_flash.c ****           management of the following features:
  24:Core/Src/stm32f4xx_flash.c ****         (++) Set the latency
  25:Core/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the prefetch buffer
  26:Core/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the Instruction cache and the Data cache
  27:Core/Src/stm32f4xx_flash.c ****         (++) Reset the Instruction cache and the Data cache
  28:Core/Src/stm32f4xx_flash.c ****     
  29:Core/Src/stm32f4xx_flash.c ****       (#) FLASH Memory Programming functions: this group includes all needed
ARM GAS  /tmp/cczwBOZG.s 			page 2


  30:Core/Src/stm32f4xx_flash.c ****           functions to erase and program the main memory:
  31:Core/Src/stm32f4xx_flash.c ****         (++) Lock and Unlock the FLASH interface
  32:Core/Src/stm32f4xx_flash.c ****         (++) Erase function: Erase sector, erase all sectors
  33:Core/Src/stm32f4xx_flash.c ****         (++) Program functions: byte, half word, word and double word
  34:Core/Src/stm32f4xx_flash.c ****     
  35:Core/Src/stm32f4xx_flash.c ****       (#) Option Bytes Programming functions: this group includes all needed
  36:Core/Src/stm32f4xx_flash.c ****           functions to manage the Option Bytes:
  37:Core/Src/stm32f4xx_flash.c ****         (++) Set/Reset the write protection
  38:Core/Src/stm32f4xx_flash.c ****         (++) Set the Read protection Level
  39:Core/Src/stm32f4xx_flash.c ****         (++) Set the BOR level
  40:Core/Src/stm32f4xx_flash.c ****         (++) Program the user Option Bytes
  41:Core/Src/stm32f4xx_flash.c ****         (++) Launch the Option Bytes loader
  42:Core/Src/stm32f4xx_flash.c ****     
  43:Core/Src/stm32f4xx_flash.c ****       (#) Interrupts and flags management functions: this group 
  44:Core/Src/stm32f4xx_flash.c ****           includes all needed functions to:
  45:Core/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the FLASH interrupt sources
  46:Core/Src/stm32f4xx_flash.c ****         (++) Get flags status
  47:Core/Src/stm32f4xx_flash.c ****         (++) Clear flags
  48:Core/Src/stm32f4xx_flash.c ****         (++) Get FLASH operation status
  49:Core/Src/stm32f4xx_flash.c ****         (++) Wait for last FLASH operation   
  50:Core/Src/stm32f4xx_flash.c ****  @endverbatim
  51:Core/Src/stm32f4xx_flash.c ****   ******************************************************************************
  52:Core/Src/stm32f4xx_flash.c ****   * @attention
  53:Core/Src/stm32f4xx_flash.c ****   *
  54:Core/Src/stm32f4xx_flash.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  55:Core/Src/stm32f4xx_flash.c ****   *
  56:Core/Src/stm32f4xx_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:Core/Src/stm32f4xx_flash.c ****   * You may not use this file except in compliance with the License.
  58:Core/Src/stm32f4xx_flash.c ****   * You may obtain a copy of the License at:
  59:Core/Src/stm32f4xx_flash.c ****   *
  60:Core/Src/stm32f4xx_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:Core/Src/stm32f4xx_flash.c ****   *
  62:Core/Src/stm32f4xx_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:Core/Src/stm32f4xx_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:Core/Src/stm32f4xx_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:Core/Src/stm32f4xx_flash.c ****   * See the License for the specific language governing permissions and
  66:Core/Src/stm32f4xx_flash.c ****   * limitations under the License.
  67:Core/Src/stm32f4xx_flash.c ****   *
  68:Core/Src/stm32f4xx_flash.c ****   ******************************************************************************
  69:Core/Src/stm32f4xx_flash.c ****   */
  70:Core/Src/stm32f4xx_flash.c ****  
  71:Core/Src/stm32f4xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  72:Core/Src/stm32f4xx_flash.c **** #include "stm32f4xx_flash.h"
  73:Core/Src/stm32f4xx_flash.c ****  
  74:Core/Src/stm32f4xx_flash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  75:Core/Src/stm32f4xx_flash.c ****   * @{
  76:Core/Src/stm32f4xx_flash.c ****   */
  77:Core/Src/stm32f4xx_flash.c ****  
  78:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH 
  79:Core/Src/stm32f4xx_flash.c ****   * @brief FLASH driver modules
  80:Core/Src/stm32f4xx_flash.c ****   * @{
  81:Core/Src/stm32f4xx_flash.c ****   */ 
  82:Core/Src/stm32f4xx_flash.c ****  
  83:Core/Src/stm32f4xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  84:Core/Src/stm32f4xx_flash.c **** /* Private define ------------------------------------------------------------*/ 
  85:Core/Src/stm32f4xx_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  86:Core/Src/stm32f4xx_flash.c ****  
ARM GAS  /tmp/cczwBOZG.s 			page 3


  87:Core/Src/stm32f4xx_flash.c **** /* Private macro -------------------------------------------------------------*/
  88:Core/Src/stm32f4xx_flash.c **** /* Private variables ---------------------------------------------------------*/
  89:Core/Src/stm32f4xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  90:Core/Src/stm32f4xx_flash.c **** /* Private functions ---------------------------------------------------------*/
  91:Core/Src/stm32f4xx_flash.c ****  
  92:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Private_Functions
  93:Core/Src/stm32f4xx_flash.c ****   * @{
  94:Core/Src/stm32f4xx_flash.c ****   */ 
  95:Core/Src/stm32f4xx_flash.c ****  
  96:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  97:Core/Src/stm32f4xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
  98:Core/Src/stm32f4xx_flash.c ****  *
  99:Core/Src/stm32f4xx_flash.c ****  
 100:Core/Src/stm32f4xx_flash.c **** @verbatim   
 101:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 102:Core/Src/stm32f4xx_flash.c ****               ##### FLASH Interface configuration functions #####
 103:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 104:Core/Src/stm32f4xx_flash.c ****     [..]
 105:Core/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 106:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
 107:Core/Src/stm32f4xx_flash.c ****           To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 108:Core/Src/stm32f4xx_flash.c ****           must be correctly programmed according to the frequency of the CPU clock 
 109:Core/Src/stm32f4xx_flash.c ****           (HCLK) and the supply voltage of the device.
 110:Core/Src/stm32f4xx_flash.c ****     [..]      
 111:Core/Src/stm32f4xx_flash.c ****       For STM32F405xx/07xx and STM32F415xx/17xx devices
 112:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 113:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 114:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 115:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 116:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 117:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 118:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 119:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 120:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 121:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 122:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 123:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 124:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 125:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 126:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 127:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 128:Core/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 129:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 130:Core/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 131:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 132:Core/Src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 133:Core/Src/stm32f4xx_flash.c ****  +---------------|----------------|----------------|-----------------|-----------------+
 134:Core/Src/stm32f4xx_flash.c ****  
 135:Core/Src/stm32f4xx_flash.c ****     [..]      
 136:Core/Src/stm32f4xx_flash.c ****       For STM32F42xxx/43xxx devices
 137:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 138:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 139:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 140:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 141:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 142:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 143:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
ARM GAS  /tmp/cczwBOZG.s 			page 4


 144:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 145:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 146:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 147:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 148:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 149:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 150:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 151:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 152:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 153:Core/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 154:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 155:Core/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 156:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 157:Core/Src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 158:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 159:Core/Src/stm32f4xx_flash.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 160:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 161:Core/Src/stm32f4xx_flash.c ****    
 162:Core/Src/stm32f4xx_flash.c ****     [..]
 163:Core/Src/stm32f4xx_flash.c ****     For STM32F401x devices
 164:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 165:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 166:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 167:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 168:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 169:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 170:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 171:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 172:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 173:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 174:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 175:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 176:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 177:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 178:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
 179:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 180:Core/Src/stm32f4xx_flash.c ****  
 181:Core/Src/stm32f4xx_flash.c ****     [..]
 182:Core/Src/stm32f4xx_flash.c ****     For STM32F410xx/STM32F411xE devices
 183:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 184:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 185:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 186:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 187:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 188:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 189:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 190:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 191:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 192:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 193:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 194:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 195:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 196:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 197:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 198:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 199:Core/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 200:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
ARM GAS  /tmp/cczwBOZG.s 			page 5


 201:Core/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 202:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 203:Core/Src/stm32f4xx_flash.c ****  
 204:Core/Src/stm32f4xx_flash.c ****  [..]
 205:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 206:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage ra
 207:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with Exter
 208:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 209:Core/Src/stm32f4xx_flash.c ****  |Max Parallelism|      x32       |               x16                |       x8        |          x
 210:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 211:Core/Src/stm32f4xx_flash.c ****  |PSIZE[1:0]     |      10        |               01                 |       00        |           
 212:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 213:Core/Src/stm32f4xx_flash.c ****  
 214:Core/Src/stm32f4xx_flash.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 215:Core/Src/stm32f4xx_flash.c ****            (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
 216:Core/Src/stm32f4xx_flash.c ****            (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
 217:Core/Src/stm32f4xx_flash.c ****           [..] 
 218:Core/Src/stm32f4xx_flash.c ****           On STM32F42xxx/43xxx devices:
 219:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
 220:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDr
 221:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDr
 222:Core/Src/stm32f4xx_flash.c ****           [..]
 223:Core/Src/stm32f4xx_flash.c ****           On STM32F401x devices:
 224:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
 225:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 226:Core/Src/stm32f4xx_flash.c ****           [..]  
 227:Core/Src/stm32f4xx_flash.c ****           On STM32F410xx/STM32F411xE devices:
 228:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 64MHz.
 229:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 230:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 100MHz.
 231:Core/Src/stm32f4xx_flash.c ****  
 232:Core/Src/stm32f4xx_flash.c ****         For more details please refer product DataSheet 
 233:Core/Src/stm32f4xx_flash.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 234:Core/Src/stm32f4xx_flash.c ****  
 235:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 236:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
 237:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheCmd(FunctionalState NewState)
 238:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheReset(void)
 239:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheReset(void)
 240:Core/Src/stm32f4xx_flash.c ****       
 241:Core/Src/stm32f4xx_flash.c ****     [..]   
 242:Core/Src/stm32f4xx_flash.c ****       The unlock sequence is not needed for these functions.
 243:Core/Src/stm32f4xx_flash.c ****  
 244:Core/Src/stm32f4xx_flash.c **** @endverbatim
 245:Core/Src/stm32f4xx_flash.c ****   * @{
 246:Core/Src/stm32f4xx_flash.c ****   */
 247:Core/Src/stm32f4xx_flash.c ****  
 248:Core/Src/stm32f4xx_flash.c **** /**
 249:Core/Src/stm32f4xx_flash.c ****   * @brief  Sets the code latency value.  
 250:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 251:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 252:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 253:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 254:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles
 255:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_3: FLASH Three Latency cycles
 256:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
 257:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
ARM GAS  /tmp/cczwBOZG.s 			page 6


 258:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_6: FLASH Six Latency cycles
 259:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
 260:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
 261:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
 262:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
 263:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
 264:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
 265:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles
 266:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
 267:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
 268:Core/Src/stm32f4xx_flash.c ****   *              
 269:Core/Src/stm32f4xx_flash.c ****   * @note For STM32F405xx/407xx, STM32F415xx/417xx, STM32F401xx/411xE and STM32F412xG devices
 270:Core/Src/stm32f4xx_flash.c ****   *       this parameter can be a value between FLASH_Latency_0 and FLASH_Latency_7.
 271:Core/Src/stm32f4xx_flash.c ****   *
 272:Core/Src/stm32f4xx_flash.c ****   * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
 273:Core/Src/stm32f4xx_flash.c ****   *       FLASH_Latency_0 and FLASH_Latency_15. 
 274:Core/Src/stm32f4xx_flash.c ****   *         
 275:Core/Src/stm32f4xx_flash.c ****   * @retval None
 276:Core/Src/stm32f4xx_flash.c ****   */
 277:Core/Src/stm32f4xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 278:Core/Src/stm32f4xx_flash.c **** {
  30              		.loc 1 278 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 279:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 280:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  35              		.loc 1 280 3 view .LVU1
 281:Core/Src/stm32f4xx_flash.c ****   
 282:Core/Src/stm32f4xx_flash.c ****   /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
 283:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
  36              		.loc 1 283 3 view .LVU2
  37              		.loc 1 283 40 is_stmt 0 view .LVU3
  38 0000 C0B2     		uxtb	r0, r0
  39              	.LVL1:
  40              		.loc 1 283 38 view .LVU4
  41 0002 014B     		ldr	r3, .L2
  42 0004 1870     		strb	r0, [r3]
 284:Core/Src/stm32f4xx_flash.c **** }
  43              		.loc 1 284 1 view .LVU5
  44 0006 7047     		bx	lr
  45              	.L3:
  46              		.align	2
  47              	.L2:
  48 0008 003C0240 		.word	1073888256
  49              		.cfi_endproc
  50              	.LFE235:
  52              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  53              		.align	1
  54              		.global	FLASH_PrefetchBufferCmd
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	FLASH_PrefetchBufferCmd:
  61              	.LVL2:
ARM GAS  /tmp/cczwBOZG.s 			page 7


  62              	.LFB236:
 285:Core/Src/stm32f4xx_flash.c ****  
 286:Core/Src/stm32f4xx_flash.c **** /**
 287:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 288:Core/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 289:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 290:Core/Src/stm32f4xx_flash.c ****   * @retval None
 291:Core/Src/stm32f4xx_flash.c ****   */
 292:Core/Src/stm32f4xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 293:Core/Src/stm32f4xx_flash.c **** {
  63              		.loc 1 293 1 is_stmt 1 view -0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
 294:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 295:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  68              		.loc 1 295 3 view .LVU7
 296:Core/Src/stm32f4xx_flash.c ****   
 297:Core/Src/stm32f4xx_flash.c ****   /* Enable or disable the Prefetch Buffer */
 298:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  69              		.loc 1 298 3 view .LVU8
  70              		.loc 1 298 5 is_stmt 0 view .LVU9
  71 0000 28B1     		cbz	r0, .L5
 299:Core/Src/stm32f4xx_flash.c ****   {
 300:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTEN;
  72              		.loc 1 300 5 is_stmt 1 view .LVU10
  73              		.loc 1 300 16 is_stmt 0 view .LVU11
  74 0002 064A     		ldr	r2, .L7
  75 0004 1368     		ldr	r3, [r2]
  76 0006 43F48073 		orr	r3, r3, #256
  77 000a 1360     		str	r3, [r2]
  78 000c 7047     		bx	lr
  79              	.L5:
 301:Core/Src/stm32f4xx_flash.c ****   }
 302:Core/Src/stm32f4xx_flash.c ****   else
 303:Core/Src/stm32f4xx_flash.c ****   {
 304:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  80              		.loc 1 304 5 is_stmt 1 view .LVU12
  81              		.loc 1 304 16 is_stmt 0 view .LVU13
  82 000e 034A     		ldr	r2, .L7
  83 0010 1368     		ldr	r3, [r2]
  84 0012 23F48073 		bic	r3, r3, #256
  85 0016 1360     		str	r3, [r2]
 305:Core/Src/stm32f4xx_flash.c ****   }
 306:Core/Src/stm32f4xx_flash.c **** }
  86              		.loc 1 306 1 view .LVU14
  87 0018 7047     		bx	lr
  88              	.L8:
  89 001a 00BF     		.align	2
  90              	.L7:
  91 001c 003C0240 		.word	1073888256
  92              		.cfi_endproc
  93              	.LFE236:
  95              		.section	.text.FLASH_InstructionCacheCmd,"ax",%progbits
  96              		.align	1
  97              		.global	FLASH_InstructionCacheCmd
ARM GAS  /tmp/cczwBOZG.s 			page 8


  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	FLASH_InstructionCacheCmd:
 104              	.LVL3:
 105              	.LFB237:
 307:Core/Src/stm32f4xx_flash.c ****  
 308:Core/Src/stm32f4xx_flash.c **** /**
 309:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Instruction Cache feature.
 310:Core/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Instruction Cache.
 311:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 312:Core/Src/stm32f4xx_flash.c ****   * @retval None
 313:Core/Src/stm32f4xx_flash.c ****   */
 314:Core/Src/stm32f4xx_flash.c **** void FLASH_InstructionCacheCmd(FunctionalState NewState)
 315:Core/Src/stm32f4xx_flash.c **** {
 106              		.loc 1 315 1 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 316:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 317:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 111              		.loc 1 317 3 view .LVU16
 318:Core/Src/stm32f4xx_flash.c ****   
 319:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 112              		.loc 1 319 3 view .LVU17
 113              		.loc 1 319 5 is_stmt 0 view .LVU18
 114 0000 28B1     		cbz	r0, .L10
 320:Core/Src/stm32f4xx_flash.c ****   {
 321:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_ICEN;
 115              		.loc 1 321 5 is_stmt 1 view .LVU19
 116              		.loc 1 321 16 is_stmt 0 view .LVU20
 117 0002 064A     		ldr	r2, .L12
 118 0004 1368     		ldr	r3, [r2]
 119 0006 43F40073 		orr	r3, r3, #512
 120 000a 1360     		str	r3, [r2]
 121 000c 7047     		bx	lr
 122              	.L10:
 322:Core/Src/stm32f4xx_flash.c ****   }
 323:Core/Src/stm32f4xx_flash.c ****   else
 324:Core/Src/stm32f4xx_flash.c ****   {
 325:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_ICEN);
 123              		.loc 1 325 5 is_stmt 1 view .LVU21
 124              		.loc 1 325 16 is_stmt 0 view .LVU22
 125 000e 034A     		ldr	r2, .L12
 126 0010 1368     		ldr	r3, [r2]
 127 0012 23F40073 		bic	r3, r3, #512
 128 0016 1360     		str	r3, [r2]
 326:Core/Src/stm32f4xx_flash.c ****   }
 327:Core/Src/stm32f4xx_flash.c **** }
 129              		.loc 1 327 1 view .LVU23
 130 0018 7047     		bx	lr
 131              	.L13:
 132 001a 00BF     		.align	2
 133              	.L12:
 134 001c 003C0240 		.word	1073888256
ARM GAS  /tmp/cczwBOZG.s 			page 9


 135              		.cfi_endproc
 136              	.LFE237:
 138              		.section	.text.FLASH_DataCacheCmd,"ax",%progbits
 139              		.align	1
 140              		.global	FLASH_DataCacheCmd
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	FLASH_DataCacheCmd:
 147              	.LVL4:
 148              	.LFB238:
 328:Core/Src/stm32f4xx_flash.c ****  
 329:Core/Src/stm32f4xx_flash.c **** /**
 330:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Data Cache feature.
 331:Core/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Data Cache.
 332:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 333:Core/Src/stm32f4xx_flash.c ****   * @retval None
 334:Core/Src/stm32f4xx_flash.c ****   */
 335:Core/Src/stm32f4xx_flash.c **** void FLASH_DataCacheCmd(FunctionalState NewState)
 336:Core/Src/stm32f4xx_flash.c **** {
 149              		.loc 1 336 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 337:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 338:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 154              		.loc 1 338 3 view .LVU25
 339:Core/Src/stm32f4xx_flash.c ****   
 340:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 155              		.loc 1 340 3 view .LVU26
 156              		.loc 1 340 5 is_stmt 0 view .LVU27
 157 0000 28B1     		cbz	r0, .L15
 341:Core/Src/stm32f4xx_flash.c ****   {
 342:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_DCEN;
 158              		.loc 1 342 5 is_stmt 1 view .LVU28
 159              		.loc 1 342 16 is_stmt 0 view .LVU29
 160 0002 064A     		ldr	r2, .L17
 161 0004 1368     		ldr	r3, [r2]
 162 0006 43F48063 		orr	r3, r3, #1024
 163 000a 1360     		str	r3, [r2]
 164 000c 7047     		bx	lr
 165              	.L15:
 343:Core/Src/stm32f4xx_flash.c ****   }
 344:Core/Src/stm32f4xx_flash.c ****   else
 345:Core/Src/stm32f4xx_flash.c ****   {
 346:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_DCEN);
 166              		.loc 1 346 5 is_stmt 1 view .LVU30
 167              		.loc 1 346 16 is_stmt 0 view .LVU31
 168 000e 034A     		ldr	r2, .L17
 169 0010 1368     		ldr	r3, [r2]
 170 0012 23F48063 		bic	r3, r3, #1024
 171 0016 1360     		str	r3, [r2]
 347:Core/Src/stm32f4xx_flash.c ****   }
 348:Core/Src/stm32f4xx_flash.c **** }
 172              		.loc 1 348 1 view .LVU32
ARM GAS  /tmp/cczwBOZG.s 			page 10


 173 0018 7047     		bx	lr
 174              	.L18:
 175 001a 00BF     		.align	2
 176              	.L17:
 177 001c 003C0240 		.word	1073888256
 178              		.cfi_endproc
 179              	.LFE238:
 181              		.section	.text.FLASH_InstructionCacheReset,"ax",%progbits
 182              		.align	1
 183              		.global	FLASH_InstructionCacheReset
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv4-sp-d16
 189              	FLASH_InstructionCacheReset:
 190              	.LFB239:
 349:Core/Src/stm32f4xx_flash.c ****  
 350:Core/Src/stm32f4xx_flash.c **** /**
 351:Core/Src/stm32f4xx_flash.c ****   * @brief  Resets the Instruction Cache.
 352:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Instruction Cache is disabled.  
 353:Core/Src/stm32f4xx_flash.c ****   * @param  None
 354:Core/Src/stm32f4xx_flash.c ****   * @retval None
 355:Core/Src/stm32f4xx_flash.c ****   */
 356:Core/Src/stm32f4xx_flash.c **** void FLASH_InstructionCacheReset(void)
 357:Core/Src/stm32f4xx_flash.c **** {
 191              		.loc 1 357 1 is_stmt 1 view -0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 358:Core/Src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_ICRST;
 196              		.loc 1 358 3 view .LVU34
 197              		.loc 1 358 14 is_stmt 0 view .LVU35
 198 0000 024A     		ldr	r2, .L20
 199 0002 1368     		ldr	r3, [r2]
 200 0004 43F40063 		orr	r3, r3, #2048
 201 0008 1360     		str	r3, [r2]
 359:Core/Src/stm32f4xx_flash.c **** }
 202              		.loc 1 359 1 view .LVU36
 203 000a 7047     		bx	lr
 204              	.L21:
 205              		.align	2
 206              	.L20:
 207 000c 003C0240 		.word	1073888256
 208              		.cfi_endproc
 209              	.LFE239:
 211              		.section	.text.FLASH_DataCacheReset,"ax",%progbits
 212              		.align	1
 213              		.global	FLASH_DataCacheReset
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv4-sp-d16
 219              	FLASH_DataCacheReset:
 220              	.LFB240:
 360:Core/Src/stm32f4xx_flash.c ****  
 361:Core/Src/stm32f4xx_flash.c **** /**
ARM GAS  /tmp/cczwBOZG.s 			page 11


 362:Core/Src/stm32f4xx_flash.c ****   * @brief  Resets the Data Cache.
 363:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Data Cache is disabled.  
 364:Core/Src/stm32f4xx_flash.c ****   * @param  None
 365:Core/Src/stm32f4xx_flash.c ****   * @retval None
 366:Core/Src/stm32f4xx_flash.c ****   */
 367:Core/Src/stm32f4xx_flash.c **** void FLASH_DataCacheReset(void)
 368:Core/Src/stm32f4xx_flash.c **** {
 221              		.loc 1 368 1 is_stmt 1 view -0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 369:Core/Src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_DCRST;
 226              		.loc 1 369 3 view .LVU38
 227              		.loc 1 369 14 is_stmt 0 view .LVU39
 228 0000 024A     		ldr	r2, .L23
 229 0002 1368     		ldr	r3, [r2]
 230 0004 43F48053 		orr	r3, r3, #4096
 231 0008 1360     		str	r3, [r2]
 370:Core/Src/stm32f4xx_flash.c **** }
 232              		.loc 1 370 1 view .LVU40
 233 000a 7047     		bx	lr
 234              	.L24:
 235              		.align	2
 236              	.L23:
 237 000c 003C0240 		.word	1073888256
 238              		.cfi_endproc
 239              	.LFE240:
 241              		.section	.text.FLASH_Unlock,"ax",%progbits
 242              		.align	1
 243              		.global	FLASH_Unlock
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	FLASH_Unlock:
 250              	.LFB241:
 371:Core/Src/stm32f4xx_flash.c ****  
 372:Core/Src/stm32f4xx_flash.c **** /**
 373:Core/Src/stm32f4xx_flash.c ****   * @}
 374:Core/Src/stm32f4xx_flash.c ****   */
 375:Core/Src/stm32f4xx_flash.c ****  
 376:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 377:Core/Src/stm32f4xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 378:Core/Src/stm32f4xx_flash.c ****  *
 379:Core/Src/stm32f4xx_flash.c **** @verbatim   
 380:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 381:Core/Src/stm32f4xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 382:Core/Src/stm32f4xx_flash.c ****  ===============================================================================   
 383:Core/Src/stm32f4xx_flash.c ****     [..]
 384:Core/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 385:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_Unlock(void)
 386:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_Lock(void)
 387:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 388:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
 389:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 390:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
ARM GAS  /tmp/cczwBOZG.s 			page 12


 391:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 392:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 393:Core/Src/stm32f4xx_flash.c ****           The following functions can be used only for STM32F42xxx/43xxx devices. 
 394:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 395:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
 396:Core/Src/stm32f4xx_flash.c ****     [..]   
 397:Core/Src/stm32f4xx_flash.c ****       Any operation of erase or program should follow these steps:
 398:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_Unlock() function to enable the FLASH control register access
 399:Core/Src/stm32f4xx_flash.c ****  
 400:Core/Src/stm32f4xx_flash.c ****       (#) Call the desired function to erase sector(s) or program data
 401:Core/Src/stm32f4xx_flash.c ****  
 402:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_Lock() function to disable the FLASH control register access
 403:Core/Src/stm32f4xx_flash.c ****           (recommended to protect the FLASH memory against possible unwanted operation)
 404:Core/Src/stm32f4xx_flash.c ****     
 405:Core/Src/stm32f4xx_flash.c **** @endverbatim
 406:Core/Src/stm32f4xx_flash.c ****   * @{
 407:Core/Src/stm32f4xx_flash.c ****   */
 408:Core/Src/stm32f4xx_flash.c ****  
 409:Core/Src/stm32f4xx_flash.c **** /**
 410:Core/Src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH control register access
 411:Core/Src/stm32f4xx_flash.c ****   * @param  None
 412:Core/Src/stm32f4xx_flash.c ****   * @retval None
 413:Core/Src/stm32f4xx_flash.c ****   */
 414:Core/Src/stm32f4xx_flash.c **** void FLASH_Unlock(void)
 415:Core/Src/stm32f4xx_flash.c **** {
 251              		.loc 1 415 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 416:Core/Src/stm32f4xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 256              		.loc 1 416 3 view .LVU42
 257              		.loc 1 416 12 is_stmt 0 view .LVU43
 258 0000 054B     		ldr	r3, .L28
 259 0002 1B69     		ldr	r3, [r3, #16]
 260              		.loc 1 416 5 view .LVU44
 261 0004 002B     		cmp	r3, #0
 262 0006 00DB     		blt	.L27
 263              	.L25:
 417:Core/Src/stm32f4xx_flash.c ****   {
 418:Core/Src/stm32f4xx_flash.c ****     /* Authorize the FLASH Registers access */
 419:Core/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 420:Core/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 421:Core/Src/stm32f4xx_flash.c ****   }  
 422:Core/Src/stm32f4xx_flash.c **** }
 264              		.loc 1 422 1 view .LVU45
 265 0008 7047     		bx	lr
 266              	.L27:
 419:Core/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 267              		.loc 1 419 5 is_stmt 1 view .LVU46
 419:Core/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 268              		.loc 1 419 17 is_stmt 0 view .LVU47
 269 000a 034B     		ldr	r3, .L28
 270 000c 034A     		ldr	r2, .L28+4
 271 000e 5A60     		str	r2, [r3, #4]
 420:Core/Src/stm32f4xx_flash.c ****   }  
 272              		.loc 1 420 5 is_stmt 1 view .LVU48
ARM GAS  /tmp/cczwBOZG.s 			page 13


 420:Core/Src/stm32f4xx_flash.c ****   }  
 273              		.loc 1 420 17 is_stmt 0 view .LVU49
 274 0010 02F18832 		add	r2, r2, #-2004318072
 275 0014 5A60     		str	r2, [r3, #4]
 276              		.loc 1 422 1 view .LVU50
 277 0016 F7E7     		b	.L25
 278              	.L29:
 279              		.align	2
 280              	.L28:
 281 0018 003C0240 		.word	1073888256
 282 001c 23016745 		.word	1164378403
 283              		.cfi_endproc
 284              	.LFE241:
 286              		.section	.text.FLASH_Lock,"ax",%progbits
 287              		.align	1
 288              		.global	FLASH_Lock
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv4-sp-d16
 294              	FLASH_Lock:
 295              	.LFB242:
 423:Core/Src/stm32f4xx_flash.c ****  
 424:Core/Src/stm32f4xx_flash.c **** /**
 425:Core/Src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH control register access
 426:Core/Src/stm32f4xx_flash.c ****   * @param  None
 427:Core/Src/stm32f4xx_flash.c ****   * @retval None
 428:Core/Src/stm32f4xx_flash.c ****   */
 429:Core/Src/stm32f4xx_flash.c **** void FLASH_Lock(void)
 430:Core/Src/stm32f4xx_flash.c **** {
 296              		.loc 1 430 1 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 431:Core/Src/stm32f4xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 432:Core/Src/stm32f4xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 301              		.loc 1 432 3 view .LVU52
 302              		.loc 1 432 13 is_stmt 0 view .LVU53
 303 0000 024A     		ldr	r2, .L31
 304 0002 1369     		ldr	r3, [r2, #16]
 305 0004 43F00043 		orr	r3, r3, #-2147483648
 306 0008 1361     		str	r3, [r2, #16]
 433:Core/Src/stm32f4xx_flash.c **** }
 307              		.loc 1 433 1 view .LVU54
 308 000a 7047     		bx	lr
 309              	.L32:
 310              		.align	2
 311              	.L31:
 312 000c 003C0240 		.word	1073888256
 313              		.cfi_endproc
 314              	.LFE242:
 316              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 317              		.align	1
 318              		.global	FLASH_OB_Unlock
 319              		.syntax unified
 320              		.thumb
ARM GAS  /tmp/cczwBOZG.s 			page 14


 321              		.thumb_func
 322              		.fpu fpv4-sp-d16
 324              	FLASH_OB_Unlock:
 325              	.LFB251:
 434:Core/Src/stm32f4xx_flash.c ****  
 435:Core/Src/stm32f4xx_flash.c **** /**
 436:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases a specified FLASH Sector.
 437:Core/Src/stm32f4xx_flash.c ****   *
 438:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 439:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 440:Core/Src/stm32f4xx_flash.c ****   *
 441:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_Sector: The Sector number to be erased.
 442:Core/Src/stm32f4xx_flash.c ****   *
 443:Core/Src/stm32f4xx_flash.c ****   *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
 444:Core/Src/stm32f4xx_flash.c ****   *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
 445:Core/Src/stm32f4xx_flash.c ****   *
 446:Core/Src/stm32f4xx_flash.c ****   *         For STM32F42xxx/43xxx devices this parameter can be a value between 
 447:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_23.
 448:Core/Src/stm32f4xx_flash.c ****   *
 449:Core/Src/stm32f4xx_flash.c ****   *         For STM32F401xx devices this parameter can be a value between 
 450:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_5.
 451:Core/Src/stm32f4xx_flash.c ****   *
 452:Core/Src/stm32f4xx_flash.c ****   *         For STM32F411xE and STM32F412xG devices this parameter can be a value between 
 453:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_7.
 454:Core/Src/stm32f4xx_flash.c ****   *
 455:Core/Src/stm32f4xx_flash.c ****   *         For STM32F410xx devices this parameter can be a value between 
 456:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_4.
 457:Core/Src/stm32f4xx_flash.c ****   *
 458:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 459:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 460:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 461:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 462:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 463:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 464:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 465:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 466:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 467:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 468:Core/Src/stm32f4xx_flash.c ****   *       
 469:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 470:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 471:Core/Src/stm32f4xx_flash.c ****   */
 472:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 473:Core/Src/stm32f4xx_flash.c **** {
 474:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 475:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 476:Core/Src/stm32f4xx_flash.c ****  
 477:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 478:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 479:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 480:Core/Src/stm32f4xx_flash.c ****   
 481:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 482:Core/Src/stm32f4xx_flash.c ****   {
 483:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 484:Core/Src/stm32f4xx_flash.c ****   }
 485:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 486:Core/Src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/cczwBOZG.s 			page 15


 487:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 488:Core/Src/stm32f4xx_flash.c ****   }
 489:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 490:Core/Src/stm32f4xx_flash.c ****   {
 491:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 492:Core/Src/stm32f4xx_flash.c ****   }
 493:Core/Src/stm32f4xx_flash.c ****   else
 494:Core/Src/stm32f4xx_flash.c ****   {
 495:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 496:Core/Src/stm32f4xx_flash.c ****   }
 497:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 498:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 499:Core/Src/stm32f4xx_flash.c ****   
 500:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 501:Core/Src/stm32f4xx_flash.c ****   { 
 502:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase the sector */
 503:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 504:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 505:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 506:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 507:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 508:Core/Src/stm32f4xx_flash.c ****     
 509:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 510:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 511:Core/Src/stm32f4xx_flash.c ****     
 512:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the SER Bit */
 513:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_SER);
 514:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 515:Core/Src/stm32f4xx_flash.c ****   }
 516:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 517:Core/Src/stm32f4xx_flash.c ****   return status;
 518:Core/Src/stm32f4xx_flash.c **** }
 519:Core/Src/stm32f4xx_flash.c ****  
 520:Core/Src/stm32f4xx_flash.c **** /**
 521:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors.
 522:Core/Src/stm32f4xx_flash.c ****   *
 523:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 524:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 525:Core/Src/stm32f4xx_flash.c ****   *  
 526:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 527:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 528:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 529:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 530:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 531:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 532:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 533:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 534:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 535:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 536:Core/Src/stm32f4xx_flash.c ****   *       
 537:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 538:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 539:Core/Src/stm32f4xx_flash.c ****   */
 540:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
 541:Core/Src/stm32f4xx_flash.c **** {
 542:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 543:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
ARM GAS  /tmp/cczwBOZG.s 			page 16


 544:Core/Src/stm32f4xx_flash.c ****   
 545:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 546:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 547:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 548:Core/Src/stm32f4xx_flash.c ****   
 549:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 550:Core/Src/stm32f4xx_flash.c ****   {
 551:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 552:Core/Src/stm32f4xx_flash.c ****   }
 553:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 554:Core/Src/stm32f4xx_flash.c ****   {
 555:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 556:Core/Src/stm32f4xx_flash.c ****   }
 557:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 558:Core/Src/stm32f4xx_flash.c ****   {
 559:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 560:Core/Src/stm32f4xx_flash.c ****   }
 561:Core/Src/stm32f4xx_flash.c ****   else
 562:Core/Src/stm32f4xx_flash.c ****   {
 563:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 564:Core/Src/stm32f4xx_flash.c ****   }  
 565:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 566:Core/Src/stm32f4xx_flash.c ****   {
 567:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 568:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 569:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 570:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 571:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 572:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 573:Core/Src/stm32f4xx_flash.c ****     
 574:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 575:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 576:Core/Src/stm32f4xx_flash.c ****  
 577:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 578:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 579:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
 580:Core/Src/stm32f4xx_flash.c ****  
 581:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
 582:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 583:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 584:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 585:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 586:Core/Src/stm32f4xx_flash.c ****     
 587:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 588:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 589:Core/Src/stm32f4xx_flash.c ****  
 590:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 591:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER);
 592:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F446xx
 593:Core/Src/stm32f4xx_flash.c ****  
 594:Core/Src/stm32f4xx_flash.c ****   }   
 595:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 596:Core/Src/stm32f4xx_flash.c ****   return status;
 597:Core/Src/stm32f4xx_flash.c **** }
 598:Core/Src/stm32f4xx_flash.c ****  
 599:Core/Src/stm32f4xx_flash.c **** /**
 600:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 1.
ARM GAS  /tmp/cczwBOZG.s 			page 17


 601:Core/Src/stm32f4xx_flash.c ****   *
 602:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 603:Core/Src/stm32f4xx_flash.c ****   *      
 604:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 605:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one. 
 606:Core/Src/stm32f4xx_flash.c ****   *  
 607:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 608:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 609:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 610:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 611:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 612:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 613:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 614:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 615:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 616:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 617:Core/Src/stm32f4xx_flash.c ****   *       
 618:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 619:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 620:Core/Src/stm32f4xx_flash.c ****   */
 621:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 622:Core/Src/stm32f4xx_flash.c **** {
 623:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 624:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 625:Core/Src/stm32f4xx_flash.c ****   
 626:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 627:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 628:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 629:Core/Src/stm32f4xx_flash.c ****   
 630:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 631:Core/Src/stm32f4xx_flash.c ****   {
 632:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 633:Core/Src/stm32f4xx_flash.c ****   }
 634:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 635:Core/Src/stm32f4xx_flash.c ****   {
 636:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 637:Core/Src/stm32f4xx_flash.c ****   }
 638:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 639:Core/Src/stm32f4xx_flash.c ****   {
 640:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 641:Core/Src/stm32f4xx_flash.c ****   }
 642:Core/Src/stm32f4xx_flash.c ****   else
 643:Core/Src/stm32f4xx_flash.c ****   {
 644:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 645:Core/Src/stm32f4xx_flash.c ****   }  
 646:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 647:Core/Src/stm32f4xx_flash.c ****   {
 648:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 649:Core/Src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 650:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 651:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 652:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 653:Core/Src/stm32f4xx_flash.c ****     
 654:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 655:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 656:Core/Src/stm32f4xx_flash.c ****  
 657:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
ARM GAS  /tmp/cczwBOZG.s 			page 18


 658:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER1);
 659:Core/Src/stm32f4xx_flash.c ****  
 660:Core/Src/stm32f4xx_flash.c ****   }   
 661:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 662:Core/Src/stm32f4xx_flash.c ****   return status;
 663:Core/Src/stm32f4xx_flash.c **** }
 664:Core/Src/stm32f4xx_flash.c ****  
 665:Core/Src/stm32f4xx_flash.c ****  
 666:Core/Src/stm32f4xx_flash.c **** /**
 667:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 2.
 668:Core/Src/stm32f4xx_flash.c ****   *
 669:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 670:Core/Src/stm32f4xx_flash.c ****   *     
 671:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 672:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 673:Core/Src/stm32f4xx_flash.c ****   *     
 674:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 675:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 676:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 677:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 678:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 679:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 680:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 681:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 682:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 683:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 684:Core/Src/stm32f4xx_flash.c ****   *       
 685:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 686:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 687:Core/Src/stm32f4xx_flash.c ****   */
 688:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
 689:Core/Src/stm32f4xx_flash.c **** {
 690:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 691:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 692:Core/Src/stm32f4xx_flash.c ****   
 693:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 694:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 695:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 696:Core/Src/stm32f4xx_flash.c ****   
 697:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 698:Core/Src/stm32f4xx_flash.c ****   {
 699:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 700:Core/Src/stm32f4xx_flash.c ****   }
 701:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 702:Core/Src/stm32f4xx_flash.c ****   {
 703:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 704:Core/Src/stm32f4xx_flash.c ****   }
 705:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 706:Core/Src/stm32f4xx_flash.c ****   {
 707:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 708:Core/Src/stm32f4xx_flash.c ****   }
 709:Core/Src/stm32f4xx_flash.c ****   else
 710:Core/Src/stm32f4xx_flash.c ****   {
 711:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 712:Core/Src/stm32f4xx_flash.c ****   }  
 713:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 714:Core/Src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/cczwBOZG.s 			page 19


 715:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 716:Core/Src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 717:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 718:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 719:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 720:Core/Src/stm32f4xx_flash.c ****     
 721:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 722:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 723:Core/Src/stm32f4xx_flash.c ****  
 724:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 725:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER2);
 726:Core/Src/stm32f4xx_flash.c ****  
 727:Core/Src/stm32f4xx_flash.c ****   }   
 728:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 729:Core/Src/stm32f4xx_flash.c ****   return status;
 730:Core/Src/stm32f4xx_flash.c **** }
 731:Core/Src/stm32f4xx_flash.c ****  
 732:Core/Src/stm32f4xx_flash.c **** /**
 733:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a double word (64-bit) at a specified address.
 734:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from
 735:Core/Src/stm32f4xx_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 736:Core/Src/stm32f4xx_flash.c ****   *
 737:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 738:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 739:Core/Src/stm32f4xx_flash.c ****   *  
 740:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 741:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 742:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 743:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 744:Core/Src/stm32f4xx_flash.c ****   */
 745:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 746:Core/Src/stm32f4xx_flash.c **** {
 747:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 748:Core/Src/stm32f4xx_flash.c ****  
 749:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 750:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 751:Core/Src/stm32f4xx_flash.c ****  
 752:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 753:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 754:Core/Src/stm32f4xx_flash.c ****   
 755:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 756:Core/Src/stm32f4xx_flash.c ****   {
 757:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 758:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 759:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 760:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 761:Core/Src/stm32f4xx_flash.c ****   
 762:Core/Src/stm32f4xx_flash.c ****     *(__IO uint64_t*)Address = Data;
 763:Core/Src/stm32f4xx_flash.c ****         
 764:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 765:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 766:Core/Src/stm32f4xx_flash.c ****  
 767:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 768:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 769:Core/Src/stm32f4xx_flash.c ****   } 
 770:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 771:Core/Src/stm32f4xx_flash.c ****   return status;
ARM GAS  /tmp/cczwBOZG.s 			page 20


 772:Core/Src/stm32f4xx_flash.c **** }
 773:Core/Src/stm32f4xx_flash.c ****  
 774:Core/Src/stm32f4xx_flash.c **** /**
 775:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a word (32-bit) at a specified address.
 776:Core/Src/stm32f4xx_flash.c ****   *
 777:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
 778:Core/Src/stm32f4xx_flash.c ****   *
 779:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 780:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 781:Core/Src/stm32f4xx_flash.c ****   *  
 782:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 783:Core/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 784:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 785:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 786:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 787:Core/Src/stm32f4xx_flash.c ****   */
 788:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 789:Core/Src/stm32f4xx_flash.c **** {
 790:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 791:Core/Src/stm32f4xx_flash.c ****  
 792:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 793:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 794:Core/Src/stm32f4xx_flash.c ****  
 795:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 796:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 797:Core/Src/stm32f4xx_flash.c ****   
 798:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 799:Core/Src/stm32f4xx_flash.c ****   {
 800:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 801:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 802:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 803:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 804:Core/Src/stm32f4xx_flash.c ****   
 805:Core/Src/stm32f4xx_flash.c ****     *(__IO uint32_t*)Address = Data;
 806:Core/Src/stm32f4xx_flash.c ****         
 807:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 808:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 809:Core/Src/stm32f4xx_flash.c ****  
 810:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 811:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 812:Core/Src/stm32f4xx_flash.c ****   } 
 813:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 814:Core/Src/stm32f4xx_flash.c ****   return status;
 815:Core/Src/stm32f4xx_flash.c **** }
 816:Core/Src/stm32f4xx_flash.c ****  
 817:Core/Src/stm32f4xx_flash.c **** /**
 818:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a half word (16-bit) at a specified address. 
 819:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
 820:Core/Src/stm32f4xx_flash.c ****   *
 821:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 822:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 823:Core/Src/stm32f4xx_flash.c ****   * 
 824:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 825:Core/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 826:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 827:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 828:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
ARM GAS  /tmp/cczwBOZG.s 			page 21


 829:Core/Src/stm32f4xx_flash.c ****   */
 830:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 831:Core/Src/stm32f4xx_flash.c **** {
 832:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 833:Core/Src/stm32f4xx_flash.c ****  
 834:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 835:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 836:Core/Src/stm32f4xx_flash.c ****  
 837:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 838:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 839:Core/Src/stm32f4xx_flash.c ****   
 840:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 841:Core/Src/stm32f4xx_flash.c ****   {
 842:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 843:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 844:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 845:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 846:Core/Src/stm32f4xx_flash.c ****   
 847:Core/Src/stm32f4xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 848:Core/Src/stm32f4xx_flash.c ****         
 849:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 850:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 851:Core/Src/stm32f4xx_flash.c ****  
 852:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 853:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 854:Core/Src/stm32f4xx_flash.c ****   } 
 855:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 856:Core/Src/stm32f4xx_flash.c ****   return status;
 857:Core/Src/stm32f4xx_flash.c **** }
 858:Core/Src/stm32f4xx_flash.c ****  
 859:Core/Src/stm32f4xx_flash.c **** /**
 860:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a byte (8-bit) at a specified address.
 861:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used within all the device supply voltage ranges.  
 862:Core/Src/stm32f4xx_flash.c ****   *
 863:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 864:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 865:Core/Src/stm32f4xx_flash.c ****   * 
 866:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 867:Core/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 868:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 869:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 870:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 871:Core/Src/stm32f4xx_flash.c ****   */
 872:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 873:Core/Src/stm32f4xx_flash.c **** {
 874:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 875:Core/Src/stm32f4xx_flash.c ****  
 876:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 877:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 878:Core/Src/stm32f4xx_flash.c ****  
 879:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 880:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 881:Core/Src/stm32f4xx_flash.c ****   
 882:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 883:Core/Src/stm32f4xx_flash.c ****   {
 884:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 885:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
ARM GAS  /tmp/cczwBOZG.s 			page 22


 886:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 887:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 888:Core/Src/stm32f4xx_flash.c ****   
 889:Core/Src/stm32f4xx_flash.c ****     *(__IO uint8_t*)Address = Data;
 890:Core/Src/stm32f4xx_flash.c ****         
 891:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 892:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 893:Core/Src/stm32f4xx_flash.c ****  
 894:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 895:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 896:Core/Src/stm32f4xx_flash.c ****   } 
 897:Core/Src/stm32f4xx_flash.c ****  
 898:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 899:Core/Src/stm32f4xx_flash.c ****   return status;
 900:Core/Src/stm32f4xx_flash.c **** }
 901:Core/Src/stm32f4xx_flash.c ****  
 902:Core/Src/stm32f4xx_flash.c **** /**
 903:Core/Src/stm32f4xx_flash.c ****   * @}
 904:Core/Src/stm32f4xx_flash.c ****   */
 905:Core/Src/stm32f4xx_flash.c ****  
 906:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 907:Core/Src/stm32f4xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 908:Core/Src/stm32f4xx_flash.c ****  *
 909:Core/Src/stm32f4xx_flash.c **** @verbatim   
 910:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 911:Core/Src/stm32f4xx_flash.c ****                 ##### Option Bytes Programming functions #####
 912:Core/Src/stm32f4xx_flash.c ****  ===============================================================================  
 913:Core/Src/stm32f4xx_flash.c ****     [..]
 914:Core/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 915:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Unlock(void)
 916:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Lock(void)
 917:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
 918:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
 919:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
 920:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
 921:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
 922:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
 923:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 924:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
 925:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)
 926:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_OB_Launch(void)
 927:Core/Src/stm32f4xx_flash.c ****       (+) uint32_t FLASH_OB_GetUser(void)
 928:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP(void)
 929:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP1(void)
 930:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP(void)
 931:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP1(void)
 932:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetRDP(void)
 933:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetBOR(void)
 934:Core/Src/stm32f4xx_flash.c ****     [..]  
 935:Core/Src/stm32f4xx_flash.c ****       The following function can be used only for STM32F42xxx/43xxx devices. 
 936:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
 937:Core/Src/stm32f4xx_flash.c ****     [..]   
 938:Core/Src/stm32f4xx_flash.c ****      Any operation of erase or program should follow these steps:
 939:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 940:Core/Src/stm32f4xx_flash.c ****           register access
 941:Core/Src/stm32f4xx_flash.c ****  
 942:Core/Src/stm32f4xx_flash.c ****       (#) Call one or several functions to program the desired Option Bytes:
ARM GAS  /tmp/cczwBOZG.s 			page 23


 943:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 944:Core/Src/stm32f4xx_flash.c ****              => to Enable/Disable the desired sector write protection
 945:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
 946:Core/Src/stm32f4xx_flash.c ****              Protection Level
 947:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 948:Core/Src/stm32f4xx_flash.c ****              => to configure the user Option Bytes.
 949:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level             
 950:Core/Src/stm32f4xx_flash.c ****  
 951:Core/Src/stm32f4xx_flash.c ****       (#) Once all needed Option Bytes to be programmed are correctly written, 
 952:Core/Src/stm32f4xx_flash.c ****           call the FLASH_OB_Launch() function to launch the Option Bytes 
 953:Core/Src/stm32f4xx_flash.c ****           programming process.
 954:Core/Src/stm32f4xx_flash.c ****      
 955:Core/Src/stm32f4xx_flash.c ****       -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
 956:Core/Src/stm32f4xx_flash.c ****           reset is needed to make the change effective.  
 957:Core/Src/stm32f4xx_flash.c ****  
 958:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 959:Core/Src/stm32f4xx_flash.c ****           register access (recommended to protect the Option Bytes against 
 960:Core/Src/stm32f4xx_flash.c ****           possible unwanted operations)
 961:Core/Src/stm32f4xx_flash.c ****     
 962:Core/Src/stm32f4xx_flash.c **** @endverbatim
 963:Core/Src/stm32f4xx_flash.c ****   * @{
 964:Core/Src/stm32f4xx_flash.c ****   */
 965:Core/Src/stm32f4xx_flash.c ****  
 966:Core/Src/stm32f4xx_flash.c **** /**
 967:Core/Src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH Option Control Registers access.
 968:Core/Src/stm32f4xx_flash.c ****   * @param  None
 969:Core/Src/stm32f4xx_flash.c ****   * @retval None
 970:Core/Src/stm32f4xx_flash.c ****   */
 971:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_Unlock(void)
 972:Core/Src/stm32f4xx_flash.c **** {
 326              		.loc 1 972 1 is_stmt 1 view -0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 973:Core/Src/stm32f4xx_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 331              		.loc 1 973 3 view .LVU56
 332              		.loc 1 973 12 is_stmt 0 view .LVU57
 333 0000 054B     		ldr	r3, .L35
 334 0002 5B69     		ldr	r3, [r3, #20]
 335              		.loc 1 973 5 view .LVU58
 336 0004 13F0010F 		tst	r3, #1
 337 0008 05D0     		beq	.L33
 974:Core/Src/stm32f4xx_flash.c ****   {
 975:Core/Src/stm32f4xx_flash.c ****     /* Authorizes the Option Byte register programming */
 976:Core/Src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 338              		.loc 1 976 5 is_stmt 1 view .LVU59
 339              		.loc 1 976 20 is_stmt 0 view .LVU60
 340 000a 034B     		ldr	r3, .L35
 341 000c 034A     		ldr	r2, .L35+4
 342 000e 9A60     		str	r2, [r3, #8]
 977:Core/Src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 343              		.loc 1 977 5 is_stmt 1 view .LVU61
 344              		.loc 1 977 20 is_stmt 0 view .LVU62
 345 0010 02F14432 		add	r2, r2, #1145324612
 346 0014 9A60     		str	r2, [r3, #8]
 347              	.L33:
ARM GAS  /tmp/cczwBOZG.s 			page 24


 978:Core/Src/stm32f4xx_flash.c ****   }  
 979:Core/Src/stm32f4xx_flash.c **** }
 348              		.loc 1 979 1 view .LVU63
 349 0016 7047     		bx	lr
 350              	.L36:
 351              		.align	2
 352              	.L35:
 353 0018 003C0240 		.word	1073888256
 354 001c 3B2A1908 		.word	135866939
 355              		.cfi_endproc
 356              	.LFE251:
 358              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 359              		.align	1
 360              		.global	FLASH_OB_Lock
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu fpv4-sp-d16
 366              	FLASH_OB_Lock:
 367              	.LFB252:
 980:Core/Src/stm32f4xx_flash.c ****  
 981:Core/Src/stm32f4xx_flash.c **** /**
 982:Core/Src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH Option Control Registers access.
 983:Core/Src/stm32f4xx_flash.c ****   * @param  None
 984:Core/Src/stm32f4xx_flash.c ****   * @retval None
 985:Core/Src/stm32f4xx_flash.c ****   */
 986:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_Lock(void)
 987:Core/Src/stm32f4xx_flash.c **** {
 368              		.loc 1 987 1 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 988:Core/Src/stm32f4xx_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 989:Core/Src/stm32f4xx_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 373              		.loc 1 989 3 view .LVU65
 374              		.loc 1 989 16 is_stmt 0 view .LVU66
 375 0000 024A     		ldr	r2, .L38
 376 0002 5369     		ldr	r3, [r2, #20]
 377 0004 43F00103 		orr	r3, r3, #1
 378 0008 5361     		str	r3, [r2, #20]
 990:Core/Src/stm32f4xx_flash.c **** }
 379              		.loc 1 990 1 view .LVU67
 380 000a 7047     		bx	lr
 381              	.L39:
 382              		.align	2
 383              	.L38:
 384 000c 003C0240 		.word	1073888256
 385              		.cfi_endproc
 386              	.LFE252:
 388              		.section	.text.FLASH_OB_PCROPSelectionConfig,"ax",%progbits
 389              		.align	1
 390              		.global	FLASH_OB_PCROPSelectionConfig
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 394              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cczwBOZG.s 			page 25


 396              	FLASH_OB_PCROPSelectionConfig:
 397              	.LVL5:
 398              	.LFB255:
 991:Core/Src/stm32f4xx_flash.c ****  
 992:Core/Src/stm32f4xx_flash.c **** /**
 993:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the first
 994:Core/Src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
 995:Core/Src/stm32f4xx_flash.c ****   *
 996:Core/Src/stm32f4xx_flash.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 997:Core/Src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 998:Core/Src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 999:Core/Src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1000:Core/Src/stm32f4xx_flash.c ****   * 
1001:Core/Src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1002:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1003:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                     
1004:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All
1005:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1006:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1007:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1008:Core/Src/stm32f4xx_flash.c ****   */
1009:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
1010:Core/Src/stm32f4xx_flash.c **** { 
1011:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
1012:Core/Src/stm32f4xx_flash.c ****   
1013:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1014:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1015:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1016:Core/Src/stm32f4xx_flash.c ****     
1017:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
1018:Core/Src/stm32f4xx_flash.c ****  
1019:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
1020:Core/Src/stm32f4xx_flash.c ****   { 
1021:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1022:Core/Src/stm32f4xx_flash.c ****     {
1023:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
1024:Core/Src/stm32f4xx_flash.c ****     }
1025:Core/Src/stm32f4xx_flash.c ****     else
1026:Core/Src/stm32f4xx_flash.c ****     {
1027:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1028:Core/Src/stm32f4xx_flash.c ****     }
1029:Core/Src/stm32f4xx_flash.c ****   }
1030:Core/Src/stm32f4xx_flash.c **** }
1031:Core/Src/stm32f4xx_flash.c ****  
1032:Core/Src/stm32f4xx_flash.c **** /**
1033:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the second
1034:Core/Src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
1035:Core/Src/stm32f4xx_flash.c ****   *           
1036:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1037:Core/Src/stm32f4xx_flash.c ****   *   
1038:Core/Src/stm32f4xx_flash.c ****   * @note   When the memory read out protection is selected (RDP level = 1), 
1039:Core/Src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1040:Core/Src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1041:Core/Src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
1042:Core/Src/stm32f4xx_flash.c ****   * 
1043:Core/Src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1044:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/cczwBOZG.s 			page 26


1045:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
1046:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All                        
1047:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1048:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1049:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1050:Core/Src/stm32f4xx_flash.c ****   */
1051:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
1052:Core/Src/stm32f4xx_flash.c **** { 
1053:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
1054:Core/Src/stm32f4xx_flash.c ****   
1055:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1056:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1057:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1058:Core/Src/stm32f4xx_flash.c ****     
1059:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
1060:Core/Src/stm32f4xx_flash.c ****  
1061:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
1062:Core/Src/stm32f4xx_flash.c ****   { 
1063:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1064:Core/Src/stm32f4xx_flash.c ****     {
1065:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
1066:Core/Src/stm32f4xx_flash.c ****     }
1067:Core/Src/stm32f4xx_flash.c ****     else
1068:Core/Src/stm32f4xx_flash.c ****     {
1069:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1070:Core/Src/stm32f4xx_flash.c ****     }
1071:Core/Src/stm32f4xx_flash.c ****   }
1072:Core/Src/stm32f4xx_flash.c **** }
1073:Core/Src/stm32f4xx_flash.c ****  
1074:Core/Src/stm32f4xx_flash.c **** /**
1075:Core/Src/stm32f4xx_flash.c ****   * @brief  Select the Protection Mode (SPRMOD). 
1076:Core/Src/stm32f4xx_flash.c ****   * 
1077:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices.    
1078:Core/Src/stm32f4xx_flash.c ****   * 
1079:Core/Src/stm32f4xx_flash.c ****   * @note   After PCROP activation, Option Byte modification is not possible. 
1080:Core/Src/stm32f4xx_flash.c ****   *         Exception made for the global Read Out Protection modification level (level1 to level0)
1081:Core/Src/stm32f4xx_flash.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
1082:Core/Src/stm32f4xx_flash.c ****   *   
1083:Core/Src/stm32f4xx_flash.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
1084:Core/Src/stm32f4xx_flash.c ****   *   
1085:Core/Src/stm32f4xx_flash.c ****   * @note   Some Precautions should be taken when activating the PCROP feature :
1086:Core/Src/stm32f4xx_flash.c ****   *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPR
1087:Core/Src/stm32f4xx_flash.c ****   *         and WRPi = 1 (default value), then the user sector i is read/write protected.
1088:Core/Src/stm32f4xx_flash.c ****   *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
1089:Core/Src/stm32f4xx_flash.c ****   *         below safety sequence :       
1090:Core/Src/stm32f4xx_flash.c ****   *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE
1091:Core/Src/stm32f4xx_flash.c ****   *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2  
1092:Core/Src/stm32f4xx_flash.c ****   *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) fu
1093:Core/Src/stm32f4xx_flash.c ****   *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
1094:Core/Src/stm32f4xx_flash.c ****   * 
1095:Core/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
1096:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1097:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors
1098:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective
1099:Core/Src/stm32f4xx_flash.c ****   * @retval None
1100:Core/Src/stm32f4xx_flash.c ****   */
1101:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
ARM GAS  /tmp/cczwBOZG.s 			page 27


1102:Core/Src/stm32f4xx_flash.c **** {  
 399              		.loc 1 1102 1 is_stmt 1 view -0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              		@ link register save eliminated.
1103:Core/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 404              		.loc 1 1103 3 view .LVU69
1104:Core/Src/stm32f4xx_flash.c ****       
1105:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1106:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
 405              		.loc 1 1106 3 view .LVU70
1107:Core/Src/stm32f4xx_flash.c ****   
1108:Core/Src/stm32f4xx_flash.c ****   /* Mask SPRMOD bit */
1109:Core/Src/stm32f4xx_flash.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 406              		.loc 1 1109 3 view .LVU71
 407              		.loc 1 1109 65 is_stmt 0 view .LVU72
 408 0000 034A     		ldr	r2, .L41
 409 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 410              		.loc 1 1109 13 view .LVU73
 411 0004 03F07F03 		and	r3, r3, #127
 412              	.LVL6:
1110:Core/Src/stm32f4xx_flash.c ****   /* Update Option Byte */
1111:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 413              		.loc 1 1111 3 is_stmt 1 view .LVU74
 414              		.loc 1 1111 42 is_stmt 0 view .LVU75
 415 0008 0343     		orrs	r3, r3, r0
 416              	.LVL7:
 417              		.loc 1 1111 40 view .LVU76
 418 000a 1370     		strb	r3, [r2]
1112:Core/Src/stm32f4xx_flash.c ****     
1113:Core/Src/stm32f4xx_flash.c **** }
 419              		.loc 1 1113 1 view .LVU77
 420 000c 7047     		bx	lr
 421              	.L42:
 422 000e 00BF     		.align	2
 423              	.L41:
 424 0010 173C0240 		.word	1073888279
 425              		.cfi_endproc
 426              	.LFE255:
 428              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 429              		.align	1
 430              		.global	FLASH_OB_BootConfig
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv4-sp-d16
 436              	FLASH_OB_BootConfig:
 437              	.LVL8:
 438              	.LFB260:
1114:Core/Src/stm32f4xx_flash.c ****  
1115:Core/Src/stm32f4xx_flash.c **** /**
1116:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the read/write protection (PCROP) of the desired 
1117:Core/Src/stm32f4xx_flash.c ****   *         sectors, for the first 1 MB of the Flash.
1118:Core/Src/stm32f4xx_flash.c ****   *           
1119:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx , STM32F401xx/411xE 
1120:Core/Src/stm32f4xx_flash.c ****   *         and STM32F412xG devices.
ARM GAS  /tmp/cczwBOZG.s 			page 28


1121:Core/Src/stm32f4xx_flash.c ****   *   
1122:Core/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1123:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1124:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
1125:Core/Src/stm32f4xx_flash.c ****   *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
1126:Core/Src/stm32f4xx_flash.c ****   *                           OB_PCROP_Sector5 for STM32F401xx/411xE devices.
1127:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1128:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1129:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1130:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1131:Core/Src/stm32f4xx_flash.c ****   */
1132:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
1133:Core/Src/stm32f4xx_flash.c **** { 
1134:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
1135:Core/Src/stm32f4xx_flash.c ****   
1136:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1137:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1138:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1139:Core/Src/stm32f4xx_flash.c ****     
1140:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
1141:Core/Src/stm32f4xx_flash.c ****  
1142:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
1143:Core/Src/stm32f4xx_flash.c ****   { 
1144:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1145:Core/Src/stm32f4xx_flash.c ****     {
1146:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
1147:Core/Src/stm32f4xx_flash.c ****     }
1148:Core/Src/stm32f4xx_flash.c ****     else
1149:Core/Src/stm32f4xx_flash.c ****     {
1150:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
1151:Core/Src/stm32f4xx_flash.c ****     }
1152:Core/Src/stm32f4xx_flash.c ****   }
1153:Core/Src/stm32f4xx_flash.c **** }
1154:Core/Src/stm32f4xx_flash.c ****  
1155:Core/Src/stm32f4xx_flash.c **** /**
1156:Core/Src/stm32f4xx_flash.c ****    * @brief Enables or disables the read/write protection (PCROP) of the desired 
1157:Core/Src/stm32f4xx_flash.c ****   *         sectors
1158:Core/Src/stm32f4xx_flash.c ****   *           
1159:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1160:Core/Src/stm32f4xx_flash.c ****   *   
1161:Core/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1162:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1163:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
1164:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1165:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1166:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1167:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1168:Core/Src/stm32f4xx_flash.c ****   */
1169:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
1170:Core/Src/stm32f4xx_flash.c **** { 
1171:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
1172:Core/Src/stm32f4xx_flash.c ****   
1173:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1174:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1175:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1176:Core/Src/stm32f4xx_flash.c ****     
1177:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
ARM GAS  /tmp/cczwBOZG.s 			page 29


1178:Core/Src/stm32f4xx_flash.c ****  
1179:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
1180:Core/Src/stm32f4xx_flash.c ****   { 
1181:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
1182:Core/Src/stm32f4xx_flash.c ****     {
1183:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
1184:Core/Src/stm32f4xx_flash.c ****     }
1185:Core/Src/stm32f4xx_flash.c ****     else
1186:Core/Src/stm32f4xx_flash.c ****     {
1187:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
1188:Core/Src/stm32f4xx_flash.c ****     }
1189:Core/Src/stm32f4xx_flash.c ****   }
1190:Core/Src/stm32f4xx_flash.c **** }
1191:Core/Src/stm32f4xx_flash.c ****  
1192:Core/Src/stm32f4xx_flash.c ****  
1193:Core/Src/stm32f4xx_flash.c **** /**
1194:Core/Src/stm32f4xx_flash.c ****   * @brief  Sets the read protection level.
1195:Core/Src/stm32f4xx_flash.c ****   * @param  OB_RDP: specifies the read protection level.
1196:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1197:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_0: No protection
1198:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_1: Read protection of the memory
1199:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_2: Full chip protection
1200:Core/Src/stm32f4xx_flash.c ****   *   
1201:Core/Src/stm32f4xx_flash.c ****   * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1202:Core/Src/stm32f4xx_flash.c ****   *    
1203:Core/Src/stm32f4xx_flash.c ****   * @retval None
1204:Core/Src/stm32f4xx_flash.c ****   */
1205:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_RDPConfig(uint8_t OB_RDP)
1206:Core/Src/stm32f4xx_flash.c **** {
1207:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
1208:Core/Src/stm32f4xx_flash.c ****  
1209:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1210:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
1211:Core/Src/stm32f4xx_flash.c ****  
1212:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
1213:Core/Src/stm32f4xx_flash.c ****  
1214:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
1215:Core/Src/stm32f4xx_flash.c ****   {
1216:Core/Src/stm32f4xx_flash.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
1217:Core/Src/stm32f4xx_flash.c ****  
1218:Core/Src/stm32f4xx_flash.c ****   }
1219:Core/Src/stm32f4xx_flash.c **** }
1220:Core/Src/stm32f4xx_flash.c ****  
1221:Core/Src/stm32f4xx_flash.c **** /**
1222:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1223:Core/Src/stm32f4xx_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1224:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1225:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1226:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1227:Core/Src/stm32f4xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1228:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1229:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
1230:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1231:Core/Src/stm32f4xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1232:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1233:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1234:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
ARM GAS  /tmp/cczwBOZG.s 			page 30


1235:Core/Src/stm32f4xx_flash.c ****   * @retval None
1236:Core/Src/stm32f4xx_flash.c ****   */
1237:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1238:Core/Src/stm32f4xx_flash.c **** {
1239:Core/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
1240:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2; 
1241:Core/Src/stm32f4xx_flash.c ****  
1242:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1243:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1244:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1245:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1246:Core/Src/stm32f4xx_flash.c ****  
1247:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1248:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
1249:Core/Src/stm32f4xx_flash.c ****   
1250:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
1251:Core/Src/stm32f4xx_flash.c ****   { 
1252:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
1253:Core/Src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1254:Core/Src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1255:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
1256:Core/Src/stm32f4xx_flash.c ****  
1257:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
1258:Core/Src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
1259:Core/Src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
1260:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
1261:Core/Src/stm32f4xx_flash.c ****  
1262:Core/Src/stm32f4xx_flash.c ****     /* Update User Option Byte */
1263:Core/Src/stm32f4xx_flash.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uin
1264:Core/Src/stm32f4xx_flash.c ****   }  
1265:Core/Src/stm32f4xx_flash.c **** }
1266:Core/Src/stm32f4xx_flash.c ****  
1267:Core/Src/stm32f4xx_flash.c **** /**
1268:Core/Src/stm32f4xx_flash.c ****   * @brief  Configure the Dual Bank Boot.
1269:Core/Src/stm32f4xx_flash.c ****   *   
1270:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1271:Core/Src/stm32f4xx_flash.c ****   *      
1272:Core/Src/stm32f4xx_flash.c ****   * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
1273:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1274:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
1275:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
1276:Core/Src/stm32f4xx_flash.c ****   * @retval None
1277:Core/Src/stm32f4xx_flash.c ****   */
1278:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_BootConfig(uint8_t OB_BOOT)
1279:Core/Src/stm32f4xx_flash.c **** {
 439              		.loc 1 1279 1 is_stmt 1 view -0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
1280:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1281:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOOT(OB_BOOT));
 444              		.loc 1 1281 3 view .LVU79
1282:Core/Src/stm32f4xx_flash.c ****  
1283:Core/Src/stm32f4xx_flash.c ****   /* Set Dual Bank Boot */
1284:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 445              		.loc 1 1284 3 view .LVU80
ARM GAS  /tmp/cczwBOZG.s 			page 31


 446              		.loc 1 1284 40 is_stmt 0 view .LVU81
 447 0000 044B     		ldr	r3, .L44
 448 0002 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 449 0004 01F0EF01 		and	r1, r1, #239
 450 0008 1970     		strb	r1, [r3]
1285:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 451              		.loc 1 1285 3 is_stmt 1 view .LVU82
 452              		.loc 1 1285 40 is_stmt 0 view .LVU83
 453 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 454 000c 0243     		orrs	r2, r2, r0
 455 000e 1A70     		strb	r2, [r3]
1286:Core/Src/stm32f4xx_flash.c ****  
1287:Core/Src/stm32f4xx_flash.c **** }
 456              		.loc 1 1287 1 view .LVU84
 457 0010 7047     		bx	lr
 458              	.L45:
 459 0012 00BF     		.align	2
 460              	.L44:
 461 0014 143C0240 		.word	1073888276
 462              		.cfi_endproc
 463              	.LFE260:
 465              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 466              		.align	1
 467              		.global	FLASH_OB_BORConfig
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu fpv4-sp-d16
 473              	FLASH_OB_BORConfig:
 474              	.LVL9:
 475              	.LFB261:
1288:Core/Src/stm32f4xx_flash.c ****  
1289:Core/Src/stm32f4xx_flash.c **** /**
1290:Core/Src/stm32f4xx_flash.c ****   * @brief  Sets the BOR Level. 
1291:Core/Src/stm32f4xx_flash.c ****   * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
1292:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1293:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1294:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1295:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1296:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1297:Core/Src/stm32f4xx_flash.c ****   * @retval None
1298:Core/Src/stm32f4xx_flash.c ****   */
1299:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_BORConfig(uint8_t OB_BOR)
1300:Core/Src/stm32f4xx_flash.c **** {
 476              		.loc 1 1300 1 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480              		@ link register save eliminated.
1301:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1302:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOR(OB_BOR));
 481              		.loc 1 1302 3 view .LVU86
1303:Core/Src/stm32f4xx_flash.c ****  
1304:Core/Src/stm32f4xx_flash.c ****   /* Set the BOR Level */
1305:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 482              		.loc 1 1305 3 view .LVU87
 483              		.loc 1 1305 40 is_stmt 0 view .LVU88
ARM GAS  /tmp/cczwBOZG.s 			page 32


 484 0000 044B     		ldr	r3, .L47
 485 0002 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 486 0004 01F0F301 		and	r1, r1, #243
 487 0008 1970     		strb	r1, [r3]
1306:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 488              		.loc 1 1306 3 is_stmt 1 view .LVU89
 489              		.loc 1 1306 40 is_stmt 0 view .LVU90
 490 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 491 000c 0243     		orrs	r2, r2, r0
 492 000e 1A70     		strb	r2, [r3]
1307:Core/Src/stm32f4xx_flash.c ****  
1308:Core/Src/stm32f4xx_flash.c **** }
 493              		.loc 1 1308 1 view .LVU91
 494 0010 7047     		bx	lr
 495              	.L48:
 496 0012 00BF     		.align	2
 497              	.L47:
 498 0014 143C0240 		.word	1073888276
 499              		.cfi_endproc
 500              	.LFE261:
 502              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 503              		.align	1
 504              		.global	FLASH_OB_GetUser
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 508              		.fpu fpv4-sp-d16
 510              	FLASH_OB_GetUser:
 511              	.LFB263:
1309:Core/Src/stm32f4xx_flash.c ****  
1310:Core/Src/stm32f4xx_flash.c **** /**
1311:Core/Src/stm32f4xx_flash.c ****   * @brief  Launch the option byte loading.
1312:Core/Src/stm32f4xx_flash.c ****   * @param  None
1313:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
1314:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
1315:Core/Src/stm32f4xx_flash.c ****   */
1316:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_OB_Launch(void)
1317:Core/Src/stm32f4xx_flash.c **** {
1318:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
1319:Core/Src/stm32f4xx_flash.c ****  
1320:Core/Src/stm32f4xx_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
1321:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
1322:Core/Src/stm32f4xx_flash.c ****  
1323:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1324:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
1325:Core/Src/stm32f4xx_flash.c ****  
1326:Core/Src/stm32f4xx_flash.c ****   return status;
1327:Core/Src/stm32f4xx_flash.c **** }
1328:Core/Src/stm32f4xx_flash.c ****  
1329:Core/Src/stm32f4xx_flash.c **** /**
1330:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1331:Core/Src/stm32f4xx_flash.c ****   * @param  None
1332:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1333:Core/Src/stm32f4xx_flash.c ****   *         and RST_STDBY(Bit2).
1334:Core/Src/stm32f4xx_flash.c ****   */
1335:Core/Src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
1336:Core/Src/stm32f4xx_flash.c **** {
ARM GAS  /tmp/cczwBOZG.s 			page 33


 512              		.loc 1 1336 1 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
1337:Core/Src/stm32f4xx_flash.c ****   /* Return the User Option Byte */
1338:Core/Src/stm32f4xx_flash.c ****   return (uint8_t)(FLASH->OPTCR >> 5);
 517              		.loc 1 1338 3 view .LVU93
 518              		.loc 1 1338 25 is_stmt 0 view .LVU94
 519 0000 024B     		ldr	r3, .L50
 520 0002 5869     		ldr	r0, [r3, #20]
1339:Core/Src/stm32f4xx_flash.c **** }
 521              		.loc 1 1339 1 view .LVU95
 522 0004 C0F34710 		ubfx	r0, r0, #5, #8
 523 0008 7047     		bx	lr
 524              	.L51:
 525 000a 00BF     		.align	2
 526              	.L50:
 527 000c 003C0240 		.word	1073888256
 528              		.cfi_endproc
 529              	.LFE263:
 531              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 532              		.align	1
 533              		.global	FLASH_OB_GetWRP
 534              		.syntax unified
 535              		.thumb
 536              		.thumb_func
 537              		.fpu fpv4-sp-d16
 539              	FLASH_OB_GetWRP:
 540              	.LFB264:
1340:Core/Src/stm32f4xx_flash.c ****  
1341:Core/Src/stm32f4xx_flash.c **** /**
1342:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1343:Core/Src/stm32f4xx_flash.c ****   * @param  None
1344:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1345:Core/Src/stm32f4xx_flash.c ****   */
1346:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP(void)
1347:Core/Src/stm32f4xx_flash.c **** {
 541              		.loc 1 1347 1 is_stmt 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		@ link register save eliminated.
1348:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1349:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 546              		.loc 1 1349 3 view .LVU97
 547              		.loc 1 1349 11 is_stmt 0 view .LVU98
 548 0000 014B     		ldr	r3, .L53
 549 0002 1888     		ldrh	r0, [r3]
1350:Core/Src/stm32f4xx_flash.c **** }
 550              		.loc 1 1350 1 view .LVU99
 551 0004 80B2     		uxth	r0, r0
 552 0006 7047     		bx	lr
 553              	.L54:
 554              		.align	2
 555              	.L53:
 556 0008 163C0240 		.word	1073888278
ARM GAS  /tmp/cczwBOZG.s 			page 34


 557              		.cfi_endproc
 558              	.LFE264:
 560              		.section	.text.FLASH_OB_GetWRP1,"ax",%progbits
 561              		.align	1
 562              		.global	FLASH_OB_GetWRP1
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	FLASH_OB_GetWRP1:
 569              	.LFB265:
1351:Core/Src/stm32f4xx_flash.c ****  
1352:Core/Src/stm32f4xx_flash.c **** /**
1353:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1354:Core/Src/stm32f4xx_flash.c ****   *   
1355:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1356:Core/Src/stm32f4xx_flash.c ****   *   
1357:Core/Src/stm32f4xx_flash.c ****   * @param  None
1358:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1359:Core/Src/stm32f4xx_flash.c ****   */
1360:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP1(void)
1361:Core/Src/stm32f4xx_flash.c **** {
 570              		.loc 1 1361 1 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		@ link register save eliminated.
1362:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1363:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 575              		.loc 1 1363 3 view .LVU101
 576              		.loc 1 1363 11 is_stmt 0 view .LVU102
 577 0000 014B     		ldr	r3, .L56
 578 0002 1888     		ldrh	r0, [r3]
1364:Core/Src/stm32f4xx_flash.c **** }
 579              		.loc 1 1364 1 view .LVU103
 580 0004 80B2     		uxth	r0, r0
 581 0006 7047     		bx	lr
 582              	.L57:
 583              		.align	2
 584              	.L56:
 585 0008 1A3C0240 		.word	1073888282
 586              		.cfi_endproc
 587              	.LFE265:
 589              		.section	.text.FLASH_OB_GetPCROP,"ax",%progbits
 590              		.align	1
 591              		.global	FLASH_OB_GetPCROP
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu fpv4-sp-d16
 597              	FLASH_OB_GetPCROP:
 598              	.LFB266:
1365:Core/Src/stm32f4xx_flash.c ****  
1366:Core/Src/stm32f4xx_flash.c **** /**
1367:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1368:Core/Src/stm32f4xx_flash.c ****   *   
1369:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx/411xE devi
ARM GAS  /tmp/cczwBOZG.s 			page 35


1370:Core/Src/stm32f4xx_flash.c ****   *   
1371:Core/Src/stm32f4xx_flash.c ****   * @param  None
1372:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1373:Core/Src/stm32f4xx_flash.c ****   */
1374:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP(void)
1375:Core/Src/stm32f4xx_flash.c **** {
 599              		.loc 1 1375 1 is_stmt 1 view -0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              		@ link register save eliminated.
1376:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH PC Read/write protection Register value */
1377:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 604              		.loc 1 1377 3 view .LVU105
 605              		.loc 1 1377 11 is_stmt 0 view .LVU106
 606 0000 014B     		ldr	r3, .L59
 607 0002 1888     		ldrh	r0, [r3]
1378:Core/Src/stm32f4xx_flash.c **** }
 608              		.loc 1 1378 1 view .LVU107
 609 0004 80B2     		uxth	r0, r0
 610 0006 7047     		bx	lr
 611              	.L60:
 612              		.align	2
 613              	.L59:
 614 0008 163C0240 		.word	1073888278
 615              		.cfi_endproc
 616              	.LFE266:
 618              		.section	.text.FLASH_OB_GetPCROP1,"ax",%progbits
 619              		.align	1
 620              		.global	FLASH_OB_GetPCROP1
 621              		.syntax unified
 622              		.thumb
 623              		.thumb_func
 624              		.fpu fpv4-sp-d16
 626              	FLASH_OB_GetPCROP1:
 627              	.LFB267:
1379:Core/Src/stm32f4xx_flash.c ****  
1380:Core/Src/stm32f4xx_flash.c **** /**
1381:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1382:Core/Src/stm32f4xx_flash.c ****   *   
1383:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices. 
1384:Core/Src/stm32f4xx_flash.c ****   *     
1385:Core/Src/stm32f4xx_flash.c ****   * @param  None
1386:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1387:Core/Src/stm32f4xx_flash.c ****   */
1388:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP1(void)
1389:Core/Src/stm32f4xx_flash.c **** {
 628              		.loc 1 1389 1 is_stmt 1 view -0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		@ link register save eliminated.
1390:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1391:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 633              		.loc 1 1391 3 view .LVU109
 634              		.loc 1 1391 11 is_stmt 0 view .LVU110
 635 0000 014B     		ldr	r3, .L62
ARM GAS  /tmp/cczwBOZG.s 			page 36


 636 0002 1888     		ldrh	r0, [r3]
1392:Core/Src/stm32f4xx_flash.c **** }
 637              		.loc 1 1392 1 view .LVU111
 638 0004 80B2     		uxth	r0, r0
 639 0006 7047     		bx	lr
 640              	.L63:
 641              		.align	2
 642              	.L62:
 643 0008 1A3C0240 		.word	1073888282
 644              		.cfi_endproc
 645              	.LFE267:
 647              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 648              		.align	1
 649              		.global	FLASH_OB_GetRDP
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	FLASH_OB_GetRDP:
 656              	.LFB268:
1393:Core/Src/stm32f4xx_flash.c ****  
1394:Core/Src/stm32f4xx_flash.c **** /**
1395:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Read Protection level.
1396:Core/Src/stm32f4xx_flash.c ****   * @param  None
1397:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH ReadOut Protection Status:
1398:Core/Src/stm32f4xx_flash.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1399:Core/Src/stm32f4xx_flash.c ****   *           - RESET, when OB_RDP_Level_0 is set
1400:Core/Src/stm32f4xx_flash.c ****   */
1401:Core/Src/stm32f4xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1402:Core/Src/stm32f4xx_flash.c **** {
 657              		.loc 1 1402 1 is_stmt 1 view -0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              		@ link register save eliminated.
1403:Core/Src/stm32f4xx_flash.c ****   FlagStatus readstatus = RESET;
 662              		.loc 1 1403 3 view .LVU113
 663              	.LVL10:
1404:Core/Src/stm32f4xx_flash.c ****  
1405:Core/Src/stm32f4xx_flash.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 664              		.loc 1 1405 3 view .LVU114
 665              		.loc 1 1405 8 is_stmt 0 view .LVU115
 666 0000 044B     		ldr	r3, .L67
 667 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 668 0004 DBB2     		uxtb	r3, r3
 669              		.loc 1 1405 6 view .LVU116
 670 0006 AA2B     		cmp	r3, #170
 671 0008 01D0     		beq	.L66
1406:Core/Src/stm32f4xx_flash.c ****   {
1407:Core/Src/stm32f4xx_flash.c ****     readstatus = SET;
 672              		.loc 1 1407 16 view .LVU117
 673 000a 0120     		movs	r0, #1
 674 000c 7047     		bx	lr
 675              	.L66:
1408:Core/Src/stm32f4xx_flash.c ****   }
1409:Core/Src/stm32f4xx_flash.c ****   else
1410:Core/Src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/cczwBOZG.s 			page 37


1411:Core/Src/stm32f4xx_flash.c ****     readstatus = RESET;
 676              		.loc 1 1411 16 view .LVU118
 677 000e 0020     		movs	r0, #0
 678              	.LVL11:
1412:Core/Src/stm32f4xx_flash.c ****   }
1413:Core/Src/stm32f4xx_flash.c ****   return readstatus;
 679              		.loc 1 1413 3 is_stmt 1 view .LVU119
1414:Core/Src/stm32f4xx_flash.c **** }
 680              		.loc 1 1414 1 is_stmt 0 view .LVU120
 681 0010 7047     		bx	lr
 682              	.L68:
 683 0012 00BF     		.align	2
 684              	.L67:
 685 0014 153C0240 		.word	1073888277
 686              		.cfi_endproc
 687              	.LFE268:
 689              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 690              		.align	1
 691              		.global	FLASH_OB_GetBOR
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 695              		.fpu fpv4-sp-d16
 697              	FLASH_OB_GetBOR:
 698              	.LFB269:
1415:Core/Src/stm32f4xx_flash.c ****  
1416:Core/Src/stm32f4xx_flash.c **** /**
1417:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH BOR level.
1418:Core/Src/stm32f4xx_flash.c ****   * @param  None
1419:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH BOR level:
1420:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1421:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1422:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1423:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1424:Core/Src/stm32f4xx_flash.c ****   */
1425:Core/Src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetBOR(void)
1426:Core/Src/stm32f4xx_flash.c **** {
 699              		.loc 1 1426 1 is_stmt 1 view -0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              		@ link register save eliminated.
1427:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH BOR level */
1428:Core/Src/stm32f4xx_flash.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 704              		.loc 1 1428 3 view .LVU122
 705              		.loc 1 1428 10 is_stmt 0 view .LVU123
 706 0000 024B     		ldr	r3, .L70
 707 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
1429:Core/Src/stm32f4xx_flash.c **** }
 708              		.loc 1 1429 1 view .LVU124
 709 0004 00F00C00 		and	r0, r0, #12
 710 0008 7047     		bx	lr
 711              	.L71:
 712 000a 00BF     		.align	2
 713              	.L70:
 714 000c 143C0240 		.word	1073888276
 715              		.cfi_endproc
ARM GAS  /tmp/cczwBOZG.s 			page 38


 716              	.LFE269:
 718              		.section	.text.FLASH_ITConfig,"ax",%progbits
 719              		.align	1
 720              		.global	FLASH_ITConfig
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv4-sp-d16
 726              	FLASH_ITConfig:
 727              	.LVL12:
 728              	.LFB270:
1430:Core/Src/stm32f4xx_flash.c ****  
1431:Core/Src/stm32f4xx_flash.c **** /**
1432:Core/Src/stm32f4xx_flash.c ****   * @}
1433:Core/Src/stm32f4xx_flash.c ****   */
1434:Core/Src/stm32f4xx_flash.c ****  
1435:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1436:Core/Src/stm32f4xx_flash.c ****  *  @brief   Interrupts and flags management functions
1437:Core/Src/stm32f4xx_flash.c ****  *
1438:Core/Src/stm32f4xx_flash.c **** @verbatim   
1439:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
1440:Core/Src/stm32f4xx_flash.c ****               ##### Interrupts and flags management functions #####
1441:Core/Src/stm32f4xx_flash.c ****  ===============================================================================  
1442:Core/Src/stm32f4xx_flash.c **** @endverbatim
1443:Core/Src/stm32f4xx_flash.c ****   * @{
1444:Core/Src/stm32f4xx_flash.c ****   */
1445:Core/Src/stm32f4xx_flash.c ****  
1446:Core/Src/stm32f4xx_flash.c **** /**
1447:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1448:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1449:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1450:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_ERR: FLASH Error Interrupt
1451:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1452:Core/Src/stm32f4xx_flash.c ****   * @retval None 
1453:Core/Src/stm32f4xx_flash.c ****   */
1454:Core/Src/stm32f4xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1455:Core/Src/stm32f4xx_flash.c **** {
 729              		.loc 1 1455 1 is_stmt 1 view -0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
1456:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1457:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
 734              		.loc 1 1457 3 view .LVU126
1458:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 735              		.loc 1 1458 3 view .LVU127
1459:Core/Src/stm32f4xx_flash.c ****  
1460:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 736              		.loc 1 1460 3 view .LVU128
 737              		.loc 1 1460 5 is_stmt 0 view .LVU129
 738 0000 21B1     		cbz	r1, .L73
1461:Core/Src/stm32f4xx_flash.c ****   {
1462:Core/Src/stm32f4xx_flash.c ****     /* Enable the interrupt sources */
1463:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_IT;
 739              		.loc 1 1463 5 is_stmt 1 view .LVU130
 740              		.loc 1 1463 15 is_stmt 0 view .LVU131
ARM GAS  /tmp/cczwBOZG.s 			page 39


 741 0002 054A     		ldr	r2, .L75
 742 0004 1369     		ldr	r3, [r2, #16]
 743 0006 1843     		orrs	r0, r0, r3
 744              	.LVL13:
 745              		.loc 1 1463 15 view .LVU132
 746 0008 1061     		str	r0, [r2, #16]
 747 000a 7047     		bx	lr
 748              	.LVL14:
 749              	.L73:
1464:Core/Src/stm32f4xx_flash.c ****   }
1465:Core/Src/stm32f4xx_flash.c ****   else
1466:Core/Src/stm32f4xx_flash.c ****   {
1467:Core/Src/stm32f4xx_flash.c ****     /* Disable the interrupt sources */
1468:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
 750              		.loc 1 1468 5 is_stmt 1 view .LVU133
 751              		.loc 1 1468 15 is_stmt 0 view .LVU134
 752 000c 024A     		ldr	r2, .L75
 753 000e 1369     		ldr	r3, [r2, #16]
 754 0010 23EA0000 		bic	r0, r3, r0
 755              	.LVL15:
 756              		.loc 1 1468 15 view .LVU135
 757 0014 1061     		str	r0, [r2, #16]
1469:Core/Src/stm32f4xx_flash.c ****   }
1470:Core/Src/stm32f4xx_flash.c **** }
 758              		.loc 1 1470 1 view .LVU136
 759 0016 7047     		bx	lr
 760              	.L76:
 761              		.align	2
 762              	.L75:
 763 0018 003C0240 		.word	1073888256
 764              		.cfi_endproc
 765              	.LFE270:
 767              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 768              		.align	1
 769              		.global	FLASH_GetFlagStatus
 770              		.syntax unified
 771              		.thumb
 772              		.thumb_func
 773              		.fpu fpv4-sp-d16
 775              	FLASH_GetFlagStatus:
 776              	.LVL16:
 777              	.LFB271:
1471:Core/Src/stm32f4xx_flash.c ****  
1472:Core/Src/stm32f4xx_flash.c **** /**
1473:Core/Src/stm32f4xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1474:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1475:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1476:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1477:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1478:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1479:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
1480:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1481:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1482:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42xx/43xxx an
1483:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_BSY: FLASH Busy flag
1484:Core/Src/stm32f4xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1485:Core/Src/stm32f4xx_flash.c ****   */
ARM GAS  /tmp/cczwBOZG.s 			page 40


1486:Core/Src/stm32f4xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1487:Core/Src/stm32f4xx_flash.c **** {
 778              		.loc 1 1487 1 is_stmt 1 view -0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
1488:Core/Src/stm32f4xx_flash.c ****   FlagStatus bitstatus = RESET;
 783              		.loc 1 1488 3 view .LVU138
1489:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1490:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
 784              		.loc 1 1490 3 view .LVU139
1491:Core/Src/stm32f4xx_flash.c ****  
1492:Core/Src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 785              		.loc 1 1492 3 view .LVU140
 786              		.loc 1 1492 12 is_stmt 0 view .LVU141
 787 0000 034B     		ldr	r3, .L80
 788 0002 DB68     		ldr	r3, [r3, #12]
 789              		.loc 1 1492 5 view .LVU142
 790 0004 0342     		tst	r3, r0
 791 0006 01D0     		beq	.L79
1493:Core/Src/stm32f4xx_flash.c ****   {
1494:Core/Src/stm32f4xx_flash.c ****     bitstatus = SET;
 792              		.loc 1 1494 15 view .LVU143
 793 0008 0120     		movs	r0, #1
 794              	.LVL17:
 795              		.loc 1 1494 15 view .LVU144
 796 000a 7047     		bx	lr
 797              	.LVL18:
 798              	.L79:
1495:Core/Src/stm32f4xx_flash.c ****   }
1496:Core/Src/stm32f4xx_flash.c ****   else
1497:Core/Src/stm32f4xx_flash.c ****   {
1498:Core/Src/stm32f4xx_flash.c ****     bitstatus = RESET;
 799              		.loc 1 1498 15 view .LVU145
 800 000c 0020     		movs	r0, #0
 801              	.LVL19:
1499:Core/Src/stm32f4xx_flash.c ****   }
1500:Core/Src/stm32f4xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1501:Core/Src/stm32f4xx_flash.c ****   return bitstatus; 
 802              		.loc 1 1501 3 is_stmt 1 view .LVU146
1502:Core/Src/stm32f4xx_flash.c **** }
 803              		.loc 1 1502 1 is_stmt 0 view .LVU147
 804 000e 7047     		bx	lr
 805              	.L81:
 806              		.align	2
 807              	.L80:
 808 0010 003C0240 		.word	1073888256
 809              		.cfi_endproc
 810              	.LFE271:
 812              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 813              		.align	1
 814              		.global	FLASH_ClearFlag
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 818              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cczwBOZG.s 			page 41


 820              	FLASH_ClearFlag:
 821              	.LVL20:
 822              	.LFB272:
1503:Core/Src/stm32f4xx_flash.c ****  
1504:Core/Src/stm32f4xx_flash.c **** /**
1505:Core/Src/stm32f4xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1506:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1507:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1508:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1509:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1510:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1511:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
1512:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1513:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1514:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F
1515:Core/Src/stm32f4xx_flash.c ****   * @retval None
1516:Core/Src/stm32f4xx_flash.c ****   */
1517:Core/Src/stm32f4xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1518:Core/Src/stm32f4xx_flash.c **** {
 823              		.loc 1 1518 1 is_stmt 1 view -0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              		@ link register save eliminated.
1519:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1520:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
 828              		.loc 1 1520 3 view .LVU149
1521:Core/Src/stm32f4xx_flash.c ****   
1522:Core/Src/stm32f4xx_flash.c ****   /* Clear the flags */
1523:Core/Src/stm32f4xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 829              		.loc 1 1523 3 view .LVU150
 830              		.loc 1 1523 13 is_stmt 0 view .LVU151
 831 0000 014B     		ldr	r3, .L83
 832 0002 D860     		str	r0, [r3, #12]
1524:Core/Src/stm32f4xx_flash.c **** }
 833              		.loc 1 1524 1 view .LVU152
 834 0004 7047     		bx	lr
 835              	.L84:
 836 0006 00BF     		.align	2
 837              	.L83:
 838 0008 003C0240 		.word	1073888256
 839              		.cfi_endproc
 840              	.LFE272:
 842              		.section	.text.FLASH_GetStatus,"ax",%progbits
 843              		.align	1
 844              		.global	FLASH_GetStatus
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu fpv4-sp-d16
 850              	FLASH_GetStatus:
 851              	.LFB273:
1525:Core/Src/stm32f4xx_flash.c ****  
1526:Core/Src/stm32f4xx_flash.c **** /**
1527:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Status.
1528:Core/Src/stm32f4xx_flash.c ****   * @param  None
1529:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
ARM GAS  /tmp/cczwBOZG.s 			page 42


1530:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLE
1531:Core/Src/stm32f4xx_flash.c ****   */
1532:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1533:Core/Src/stm32f4xx_flash.c **** {
 852              		.loc 1 1533 1 is_stmt 1 view -0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              		@ link register save eliminated.
1534:Core/Src/stm32f4xx_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE2;
 857              		.loc 1 1534 3 view .LVU154
 858              	.LVL21:
1535:Core/Src/stm32f4xx_flash.c ****   
1536:Core/Src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 859              		.loc 1 1536 3 view .LVU155
 860              		.loc 1 1536 12 is_stmt 0 view .LVU156
 861 0000 124B     		ldr	r3, .L92
 862 0002 DB68     		ldr	r3, [r3, #12]
 863              		.loc 1 1536 5 view .LVU157
 864 0004 13F4803F 		tst	r3, #65536
 865 0008 15D1     		bne	.L87
1537:Core/Src/stm32f4xx_flash.c ****   {
1538:Core/Src/stm32f4xx_flash.c ****     flashstatus = FLASH_BUSY2;
1539:Core/Src/stm32f4xx_flash.c ****   }
1540:Core/Src/stm32f4xx_flash.c ****   else 
1541:Core/Src/stm32f4xx_flash.c ****   {  
1542:Core/Src/stm32f4xx_flash.c ****     if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 866              		.loc 1 1542 5 is_stmt 1 view .LVU158
 867              		.loc 1 1542 14 is_stmt 0 view .LVU159
 868 000a 104B     		ldr	r3, .L92
 869 000c DB68     		ldr	r3, [r3, #12]
 870              		.loc 1 1542 7 view .LVU160
 871 000e 13F0100F 		tst	r3, #16
 872 0012 12D1     		bne	.L88
1543:Core/Src/stm32f4xx_flash.c ****     { 
1544:Core/Src/stm32f4xx_flash.c ****       flashstatus = FLASH_ERROR_WRP2;
1545:Core/Src/stm32f4xx_flash.c ****     }
1546:Core/Src/stm32f4xx_flash.c ****     else
1547:Core/Src/stm32f4xx_flash.c ****     {
1548:Core/Src/stm32f4xx_flash.c ****       if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 873              		.loc 1 1548 7 is_stmt 1 view .LVU161
 874              		.loc 1 1548 16 is_stmt 0 view .LVU162
 875 0014 0D4B     		ldr	r3, .L92
 876 0016 DB68     		ldr	r3, [r3, #12]
 877              		.loc 1 1548 9 view .LVU163
 878 0018 13F4807F 		tst	r3, #256
 879 001c 0FD1     		bne	.L89
1549:Core/Src/stm32f4xx_flash.c ****       { 
1550:Core/Src/stm32f4xx_flash.c ****         flashstatus = FLASH_ERROR_RD2;
1551:Core/Src/stm32f4xx_flash.c ****       } 
1552:Core/Src/stm32f4xx_flash.c ****       else 
1553:Core/Src/stm32f4xx_flash.c ****       {
1554:Core/Src/stm32f4xx_flash.c ****         if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 880              		.loc 1 1554 9 is_stmt 1 view .LVU164
 881              		.loc 1 1554 18 is_stmt 0 view .LVU165
 882 001e 0B4B     		ldr	r3, .L92
 883 0020 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/cczwBOZG.s 			page 43


 884              		.loc 1 1554 11 view .LVU166
 885 0022 13F0E00F 		tst	r3, #224
 886 0026 0CD1     		bne	.L90
1555:Core/Src/stm32f4xx_flash.c ****         {
1556:Core/Src/stm32f4xx_flash.c ****           flashstatus = FLASH_ERROR_PROGRAM2; 
1557:Core/Src/stm32f4xx_flash.c ****         }
1558:Core/Src/stm32f4xx_flash.c ****         else
1559:Core/Src/stm32f4xx_flash.c ****         {
1560:Core/Src/stm32f4xx_flash.c ****           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 887              		.loc 1 1560 11 is_stmt 1 view .LVU167
 888              		.loc 1 1560 20 is_stmt 0 view .LVU168
 889 0028 084B     		ldr	r3, .L92
 890 002a DB68     		ldr	r3, [r3, #12]
 891              		.loc 1 1560 13 view .LVU169
 892 002c 13F0020F 		tst	r3, #2
 893 0030 09D0     		beq	.L91
1561:Core/Src/stm32f4xx_flash.c ****           {
1562:Core/Src/stm32f4xx_flash.c ****             flashstatus = FLASH_ERROR_OPERATION2;
 894              		.loc 1 1562 25 view .LVU170
 895 0032 0820     		movs	r0, #8
 896 0034 7047     		bx	lr
 897              	.L87:
1538:Core/Src/stm32f4xx_flash.c ****   }
 898              		.loc 1 1538 17 view .LVU171
 899 0036 0120     		movs	r0, #1
 900 0038 7047     		bx	lr
 901              	.L88:
1544:Core/Src/stm32f4xx_flash.c ****     }
 902              		.loc 1 1544 19 view .LVU172
 903 003a 0620     		movs	r0, #6
 904 003c 7047     		bx	lr
 905              	.L89:
1550:Core/Src/stm32f4xx_flash.c ****       } 
 906              		.loc 1 1550 21 view .LVU173
 907 003e 0220     		movs	r0, #2
 908 0040 7047     		bx	lr
 909              	.L90:
1556:Core/Src/stm32f4xx_flash.c ****         }
 910              		.loc 1 1556 23 view .LVU174
 911 0042 0720     		movs	r0, #7
 912 0044 7047     		bx	lr
 913              	.L91:
1563:Core/Src/stm32f4xx_flash.c ****           }
1564:Core/Src/stm32f4xx_flash.c ****           else
1565:Core/Src/stm32f4xx_flash.c ****           {
1566:Core/Src/stm32f4xx_flash.c ****             flashstatus = FLASH_COMPLETE2;
 914              		.loc 1 1566 25 view .LVU175
 915 0046 0920     		movs	r0, #9
 916              	.LVL22:
1567:Core/Src/stm32f4xx_flash.c ****           }
1568:Core/Src/stm32f4xx_flash.c ****         }
1569:Core/Src/stm32f4xx_flash.c ****       }
1570:Core/Src/stm32f4xx_flash.c ****     }
1571:Core/Src/stm32f4xx_flash.c ****   }
1572:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH Status */
1573:Core/Src/stm32f4xx_flash.c ****   return flashstatus;
 917              		.loc 1 1573 3 is_stmt 1 view .LVU176
ARM GAS  /tmp/cczwBOZG.s 			page 44


1574:Core/Src/stm32f4xx_flash.c **** }
 918              		.loc 1 1574 1 is_stmt 0 view .LVU177
 919 0048 7047     		bx	lr
 920              	.L93:
 921 004a 00BF     		.align	2
 922              	.L92:
 923 004c 003C0240 		.word	1073888256
 924              		.cfi_endproc
 925              	.LFE273:
 927              		.section	.text.FLASH_WaitForLastOperation2,"ax",%progbits
 928              		.align	1
 929              		.global	FLASH_WaitForLastOperation2
 930              		.syntax unified
 931              		.thumb
 932              		.thumb_func
 933              		.fpu fpv4-sp-d16
 935              	FLASH_WaitForLastOperation2:
 936              	.LFB274:
1575:Core/Src/stm32f4xx_flash.c ****  
1576:Core/Src/stm32f4xx_flash.c **** /**
1577:Core/Src/stm32f4xx_flash.c ****   * @brief  Waits for a FLASH operation to complete.
1578:Core/Src/stm32f4xx_flash.c ****   * @param  None
1579:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
1580:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
1581:Core/Src/stm32f4xx_flash.c ****   */
1582:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation2(void)
1583:Core/Src/stm32f4xx_flash.c **** { 
 937              		.loc 1 1583 1 is_stmt 1 view -0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 8
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 941 0000 00B5     		push	{lr}
 942              	.LCFI0:
 943              		.cfi_def_cfa_offset 4
 944              		.cfi_offset 14, -4
 945 0002 83B0     		sub	sp, sp, #12
 946              	.LCFI1:
 947              		.cfi_def_cfa_offset 16
1584:Core/Src/stm32f4xx_flash.c ****   __IO FLASH_Status status = FLASH_COMPLETE2;
 948              		.loc 1 1584 3 view .LVU179
 949              		.loc 1 1584 21 is_stmt 0 view .LVU180
 950 0004 0923     		movs	r3, #9
 951 0006 8DF80730 		strb	r3, [sp, #7]
1585:Core/Src/stm32f4xx_flash.c ****    
1586:Core/Src/stm32f4xx_flash.c ****   /* Check for the FLASH Status */
1587:Core/Src/stm32f4xx_flash.c ****   status = FLASH_GetStatus();
 952              		.loc 1 1587 3 is_stmt 1 view .LVU181
 953              		.loc 1 1587 12 is_stmt 0 view .LVU182
 954 000a FFF7FEFF 		bl	FLASH_GetStatus
 955              	.LVL23:
 956              		.loc 1 1587 10 view .LVU183
 957 000e 8DF80700 		strb	r0, [sp, #7]
1588:Core/Src/stm32f4xx_flash.c ****  
1589:Core/Src/stm32f4xx_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
1590:Core/Src/stm32f4xx_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
1591:Core/Src/stm32f4xx_flash.c ****      flag will be set */
1592:Core/Src/stm32f4xx_flash.c ****   while(status == FLASH_BUSY2)
ARM GAS  /tmp/cczwBOZG.s 			page 45


 958              		.loc 1 1592 3 is_stmt 1 view .LVU184
 959              	.L95:
 960              		.loc 1 1592 8 view .LVU185
 961              		.loc 1 1592 16 is_stmt 0 view .LVU186
 962 0012 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 963 0016 DBB2     		uxtb	r3, r3
 964              		.loc 1 1592 8 view .LVU187
 965 0018 012B     		cmp	r3, #1
 966 001a 04D1     		bne	.L98
1593:Core/Src/stm32f4xx_flash.c ****   {
1594:Core/Src/stm32f4xx_flash.c ****     status = FLASH_GetStatus();
 967              		.loc 1 1594 5 is_stmt 1 view .LVU188
 968              		.loc 1 1594 14 is_stmt 0 view .LVU189
 969 001c FFF7FEFF 		bl	FLASH_GetStatus
 970              	.LVL24:
 971              		.loc 1 1594 12 view .LVU190
 972 0020 8DF80700 		strb	r0, [sp, #7]
 973 0024 F5E7     		b	.L95
 974              	.L98:
1595:Core/Src/stm32f4xx_flash.c ****   }
1596:Core/Src/stm32f4xx_flash.c ****   /* Return the operation status */
1597:Core/Src/stm32f4xx_flash.c ****   return status;
 975              		.loc 1 1597 3 is_stmt 1 view .LVU191
 976              		.loc 1 1597 10 is_stmt 0 view .LVU192
 977 0026 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
1598:Core/Src/stm32f4xx_flash.c **** }
 978              		.loc 1 1598 1 view .LVU193
 979 002a 03B0     		add	sp, sp, #12
 980              	.LCFI2:
 981              		.cfi_def_cfa_offset 4
 982              		@ sp needed
 983 002c 5DF804FB 		ldr	pc, [sp], #4
 984              		.cfi_endproc
 985              	.LFE274:
 987              		.section	.text.FLASH_EraseSector,"ax",%progbits
 988              		.align	1
 989              		.global	FLASH_EraseSector
 990              		.syntax unified
 991              		.thumb
 992              		.thumb_func
 993              		.fpu fpv4-sp-d16
 995              	FLASH_EraseSector:
 996              	.LVL25:
 997              	.LFB243:
 473:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 998              		.loc 1 473 1 is_stmt 1 view -0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 473:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1002              		.loc 1 473 1 is_stmt 0 view .LVU195
 1003 0000 70B5     		push	{r4, r5, r6, lr}
 1004              	.LCFI3:
 1005              		.cfi_def_cfa_offset 16
 1006              		.cfi_offset 4, -16
 1007              		.cfi_offset 5, -12
 1008              		.cfi_offset 6, -8
ARM GAS  /tmp/cczwBOZG.s 			page 46


 1009              		.cfi_offset 14, -4
 1010 0002 0446     		mov	r4, r0
 474:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1011              		.loc 1 474 3 is_stmt 1 view .LVU196
 1012              	.LVL26:
 475:Core/Src/stm32f4xx_flash.c ****  
 1013              		.loc 1 475 3 view .LVU197
 478:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1014              		.loc 1 478 3 view .LVU198
 479:Core/Src/stm32f4xx_flash.c ****   
 1015              		.loc 1 479 3 view .LVU199
 481:Core/Src/stm32f4xx_flash.c ****   {
 1016              		.loc 1 481 3 view .LVU200
 481:Core/Src/stm32f4xx_flash.c ****   {
 1017              		.loc 1 481 5 is_stmt 0 view .LVU201
 1018 0004 49B1     		cbz	r1, .L102
 485:Core/Src/stm32f4xx_flash.c ****   {
 1019              		.loc 1 485 8 is_stmt 1 view .LVU202
 485:Core/Src/stm32f4xx_flash.c ****   {
 1020              		.loc 1 485 10 is_stmt 0 view .LVU203
 1021 0006 0129     		cmp	r1, #1
 1022 0008 0DD0     		beq	.L103
 489:Core/Src/stm32f4xx_flash.c ****   {
 1023              		.loc 1 489 8 is_stmt 1 view .LVU204
 489:Core/Src/stm32f4xx_flash.c ****   {
 1024              		.loc 1 489 10 is_stmt 0 view .LVU205
 1025 000a 0229     		cmp	r1, #2
 1026 000c 02D0     		beq	.L106
 495:Core/Src/stm32f4xx_flash.c ****   }
 1027              		.loc 1 495 15 view .LVU206
 1028 000e 4FF44076 		mov	r6, #768
 1029 0012 03E0     		b	.L100
 1030              	.L106:
 491:Core/Src/stm32f4xx_flash.c ****   }
 1031              		.loc 1 491 15 view .LVU207
 1032 0014 4FF40076 		mov	r6, #512
 1033 0018 00E0     		b	.L100
 1034              	.L102:
 483:Core/Src/stm32f4xx_flash.c ****   }
 1035              		.loc 1 483 16 view .LVU208
 1036 001a 0026     		movs	r6, #0
 1037              	.L100:
 1038              	.LVL27:
 498:Core/Src/stm32f4xx_flash.c ****   
 1039              		.loc 1 498 3 is_stmt 1 view .LVU209
 498:Core/Src/stm32f4xx_flash.c ****   
 1040              		.loc 1 498 12 is_stmt 0 view .LVU210
 1041 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1042              	.LVL28:
 500:Core/Src/stm32f4xx_flash.c ****   { 
 1043              		.loc 1 500 3 is_stmt 1 view .LVU211
 500:Core/Src/stm32f4xx_flash.c ****   { 
 1044              		.loc 1 500 5 is_stmt 0 view .LVU212
 1045 0020 0928     		cmp	r0, #9
 1046 0022 03D0     		beq	.L107
 1047              	.LVL29:
 1048              	.L101:
ARM GAS  /tmp/cczwBOZG.s 			page 47


 517:Core/Src/stm32f4xx_flash.c **** }
 1049              		.loc 1 517 3 is_stmt 1 view .LVU213
 518:Core/Src/stm32f4xx_flash.c ****  
 1050              		.loc 1 518 1 is_stmt 0 view .LVU214
 1051 0024 70BD     		pop	{r4, r5, r6, pc}
 1052              	.LVL30:
 1053              	.L103:
 487:Core/Src/stm32f4xx_flash.c ****   }
 1054              		.loc 1 487 15 view .LVU215
 1055 0026 4FF48076 		mov	r6, #256
 1056 002a F7E7     		b	.L100
 1057              	.LVL31:
 1058              	.L107:
 503:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 1059              		.loc 1 503 5 is_stmt 1 view .LVU216
 503:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 1060              		.loc 1 503 15 is_stmt 0 view .LVU217
 1061 002c 0F4D     		ldr	r5, .L108
 1062 002e 2B69     		ldr	r3, [r5, #16]
 1063 0030 23F44073 		bic	r3, r3, #768
 1064 0034 2B61     		str	r3, [r5, #16]
 504:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 1065              		.loc 1 504 5 is_stmt 1 view .LVU218
 504:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 1066              		.loc 1 504 15 is_stmt 0 view .LVU219
 1067 0036 2B69     		ldr	r3, [r5, #16]
 1068 0038 1E43     		orrs	r6, r6, r3
 1069              	.LVL32:
 504:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 1070              		.loc 1 504 15 view .LVU220
 1071 003a 2E61     		str	r6, [r5, #16]
 505:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 1072              		.loc 1 505 5 is_stmt 1 view .LVU221
 505:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 1073              		.loc 1 505 15 is_stmt 0 view .LVU222
 1074 003c 2B69     		ldr	r3, [r5, #16]
 1075 003e 23F0F803 		bic	r3, r3, #248
 1076 0042 2B61     		str	r3, [r5, #16]
 506:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1077              		.loc 1 506 5 is_stmt 1 view .LVU223
 506:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1078              		.loc 1 506 15 is_stmt 0 view .LVU224
 1079 0044 2869     		ldr	r0, [r5, #16]
 1080              	.LVL33:
 506:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1081              		.loc 1 506 15 view .LVU225
 1082 0046 2043     		orrs	r0, r0, r4
 1083 0048 40F00200 		orr	r0, r0, #2
 1084 004c 2861     		str	r0, [r5, #16]
 507:Core/Src/stm32f4xx_flash.c ****     
 1085              		.loc 1 507 5 is_stmt 1 view .LVU226
 507:Core/Src/stm32f4xx_flash.c ****     
 1086              		.loc 1 507 15 is_stmt 0 view .LVU227
 1087 004e 2B69     		ldr	r3, [r5, #16]
 1088 0050 43F48033 		orr	r3, r3, #65536
 1089 0054 2B61     		str	r3, [r5, #16]
 510:Core/Src/stm32f4xx_flash.c ****     
ARM GAS  /tmp/cczwBOZG.s 			page 48


 1090              		.loc 1 510 5 is_stmt 1 view .LVU228
 510:Core/Src/stm32f4xx_flash.c ****     
 1091              		.loc 1 510 14 is_stmt 0 view .LVU229
 1092 0056 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1093              	.LVL34:
 513:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 1094              		.loc 1 513 5 is_stmt 1 view .LVU230
 513:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 1095              		.loc 1 513 15 is_stmt 0 view .LVU231
 1096 005a 2B69     		ldr	r3, [r5, #16]
 1097 005c 23F00203 		bic	r3, r3, #2
 1098 0060 2B61     		str	r3, [r5, #16]
 514:Core/Src/stm32f4xx_flash.c ****   }
 1099              		.loc 1 514 5 is_stmt 1 view .LVU232
 514:Core/Src/stm32f4xx_flash.c ****   }
 1100              		.loc 1 514 15 is_stmt 0 view .LVU233
 1101 0062 2B69     		ldr	r3, [r5, #16]
 1102 0064 23F0F803 		bic	r3, r3, #248
 1103 0068 2B61     		str	r3, [r5, #16]
 1104 006a DBE7     		b	.L101
 1105              	.L109:
 1106              		.align	2
 1107              	.L108:
 1108 006c 003C0240 		.word	1073888256
 1109              		.cfi_endproc
 1110              	.LFE243:
 1112              		.section	.text.FLASH_EraseAllSectors,"ax",%progbits
 1113              		.align	1
 1114              		.global	FLASH_EraseAllSectors
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv4-sp-d16
 1120              	FLASH_EraseAllSectors:
 1121              	.LVL35:
 1122              	.LFB244:
 541:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1123              		.loc 1 541 1 is_stmt 1 view -0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 541:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1127              		.loc 1 541 1 is_stmt 0 view .LVU235
 1128 0000 10B5     		push	{r4, lr}
 1129              	.LCFI4:
 1130              		.cfi_def_cfa_offset 8
 1131              		.cfi_offset 4, -8
 1132              		.cfi_offset 14, -4
 1133 0002 0446     		mov	r4, r0
 542:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1134              		.loc 1 542 3 is_stmt 1 view .LVU236
 1135              	.LVL36:
 543:Core/Src/stm32f4xx_flash.c ****   
 1136              		.loc 1 543 3 view .LVU237
 546:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1137              		.loc 1 546 3 view .LVU238
 546:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
ARM GAS  /tmp/cczwBOZG.s 			page 49


 1138              		.loc 1 546 12 is_stmt 0 view .LVU239
 1139 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1140              	.LVL37:
 547:Core/Src/stm32f4xx_flash.c ****   
 1141              		.loc 1 547 3 is_stmt 1 view .LVU240
 549:Core/Src/stm32f4xx_flash.c ****   {
 1142              		.loc 1 549 3 view .LVU241
 549:Core/Src/stm32f4xx_flash.c ****   {
 1143              		.loc 1 549 5 is_stmt 0 view .LVU242
 1144 0008 4CB1     		cbz	r4, .L113
 553:Core/Src/stm32f4xx_flash.c ****   {
 1145              		.loc 1 553 8 is_stmt 1 view .LVU243
 553:Core/Src/stm32f4xx_flash.c ****   {
 1146              		.loc 1 553 10 is_stmt 0 view .LVU244
 1147 000a 012C     		cmp	r4, #1
 1148 000c 0BD0     		beq	.L114
 557:Core/Src/stm32f4xx_flash.c ****   {
 1149              		.loc 1 557 8 is_stmt 1 view .LVU245
 557:Core/Src/stm32f4xx_flash.c ****   {
 1150              		.loc 1 557 10 is_stmt 0 view .LVU246
 1151 000e 022C     		cmp	r4, #2
 1152 0010 02D0     		beq	.L117
 563:Core/Src/stm32f4xx_flash.c ****   }  
 1153              		.loc 1 563 15 view .LVU247
 1154 0012 4FF44073 		mov	r3, #768
 1155 0016 03E0     		b	.L111
 1156              	.L117:
 559:Core/Src/stm32f4xx_flash.c ****   }
 1157              		.loc 1 559 15 view .LVU248
 1158 0018 4FF40073 		mov	r3, #512
 1159 001c 00E0     		b	.L111
 1160              	.L113:
 551:Core/Src/stm32f4xx_flash.c ****   }
 1161              		.loc 1 551 16 view .LVU249
 1162 001e 0023     		movs	r3, #0
 1163              	.L111:
 1164              	.LVL38:
 565:Core/Src/stm32f4xx_flash.c ****   {
 1165              		.loc 1 565 3 is_stmt 1 view .LVU250
 565:Core/Src/stm32f4xx_flash.c ****   {
 1166              		.loc 1 565 5 is_stmt 0 view .LVU251
 1167 0020 0928     		cmp	r0, #9
 1168 0022 03D0     		beq	.L118
 1169              	.LVL39:
 1170              	.L112:
 596:Core/Src/stm32f4xx_flash.c **** }
 1171              		.loc 1 596 3 is_stmt 1 view .LVU252
 597:Core/Src/stm32f4xx_flash.c ****  
 1172              		.loc 1 597 1 is_stmt 0 view .LVU253
 1173 0024 10BD     		pop	{r4, pc}
 1174              	.LVL40:
 1175              	.L114:
 555:Core/Src/stm32f4xx_flash.c ****   }
 1176              		.loc 1 555 15 view .LVU254
 1177 0026 4FF48073 		mov	r3, #256
 1178 002a F9E7     		b	.L111
 1179              	.LVL41:
ARM GAS  /tmp/cczwBOZG.s 			page 50


 1180              	.L118:
 582:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 1181              		.loc 1 582 5 is_stmt 1 view .LVU255
 582:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 1182              		.loc 1 582 15 is_stmt 0 view .LVU256
 1183 002c 0B4C     		ldr	r4, .L119
 1184 002e 2269     		ldr	r2, [r4, #16]
 1185 0030 22F44072 		bic	r2, r2, #768
 1186 0034 2261     		str	r2, [r4, #16]
 583:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 1187              		.loc 1 583 5 is_stmt 1 view .LVU257
 583:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 1188              		.loc 1 583 15 is_stmt 0 view .LVU258
 1189 0036 2269     		ldr	r2, [r4, #16]
 1190 0038 1343     		orrs	r3, r3, r2
 1191              	.LVL42:
 583:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 1192              		.loc 1 583 15 view .LVU259
 1193 003a 2361     		str	r3, [r4, #16]
 584:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1194              		.loc 1 584 5 is_stmt 1 view .LVU260
 584:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 1195              		.loc 1 584 15 is_stmt 0 view .LVU261
 1196 003c 2369     		ldr	r3, [r4, #16]
 1197 003e 43F00403 		orr	r3, r3, #4
 1198 0042 2361     		str	r3, [r4, #16]
 585:Core/Src/stm32f4xx_flash.c ****     
 1199              		.loc 1 585 5 is_stmt 1 view .LVU262
 585:Core/Src/stm32f4xx_flash.c ****     
 1200              		.loc 1 585 15 is_stmt 0 view .LVU263
 1201 0044 2369     		ldr	r3, [r4, #16]
 1202 0046 43F48033 		orr	r3, r3, #65536
 1203 004a 2361     		str	r3, [r4, #16]
 588:Core/Src/stm32f4xx_flash.c ****  
 1204              		.loc 1 588 5 is_stmt 1 view .LVU264
 588:Core/Src/stm32f4xx_flash.c ****  
 1205              		.loc 1 588 14 is_stmt 0 view .LVU265
 1206 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1207              	.LVL43:
 591:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F446xx
 1208              		.loc 1 591 5 is_stmt 1 view .LVU266
 591:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F446xx
 1209              		.loc 1 591 15 is_stmt 0 view .LVU267
 1210 0050 2369     		ldr	r3, [r4, #16]
 1211 0052 23F00403 		bic	r3, r3, #4
 1212 0056 2361     		str	r3, [r4, #16]
 1213 0058 E4E7     		b	.L112
 1214              	.L120:
 1215 005a 00BF     		.align	2
 1216              	.L119:
 1217 005c 003C0240 		.word	1073888256
 1218              		.cfi_endproc
 1219              	.LFE244:
 1221              		.section	.text.FLASH_EraseAllBank1Sectors,"ax",%progbits
 1222              		.align	1
 1223              		.global	FLASH_EraseAllBank1Sectors
 1224              		.syntax unified
ARM GAS  /tmp/cczwBOZG.s 			page 51


 1225              		.thumb
 1226              		.thumb_func
 1227              		.fpu fpv4-sp-d16
 1229              	FLASH_EraseAllBank1Sectors:
 1230              	.LVL44:
 1231              	.LFB245:
 622:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1232              		.loc 1 622 1 is_stmt 1 view -0
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 0
 1235              		@ frame_needed = 0, uses_anonymous_args = 0
 622:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1236              		.loc 1 622 1 is_stmt 0 view .LVU269
 1237 0000 10B5     		push	{r4, lr}
 1238              	.LCFI5:
 1239              		.cfi_def_cfa_offset 8
 1240              		.cfi_offset 4, -8
 1241              		.cfi_offset 14, -4
 1242 0002 0446     		mov	r4, r0
 623:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1243              		.loc 1 623 3 is_stmt 1 view .LVU270
 1244              	.LVL45:
 624:Core/Src/stm32f4xx_flash.c ****   
 1245              		.loc 1 624 3 view .LVU271
 627:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1246              		.loc 1 627 3 view .LVU272
 627:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1247              		.loc 1 627 12 is_stmt 0 view .LVU273
 1248 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1249              	.LVL46:
 628:Core/Src/stm32f4xx_flash.c ****   
 1250              		.loc 1 628 3 is_stmt 1 view .LVU274
 630:Core/Src/stm32f4xx_flash.c ****   {
 1251              		.loc 1 630 3 view .LVU275
 630:Core/Src/stm32f4xx_flash.c ****   {
 1252              		.loc 1 630 5 is_stmt 0 view .LVU276
 1253 0008 4CB1     		cbz	r4, .L124
 634:Core/Src/stm32f4xx_flash.c ****   {
 1254              		.loc 1 634 8 is_stmt 1 view .LVU277
 634:Core/Src/stm32f4xx_flash.c ****   {
 1255              		.loc 1 634 10 is_stmt 0 view .LVU278
 1256 000a 012C     		cmp	r4, #1
 1257 000c 0BD0     		beq	.L125
 638:Core/Src/stm32f4xx_flash.c ****   {
 1258              		.loc 1 638 8 is_stmt 1 view .LVU279
 638:Core/Src/stm32f4xx_flash.c ****   {
 1259              		.loc 1 638 10 is_stmt 0 view .LVU280
 1260 000e 022C     		cmp	r4, #2
 1261 0010 02D0     		beq	.L128
 644:Core/Src/stm32f4xx_flash.c ****   }  
 1262              		.loc 1 644 15 view .LVU281
 1263 0012 4FF44073 		mov	r3, #768
 1264 0016 03E0     		b	.L122
 1265              	.L128:
 640:Core/Src/stm32f4xx_flash.c ****   }
 1266              		.loc 1 640 15 view .LVU282
 1267 0018 4FF40073 		mov	r3, #512
ARM GAS  /tmp/cczwBOZG.s 			page 52


 1268 001c 00E0     		b	.L122
 1269              	.L124:
 632:Core/Src/stm32f4xx_flash.c ****   }
 1270              		.loc 1 632 16 view .LVU283
 1271 001e 0023     		movs	r3, #0
 1272              	.L122:
 1273              	.LVL47:
 646:Core/Src/stm32f4xx_flash.c ****   {
 1274              		.loc 1 646 3 is_stmt 1 view .LVU284
 646:Core/Src/stm32f4xx_flash.c ****   {
 1275              		.loc 1 646 5 is_stmt 0 view .LVU285
 1276 0020 0928     		cmp	r0, #9
 1277 0022 03D0     		beq	.L129
 1278              	.LVL48:
 1279              	.L123:
 662:Core/Src/stm32f4xx_flash.c **** }
 1280              		.loc 1 662 3 is_stmt 1 view .LVU286
 663:Core/Src/stm32f4xx_flash.c ****  
 1281              		.loc 1 663 1 is_stmt 0 view .LVU287
 1282 0024 10BD     		pop	{r4, pc}
 1283              	.LVL49:
 1284              	.L125:
 636:Core/Src/stm32f4xx_flash.c ****   }
 1285              		.loc 1 636 15 view .LVU288
 1286 0026 4FF48073 		mov	r3, #256
 1287 002a F9E7     		b	.L122
 1288              	.LVL50:
 1289              	.L129:
 649:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1290              		.loc 1 649 6 is_stmt 1 view .LVU289
 649:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1291              		.loc 1 649 16 is_stmt 0 view .LVU290
 1292 002c 0B4C     		ldr	r4, .L130
 1293 002e 2269     		ldr	r2, [r4, #16]
 1294 0030 22F44072 		bic	r2, r2, #768
 1295 0034 2261     		str	r2, [r4, #16]
 650:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 1296              		.loc 1 650 6 is_stmt 1 view .LVU291
 650:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 1297              		.loc 1 650 16 is_stmt 0 view .LVU292
 1298 0036 2269     		ldr	r2, [r4, #16]
 1299 0038 1343     		orrs	r3, r3, r2
 1300              	.LVL51:
 650:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 1301              		.loc 1 650 16 view .LVU293
 1302 003a 2361     		str	r3, [r4, #16]
 651:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1303              		.loc 1 651 6 is_stmt 1 view .LVU294
 651:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1304              		.loc 1 651 16 is_stmt 0 view .LVU295
 1305 003c 2369     		ldr	r3, [r4, #16]
 1306 003e 43F00403 		orr	r3, r3, #4
 1307 0042 2361     		str	r3, [r4, #16]
 652:Core/Src/stm32f4xx_flash.c ****     
 1308              		.loc 1 652 6 is_stmt 1 view .LVU296
 652:Core/Src/stm32f4xx_flash.c ****     
 1309              		.loc 1 652 16 is_stmt 0 view .LVU297
ARM GAS  /tmp/cczwBOZG.s 			page 53


 1310 0044 2369     		ldr	r3, [r4, #16]
 1311 0046 43F48033 		orr	r3, r3, #65536
 1312 004a 2361     		str	r3, [r4, #16]
 655:Core/Src/stm32f4xx_flash.c ****  
 1313              		.loc 1 655 5 is_stmt 1 view .LVU298
 655:Core/Src/stm32f4xx_flash.c ****  
 1314              		.loc 1 655 14 is_stmt 0 view .LVU299
 1315 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1316              	.LVL52:
 658:Core/Src/stm32f4xx_flash.c ****  
 1317              		.loc 1 658 5 is_stmt 1 view .LVU300
 658:Core/Src/stm32f4xx_flash.c ****  
 1318              		.loc 1 658 15 is_stmt 0 view .LVU301
 1319 0050 2369     		ldr	r3, [r4, #16]
 1320 0052 23F00403 		bic	r3, r3, #4
 1321 0056 2361     		str	r3, [r4, #16]
 1322 0058 E4E7     		b	.L123
 1323              	.L131:
 1324 005a 00BF     		.align	2
 1325              	.L130:
 1326 005c 003C0240 		.word	1073888256
 1327              		.cfi_endproc
 1328              	.LFE245:
 1330              		.section	.text.FLASH_EraseAllBank2Sectors,"ax",%progbits
 1331              		.align	1
 1332              		.global	FLASH_EraseAllBank2Sectors
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu fpv4-sp-d16
 1338              	FLASH_EraseAllBank2Sectors:
 1339              	.LVL53:
 1340              	.LFB246:
 689:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1341              		.loc 1 689 1 is_stmt 1 view -0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 0
 1344              		@ frame_needed = 0, uses_anonymous_args = 0
 689:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 1345              		.loc 1 689 1 is_stmt 0 view .LVU303
 1346 0000 10B5     		push	{r4, lr}
 1347              	.LCFI6:
 1348              		.cfi_def_cfa_offset 8
 1349              		.cfi_offset 4, -8
 1350              		.cfi_offset 14, -4
 1351 0002 0446     		mov	r4, r0
 690:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1352              		.loc 1 690 3 is_stmt 1 view .LVU304
 1353              	.LVL54:
 691:Core/Src/stm32f4xx_flash.c ****   
 1354              		.loc 1 691 3 view .LVU305
 694:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1355              		.loc 1 694 3 view .LVU306
 694:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 1356              		.loc 1 694 12 is_stmt 0 view .LVU307
 1357 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1358              	.LVL55:
ARM GAS  /tmp/cczwBOZG.s 			page 54


 695:Core/Src/stm32f4xx_flash.c ****   
 1359              		.loc 1 695 3 is_stmt 1 view .LVU308
 697:Core/Src/stm32f4xx_flash.c ****   {
 1360              		.loc 1 697 3 view .LVU309
 697:Core/Src/stm32f4xx_flash.c ****   {
 1361              		.loc 1 697 5 is_stmt 0 view .LVU310
 1362 0008 4CB1     		cbz	r4, .L135
 701:Core/Src/stm32f4xx_flash.c ****   {
 1363              		.loc 1 701 8 is_stmt 1 view .LVU311
 701:Core/Src/stm32f4xx_flash.c ****   {
 1364              		.loc 1 701 10 is_stmt 0 view .LVU312
 1365 000a 012C     		cmp	r4, #1
 1366 000c 0BD0     		beq	.L136
 705:Core/Src/stm32f4xx_flash.c ****   {
 1367              		.loc 1 705 8 is_stmt 1 view .LVU313
 705:Core/Src/stm32f4xx_flash.c ****   {
 1368              		.loc 1 705 10 is_stmt 0 view .LVU314
 1369 000e 022C     		cmp	r4, #2
 1370 0010 02D0     		beq	.L139
 711:Core/Src/stm32f4xx_flash.c ****   }  
 1371              		.loc 1 711 15 view .LVU315
 1372 0012 4FF44073 		mov	r3, #768
 1373 0016 03E0     		b	.L133
 1374              	.L139:
 707:Core/Src/stm32f4xx_flash.c ****   }
 1375              		.loc 1 707 15 view .LVU316
 1376 0018 4FF40073 		mov	r3, #512
 1377 001c 00E0     		b	.L133
 1378              	.L135:
 699:Core/Src/stm32f4xx_flash.c ****   }
 1379              		.loc 1 699 16 view .LVU317
 1380 001e 0023     		movs	r3, #0
 1381              	.L133:
 1382              	.LVL56:
 713:Core/Src/stm32f4xx_flash.c ****   {
 1383              		.loc 1 713 3 is_stmt 1 view .LVU318
 713:Core/Src/stm32f4xx_flash.c ****   {
 1384              		.loc 1 713 5 is_stmt 0 view .LVU319
 1385 0020 0928     		cmp	r0, #9
 1386 0022 03D0     		beq	.L140
 1387              	.LVL57:
 1388              	.L134:
 729:Core/Src/stm32f4xx_flash.c **** }
 1389              		.loc 1 729 3 is_stmt 1 view .LVU320
 730:Core/Src/stm32f4xx_flash.c ****  
 1390              		.loc 1 730 1 is_stmt 0 view .LVU321
 1391 0024 10BD     		pop	{r4, pc}
 1392              	.LVL58:
 1393              	.L136:
 703:Core/Src/stm32f4xx_flash.c ****   }
 1394              		.loc 1 703 15 view .LVU322
 1395 0026 4FF48073 		mov	r3, #256
 1396 002a F9E7     		b	.L133
 1397              	.LVL59:
 1398              	.L140:
 716:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1399              		.loc 1 716 6 is_stmt 1 view .LVU323
ARM GAS  /tmp/cczwBOZG.s 			page 55


 716:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 1400              		.loc 1 716 16 is_stmt 0 view .LVU324
 1401 002c 0B4C     		ldr	r4, .L141
 1402 002e 2269     		ldr	r2, [r4, #16]
 1403 0030 22F44072 		bic	r2, r2, #768
 1404 0034 2261     		str	r2, [r4, #16]
 717:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 1405              		.loc 1 717 6 is_stmt 1 view .LVU325
 717:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 1406              		.loc 1 717 16 is_stmt 0 view .LVU326
 1407 0036 2269     		ldr	r2, [r4, #16]
 1408 0038 1343     		orrs	r3, r3, r2
 1409              	.LVL60:
 717:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 1410              		.loc 1 717 16 view .LVU327
 1411 003a 2361     		str	r3, [r4, #16]
 718:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1412              		.loc 1 718 6 is_stmt 1 view .LVU328
 718:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 1413              		.loc 1 718 16 is_stmt 0 view .LVU329
 1414 003c 2369     		ldr	r3, [r4, #16]
 1415 003e 43F40043 		orr	r3, r3, #32768
 1416 0042 2361     		str	r3, [r4, #16]
 719:Core/Src/stm32f4xx_flash.c ****     
 1417              		.loc 1 719 6 is_stmt 1 view .LVU330
 719:Core/Src/stm32f4xx_flash.c ****     
 1418              		.loc 1 719 16 is_stmt 0 view .LVU331
 1419 0044 2369     		ldr	r3, [r4, #16]
 1420 0046 43F48033 		orr	r3, r3, #65536
 1421 004a 2361     		str	r3, [r4, #16]
 722:Core/Src/stm32f4xx_flash.c ****  
 1422              		.loc 1 722 5 is_stmt 1 view .LVU332
 722:Core/Src/stm32f4xx_flash.c ****  
 1423              		.loc 1 722 14 is_stmt 0 view .LVU333
 1424 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1425              	.LVL61:
 725:Core/Src/stm32f4xx_flash.c ****  
 1426              		.loc 1 725 5 is_stmt 1 view .LVU334
 725:Core/Src/stm32f4xx_flash.c ****  
 1427              		.loc 1 725 15 is_stmt 0 view .LVU335
 1428 0050 2369     		ldr	r3, [r4, #16]
 1429 0052 23F40043 		bic	r3, r3, #32768
 1430 0056 2361     		str	r3, [r4, #16]
 1431 0058 E4E7     		b	.L134
 1432              	.L142:
 1433 005a 00BF     		.align	2
 1434              	.L141:
 1435 005c 003C0240 		.word	1073888256
 1436              		.cfi_endproc
 1437              	.LFE246:
 1439              		.section	.text.FLASH_ProgramDoubleWord,"ax",%progbits
 1440              		.align	1
 1441              		.global	FLASH_ProgramDoubleWord
 1442              		.syntax unified
 1443              		.thumb
 1444              		.thumb_func
 1445              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cczwBOZG.s 			page 56


 1447              	FLASH_ProgramDoubleWord:
 1448              	.LVL62:
 1449              	.LFB247:
 746:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1450              		.loc 1 746 1 is_stmt 1 view -0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 746:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1454              		.loc 1 746 1 is_stmt 0 view .LVU337
 1455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1456              	.LCFI7:
 1457              		.cfi_def_cfa_offset 24
 1458              		.cfi_offset 3, -24
 1459              		.cfi_offset 4, -20
 1460              		.cfi_offset 5, -16
 1461              		.cfi_offset 6, -12
 1462              		.cfi_offset 7, -8
 1463              		.cfi_offset 14, -4
 1464 0002 0646     		mov	r6, r0
 1465 0004 1446     		mov	r4, r2
 1466 0006 1D46     		mov	r5, r3
 747:Core/Src/stm32f4xx_flash.c ****  
 1467              		.loc 1 747 3 is_stmt 1 view .LVU338
 1468              	.LVL63:
 750:Core/Src/stm32f4xx_flash.c ****  
 1469              		.loc 1 750 3 view .LVU339
 753:Core/Src/stm32f4xx_flash.c ****   
 1470              		.loc 1 753 3 view .LVU340
 753:Core/Src/stm32f4xx_flash.c ****   
 1471              		.loc 1 753 12 is_stmt 0 view .LVU341
 1472 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1473              	.LVL64:
 755:Core/Src/stm32f4xx_flash.c ****   {
 1474              		.loc 1 755 3 is_stmt 1 view .LVU342
 755:Core/Src/stm32f4xx_flash.c ****   {
 1475              		.loc 1 755 5 is_stmt 0 view .LVU343
 1476 000c 0928     		cmp	r0, #9
 1477 000e 00D0     		beq	.L146
 1478              	.L144:
 771:Core/Src/stm32f4xx_flash.c **** }
 1479              		.loc 1 771 3 is_stmt 1 view .LVU344
 772:Core/Src/stm32f4xx_flash.c ****  
 1480              		.loc 1 772 1 is_stmt 0 view .LVU345
 1481 0010 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1482              	.LVL65:
 1483              	.L146:
 758:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1484              		.loc 1 758 5 is_stmt 1 view .LVU346
 758:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1485              		.loc 1 758 15 is_stmt 0 view .LVU347
 1486 0012 0B4F     		ldr	r7, .L147
 1487 0014 3B69     		ldr	r3, [r7, #16]
 1488 0016 23F44073 		bic	r3, r3, #768
 1489 001a 3B61     		str	r3, [r7, #16]
 759:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1490              		.loc 1 759 5 is_stmt 1 view .LVU348
ARM GAS  /tmp/cczwBOZG.s 			page 57


 759:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1491              		.loc 1 759 15 is_stmt 0 view .LVU349
 1492 001c 3B69     		ldr	r3, [r7, #16]
 1493 001e 43F44073 		orr	r3, r3, #768
 1494 0022 3B61     		str	r3, [r7, #16]
 760:Core/Src/stm32f4xx_flash.c ****   
 1495              		.loc 1 760 5 is_stmt 1 view .LVU350
 760:Core/Src/stm32f4xx_flash.c ****   
 1496              		.loc 1 760 15 is_stmt 0 view .LVU351
 1497 0024 3B69     		ldr	r3, [r7, #16]
 1498 0026 43F00103 		orr	r3, r3, #1
 1499 002a 3B61     		str	r3, [r7, #16]
 762:Core/Src/stm32f4xx_flash.c ****         
 1500              		.loc 1 762 5 is_stmt 1 view .LVU352
 762:Core/Src/stm32f4xx_flash.c ****         
 1501              		.loc 1 762 30 is_stmt 0 view .LVU353
 1502 002c C6E90045 		strd	r4, [r6]
 765:Core/Src/stm32f4xx_flash.c ****  
 1503              		.loc 1 765 5 is_stmt 1 view .LVU354
 765:Core/Src/stm32f4xx_flash.c ****  
 1504              		.loc 1 765 14 is_stmt 0 view .LVU355
 1505 0030 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1506              	.LVL66:
 768:Core/Src/stm32f4xx_flash.c ****   } 
 1507              		.loc 1 768 5 is_stmt 1 view .LVU356
 768:Core/Src/stm32f4xx_flash.c ****   } 
 1508              		.loc 1 768 15 is_stmt 0 view .LVU357
 1509 0034 3B69     		ldr	r3, [r7, #16]
 1510 0036 23F00103 		bic	r3, r3, #1
 1511 003a 3B61     		str	r3, [r7, #16]
 1512 003c E8E7     		b	.L144
 1513              	.L148:
 1514 003e 00BF     		.align	2
 1515              	.L147:
 1516 0040 003C0240 		.word	1073888256
 1517              		.cfi_endproc
 1518              	.LFE247:
 1520              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 1521              		.align	1
 1522              		.global	FLASH_ProgramWord
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv4-sp-d16
 1528              	FLASH_ProgramWord:
 1529              	.LVL67:
 1530              	.LFB248:
 789:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1531              		.loc 1 789 1 is_stmt 1 view -0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 789:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1535              		.loc 1 789 1 is_stmt 0 view .LVU359
 1536 0000 70B5     		push	{r4, r5, r6, lr}
 1537              	.LCFI8:
 1538              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cczwBOZG.s 			page 58


 1539              		.cfi_offset 4, -16
 1540              		.cfi_offset 5, -12
 1541              		.cfi_offset 6, -8
 1542              		.cfi_offset 14, -4
 1543 0002 0546     		mov	r5, r0
 1544 0004 0C46     		mov	r4, r1
 790:Core/Src/stm32f4xx_flash.c ****  
 1545              		.loc 1 790 3 is_stmt 1 view .LVU360
 1546              	.LVL68:
 793:Core/Src/stm32f4xx_flash.c ****  
 1547              		.loc 1 793 3 view .LVU361
 796:Core/Src/stm32f4xx_flash.c ****   
 1548              		.loc 1 796 3 view .LVU362
 796:Core/Src/stm32f4xx_flash.c ****   
 1549              		.loc 1 796 12 is_stmt 0 view .LVU363
 1550 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1551              	.LVL69:
 798:Core/Src/stm32f4xx_flash.c ****   {
 1552              		.loc 1 798 3 is_stmt 1 view .LVU364
 798:Core/Src/stm32f4xx_flash.c ****   {
 1553              		.loc 1 798 5 is_stmt 0 view .LVU365
 1554 000a 0928     		cmp	r0, #9
 1555 000c 00D0     		beq	.L152
 1556              	.L150:
 814:Core/Src/stm32f4xx_flash.c **** }
 1557              		.loc 1 814 3 is_stmt 1 view .LVU366
 815:Core/Src/stm32f4xx_flash.c ****  
 1558              		.loc 1 815 1 is_stmt 0 view .LVU367
 1559 000e 70BD     		pop	{r4, r5, r6, pc}
 1560              	.LVL70:
 1561              	.L152:
 801:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1562              		.loc 1 801 5 is_stmt 1 view .LVU368
 801:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1563              		.loc 1 801 15 is_stmt 0 view .LVU369
 1564 0010 0A4E     		ldr	r6, .L153
 1565 0012 3369     		ldr	r3, [r6, #16]
 1566 0014 23F44073 		bic	r3, r3, #768
 1567 0018 3361     		str	r3, [r6, #16]
 802:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1568              		.loc 1 802 5 is_stmt 1 view .LVU370
 802:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1569              		.loc 1 802 15 is_stmt 0 view .LVU371
 1570 001a 3369     		ldr	r3, [r6, #16]
 1571 001c 43F40073 		orr	r3, r3, #512
 1572 0020 3361     		str	r3, [r6, #16]
 803:Core/Src/stm32f4xx_flash.c ****   
 1573              		.loc 1 803 5 is_stmt 1 view .LVU372
 803:Core/Src/stm32f4xx_flash.c ****   
 1574              		.loc 1 803 15 is_stmt 0 view .LVU373
 1575 0022 3369     		ldr	r3, [r6, #16]
 1576 0024 43F00103 		orr	r3, r3, #1
 1577 0028 3361     		str	r3, [r6, #16]
 805:Core/Src/stm32f4xx_flash.c ****         
 1578              		.loc 1 805 5 is_stmt 1 view .LVU374
 805:Core/Src/stm32f4xx_flash.c ****         
 1579              		.loc 1 805 30 is_stmt 0 view .LVU375
ARM GAS  /tmp/cczwBOZG.s 			page 59


 1580 002a 2C60     		str	r4, [r5]
 808:Core/Src/stm32f4xx_flash.c ****  
 1581              		.loc 1 808 5 is_stmt 1 view .LVU376
 808:Core/Src/stm32f4xx_flash.c ****  
 1582              		.loc 1 808 14 is_stmt 0 view .LVU377
 1583 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1584              	.LVL71:
 811:Core/Src/stm32f4xx_flash.c ****   } 
 1585              		.loc 1 811 5 is_stmt 1 view .LVU378
 811:Core/Src/stm32f4xx_flash.c ****   } 
 1586              		.loc 1 811 15 is_stmt 0 view .LVU379
 1587 0030 3369     		ldr	r3, [r6, #16]
 1588 0032 23F00103 		bic	r3, r3, #1
 1589 0036 3361     		str	r3, [r6, #16]
 1590 0038 E9E7     		b	.L150
 1591              	.L154:
 1592 003a 00BF     		.align	2
 1593              	.L153:
 1594 003c 003C0240 		.word	1073888256
 1595              		.cfi_endproc
 1596              	.LFE248:
 1598              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 1599              		.align	1
 1600              		.global	FLASH_ProgramHalfWord
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
 1604              		.fpu fpv4-sp-d16
 1606              	FLASH_ProgramHalfWord:
 1607              	.LVL72:
 1608              	.LFB249:
 831:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1609              		.loc 1 831 1 is_stmt 1 view -0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 831:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1613              		.loc 1 831 1 is_stmt 0 view .LVU381
 1614 0000 70B5     		push	{r4, r5, r6, lr}
 1615              	.LCFI9:
 1616              		.cfi_def_cfa_offset 16
 1617              		.cfi_offset 4, -16
 1618              		.cfi_offset 5, -12
 1619              		.cfi_offset 6, -8
 1620              		.cfi_offset 14, -4
 1621 0002 0546     		mov	r5, r0
 1622 0004 0C46     		mov	r4, r1
 832:Core/Src/stm32f4xx_flash.c ****  
 1623              		.loc 1 832 3 is_stmt 1 view .LVU382
 1624              	.LVL73:
 835:Core/Src/stm32f4xx_flash.c ****  
 1625              		.loc 1 835 3 view .LVU383
 838:Core/Src/stm32f4xx_flash.c ****   
 1626              		.loc 1 838 3 view .LVU384
 838:Core/Src/stm32f4xx_flash.c ****   
 1627              		.loc 1 838 12 is_stmt 0 view .LVU385
 1628 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
ARM GAS  /tmp/cczwBOZG.s 			page 60


 1629              	.LVL74:
 840:Core/Src/stm32f4xx_flash.c ****   {
 1630              		.loc 1 840 3 is_stmt 1 view .LVU386
 840:Core/Src/stm32f4xx_flash.c ****   {
 1631              		.loc 1 840 5 is_stmt 0 view .LVU387
 1632 000a 0928     		cmp	r0, #9
 1633 000c 00D0     		beq	.L158
 1634              	.L156:
 856:Core/Src/stm32f4xx_flash.c **** }
 1635              		.loc 1 856 3 is_stmt 1 view .LVU388
 857:Core/Src/stm32f4xx_flash.c ****  
 1636              		.loc 1 857 1 is_stmt 0 view .LVU389
 1637 000e 70BD     		pop	{r4, r5, r6, pc}
 1638              	.LVL75:
 1639              	.L158:
 843:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 1640              		.loc 1 843 5 is_stmt 1 view .LVU390
 843:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 1641              		.loc 1 843 15 is_stmt 0 view .LVU391
 1642 0010 0A4E     		ldr	r6, .L159
 1643 0012 3369     		ldr	r3, [r6, #16]
 1644 0014 23F44073 		bic	r3, r3, #768
 1645 0018 3361     		str	r3, [r6, #16]
 844:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1646              		.loc 1 844 5 is_stmt 1 view .LVU392
 844:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1647              		.loc 1 844 15 is_stmt 0 view .LVU393
 1648 001a 3369     		ldr	r3, [r6, #16]
 1649 001c 43F48073 		orr	r3, r3, #256
 1650 0020 3361     		str	r3, [r6, #16]
 845:Core/Src/stm32f4xx_flash.c ****   
 1651              		.loc 1 845 5 is_stmt 1 view .LVU394
 845:Core/Src/stm32f4xx_flash.c ****   
 1652              		.loc 1 845 15 is_stmt 0 view .LVU395
 1653 0022 3369     		ldr	r3, [r6, #16]
 1654 0024 43F00103 		orr	r3, r3, #1
 1655 0028 3361     		str	r3, [r6, #16]
 847:Core/Src/stm32f4xx_flash.c ****         
 1656              		.loc 1 847 5 is_stmt 1 view .LVU396
 847:Core/Src/stm32f4xx_flash.c ****         
 1657              		.loc 1 847 30 is_stmt 0 view .LVU397
 1658 002a 2C80     		strh	r4, [r5]	@ movhi
 850:Core/Src/stm32f4xx_flash.c ****  
 1659              		.loc 1 850 5 is_stmt 1 view .LVU398
 850:Core/Src/stm32f4xx_flash.c ****  
 1660              		.loc 1 850 14 is_stmt 0 view .LVU399
 1661 002c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1662              	.LVL76:
 853:Core/Src/stm32f4xx_flash.c ****   } 
 1663              		.loc 1 853 5 is_stmt 1 view .LVU400
 853:Core/Src/stm32f4xx_flash.c ****   } 
 1664              		.loc 1 853 15 is_stmt 0 view .LVU401
 1665 0030 3369     		ldr	r3, [r6, #16]
 1666 0032 23F00103 		bic	r3, r3, #1
 1667 0036 3361     		str	r3, [r6, #16]
 1668 0038 E9E7     		b	.L156
 1669              	.L160:
ARM GAS  /tmp/cczwBOZG.s 			page 61


 1670 003a 00BF     		.align	2
 1671              	.L159:
 1672 003c 003C0240 		.word	1073888256
 1673              		.cfi_endproc
 1674              	.LFE249:
 1676              		.section	.text.FLASH_ProgramByte,"ax",%progbits
 1677              		.align	1
 1678              		.global	FLASH_ProgramByte
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1682              		.fpu fpv4-sp-d16
 1684              	FLASH_ProgramByte:
 1685              	.LVL77:
 1686              	.LFB250:
 873:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1687              		.loc 1 873 1 is_stmt 1 view -0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 873:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1691              		.loc 1 873 1 is_stmt 0 view .LVU403
 1692 0000 70B5     		push	{r4, r5, r6, lr}
 1693              	.LCFI10:
 1694              		.cfi_def_cfa_offset 16
 1695              		.cfi_offset 4, -16
 1696              		.cfi_offset 5, -12
 1697              		.cfi_offset 6, -8
 1698              		.cfi_offset 14, -4
 1699 0002 0546     		mov	r5, r0
 1700 0004 0C46     		mov	r4, r1
 874:Core/Src/stm32f4xx_flash.c ****  
 1701              		.loc 1 874 3 is_stmt 1 view .LVU404
 1702              	.LVL78:
 877:Core/Src/stm32f4xx_flash.c ****  
 1703              		.loc 1 877 3 view .LVU405
 880:Core/Src/stm32f4xx_flash.c ****   
 1704              		.loc 1 880 3 view .LVU406
 880:Core/Src/stm32f4xx_flash.c ****   
 1705              		.loc 1 880 12 is_stmt 0 view .LVU407
 1706 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1707              	.LVL79:
 882:Core/Src/stm32f4xx_flash.c ****   {
 1708              		.loc 1 882 3 is_stmt 1 view .LVU408
 882:Core/Src/stm32f4xx_flash.c ****   {
 1709              		.loc 1 882 5 is_stmt 0 view .LVU409
 1710 000a 0928     		cmp	r0, #9
 1711 000c 00D0     		beq	.L164
 1712              	.L162:
 899:Core/Src/stm32f4xx_flash.c **** }
 1713              		.loc 1 899 3 is_stmt 1 view .LVU410
 900:Core/Src/stm32f4xx_flash.c ****  
 1714              		.loc 1 900 1 is_stmt 0 view .LVU411
 1715 000e 70BD     		pop	{r4, r5, r6, pc}
 1716              	.LVL80:
 1717              	.L164:
 885:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
ARM GAS  /tmp/cczwBOZG.s 			page 62


 1718              		.loc 1 885 5 is_stmt 1 view .LVU412
 885:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 1719              		.loc 1 885 15 is_stmt 0 view .LVU413
 1720 0010 094E     		ldr	r6, .L165
 1721 0012 3369     		ldr	r3, [r6, #16]
 1722 0014 23F44073 		bic	r3, r3, #768
 1723 0018 3361     		str	r3, [r6, #16]
 886:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1724              		.loc 1 886 5 is_stmt 1 view .LVU414
 886:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1725              		.loc 1 886 15 is_stmt 0 view .LVU415
 1726 001a 3369     		ldr	r3, [r6, #16]
 1727 001c 3361     		str	r3, [r6, #16]
 887:Core/Src/stm32f4xx_flash.c ****   
 1728              		.loc 1 887 5 is_stmt 1 view .LVU416
 887:Core/Src/stm32f4xx_flash.c ****   
 1729              		.loc 1 887 15 is_stmt 0 view .LVU417
 1730 001e 3369     		ldr	r3, [r6, #16]
 1731 0020 43F00103 		orr	r3, r3, #1
 1732 0024 3361     		str	r3, [r6, #16]
 889:Core/Src/stm32f4xx_flash.c ****         
 1733              		.loc 1 889 5 is_stmt 1 view .LVU418
 889:Core/Src/stm32f4xx_flash.c ****         
 1734              		.loc 1 889 29 is_stmt 0 view .LVU419
 1735 0026 2C70     		strb	r4, [r5]
 892:Core/Src/stm32f4xx_flash.c ****  
 1736              		.loc 1 892 5 is_stmt 1 view .LVU420
 892:Core/Src/stm32f4xx_flash.c ****  
 1737              		.loc 1 892 14 is_stmt 0 view .LVU421
 1738 0028 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1739              	.LVL81:
 895:Core/Src/stm32f4xx_flash.c ****   } 
 1740              		.loc 1 895 5 is_stmt 1 view .LVU422
 895:Core/Src/stm32f4xx_flash.c ****   } 
 1741              		.loc 1 895 15 is_stmt 0 view .LVU423
 1742 002c 3369     		ldr	r3, [r6, #16]
 1743 002e 23F00103 		bic	r3, r3, #1
 1744 0032 3361     		str	r3, [r6, #16]
 1745 0034 EBE7     		b	.L162
 1746              	.L166:
 1747 0036 00BF     		.align	2
 1748              	.L165:
 1749 0038 003C0240 		.word	1073888256
 1750              		.cfi_endproc
 1751              	.LFE250:
 1753              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 1754              		.align	1
 1755              		.global	FLASH_OB_WRPConfig
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1759              		.fpu fpv4-sp-d16
 1761              	FLASH_OB_WRPConfig:
 1762              	.LVL82:
 1763              	.LFB253:
1010:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1764              		.loc 1 1010 1 is_stmt 1 view -0
ARM GAS  /tmp/cczwBOZG.s 			page 63


 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 0, uses_anonymous_args = 0
1010:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1768              		.loc 1 1010 1 is_stmt 0 view .LVU425
 1769 0000 38B5     		push	{r3, r4, r5, lr}
 1770              	.LCFI11:
 1771              		.cfi_def_cfa_offset 16
 1772              		.cfi_offset 3, -16
 1773              		.cfi_offset 4, -12
 1774              		.cfi_offset 5, -8
 1775              		.cfi_offset 14, -4
 1776 0002 0546     		mov	r5, r0
 1777 0004 0C46     		mov	r4, r1
1011:Core/Src/stm32f4xx_flash.c ****   
 1778              		.loc 1 1011 3 is_stmt 1 view .LVU426
 1779              	.LVL83:
1014:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1780              		.loc 1 1014 3 view .LVU427
1015:Core/Src/stm32f4xx_flash.c ****     
 1781              		.loc 1 1015 3 view .LVU428
1017:Core/Src/stm32f4xx_flash.c ****  
 1782              		.loc 1 1017 3 view .LVU429
1017:Core/Src/stm32f4xx_flash.c ****  
 1783              		.loc 1 1017 12 is_stmt 0 view .LVU430
 1784 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1785              	.LVL84:
1019:Core/Src/stm32f4xx_flash.c ****   { 
 1786              		.loc 1 1019 3 is_stmt 1 view .LVU431
1019:Core/Src/stm32f4xx_flash.c ****   { 
 1787              		.loc 1 1019 5 is_stmt 0 view .LVU432
 1788 000a 0928     		cmp	r0, #9
 1789 000c 00D0     		beq	.L171
 1790              	.LVL85:
 1791              	.L167:
1030:Core/Src/stm32f4xx_flash.c ****  
 1792              		.loc 1 1030 1 view .LVU433
 1793 000e 38BD     		pop	{r3, r4, r5, pc}
 1794              	.LVL86:
 1795              	.L171:
1021:Core/Src/stm32f4xx_flash.c ****     {
 1796              		.loc 1 1021 5 is_stmt 1 view .LVU434
1021:Core/Src/stm32f4xx_flash.c ****     {
 1797              		.loc 1 1021 7 is_stmt 0 view .LVU435
 1798 0010 34B1     		cbz	r4, .L169
1023:Core/Src/stm32f4xx_flash.c ****     }
 1799              		.loc 1 1023 7 is_stmt 1 view .LVU436
1023:Core/Src/stm32f4xx_flash.c ****     }
 1800              		.loc 1 1023 44 is_stmt 0 view .LVU437
 1801 0012 074B     		ldr	r3, .L172
 1802 0014 1888     		ldrh	r0, [r3]
 1803              	.LVL87:
1023:Core/Src/stm32f4xx_flash.c ****     }
 1804              		.loc 1 1023 44 view .LVU438
 1805 0016 80B2     		uxth	r0, r0
 1806 0018 20EA0500 		bic	r0, r0, r5
 1807 001c 1880     		strh	r0, [r3]	@ movhi
ARM GAS  /tmp/cczwBOZG.s 			page 64


 1808 001e F6E7     		b	.L167
 1809              	.LVL88:
 1810              	.L169:
1027:Core/Src/stm32f4xx_flash.c ****     }
 1811              		.loc 1 1027 7 is_stmt 1 view .LVU439
1027:Core/Src/stm32f4xx_flash.c ****     }
 1812              		.loc 1 1027 44 is_stmt 0 view .LVU440
 1813 0020 034A     		ldr	r2, .L172
 1814 0022 1088     		ldrh	r0, [r2]
 1815              	.LVL89:
1027:Core/Src/stm32f4xx_flash.c ****     }
 1816              		.loc 1 1027 44 view .LVU441
 1817 0024 83B2     		uxth	r3, r0
1027:Core/Src/stm32f4xx_flash.c ****     }
 1818              		.loc 1 1027 47 view .LVU442
 1819 0026 A8B2     		uxth	r0, r5
1027:Core/Src/stm32f4xx_flash.c ****     }
 1820              		.loc 1 1027 44 view .LVU443
 1821 0028 1843     		orrs	r0, r0, r3
 1822 002a 1080     		strh	r0, [r2]	@ movhi
1030:Core/Src/stm32f4xx_flash.c ****  
 1823              		.loc 1 1030 1 view .LVU444
 1824 002c EFE7     		b	.L167
 1825              	.L173:
 1826 002e 00BF     		.align	2
 1827              	.L172:
 1828 0030 163C0240 		.word	1073888278
 1829              		.cfi_endproc
 1830              	.LFE253:
 1832              		.section	.text.FLASH_OB_WRP1Config,"ax",%progbits
 1833              		.align	1
 1834              		.global	FLASH_OB_WRP1Config
 1835              		.syntax unified
 1836              		.thumb
 1837              		.thumb_func
 1838              		.fpu fpv4-sp-d16
 1840              	FLASH_OB_WRP1Config:
 1841              	.LVL90:
 1842              	.LFB254:
1052:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1843              		.loc 1 1052 1 is_stmt 1 view -0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 0, uses_anonymous_args = 0
1052:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1847              		.loc 1 1052 1 is_stmt 0 view .LVU446
 1848 0000 38B5     		push	{r3, r4, r5, lr}
 1849              	.LCFI12:
 1850              		.cfi_def_cfa_offset 16
 1851              		.cfi_offset 3, -16
 1852              		.cfi_offset 4, -12
 1853              		.cfi_offset 5, -8
 1854              		.cfi_offset 14, -4
 1855 0002 0546     		mov	r5, r0
 1856 0004 0C46     		mov	r4, r1
1053:Core/Src/stm32f4xx_flash.c ****   
 1857              		.loc 1 1053 3 is_stmt 1 view .LVU447
ARM GAS  /tmp/cczwBOZG.s 			page 65


 1858              	.LVL91:
1056:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1859              		.loc 1 1056 3 view .LVU448
1057:Core/Src/stm32f4xx_flash.c ****     
 1860              		.loc 1 1057 3 view .LVU449
1059:Core/Src/stm32f4xx_flash.c ****  
 1861              		.loc 1 1059 3 view .LVU450
1059:Core/Src/stm32f4xx_flash.c ****  
 1862              		.loc 1 1059 12 is_stmt 0 view .LVU451
 1863 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1864              	.LVL92:
1061:Core/Src/stm32f4xx_flash.c ****   { 
 1865              		.loc 1 1061 3 is_stmt 1 view .LVU452
1061:Core/Src/stm32f4xx_flash.c ****   { 
 1866              		.loc 1 1061 5 is_stmt 0 view .LVU453
 1867 000a 0928     		cmp	r0, #9
 1868 000c 00D0     		beq	.L178
 1869              	.LVL93:
 1870              	.L174:
1072:Core/Src/stm32f4xx_flash.c ****  
 1871              		.loc 1 1072 1 view .LVU454
 1872 000e 38BD     		pop	{r3, r4, r5, pc}
 1873              	.LVL94:
 1874              	.L178:
1063:Core/Src/stm32f4xx_flash.c ****     {
 1875              		.loc 1 1063 5 is_stmt 1 view .LVU455
1063:Core/Src/stm32f4xx_flash.c ****     {
 1876              		.loc 1 1063 7 is_stmt 0 view .LVU456
 1877 0010 34B1     		cbz	r4, .L176
1065:Core/Src/stm32f4xx_flash.c ****     }
 1878              		.loc 1 1065 7 is_stmt 1 view .LVU457
1065:Core/Src/stm32f4xx_flash.c ****     }
 1879              		.loc 1 1065 45 is_stmt 0 view .LVU458
 1880 0012 074B     		ldr	r3, .L179
 1881 0014 1888     		ldrh	r0, [r3]
 1882              	.LVL95:
1065:Core/Src/stm32f4xx_flash.c ****     }
 1883              		.loc 1 1065 45 view .LVU459
 1884 0016 80B2     		uxth	r0, r0
 1885 0018 20EA0500 		bic	r0, r0, r5
 1886 001c 1880     		strh	r0, [r3]	@ movhi
 1887 001e F6E7     		b	.L174
 1888              	.LVL96:
 1889              	.L176:
1069:Core/Src/stm32f4xx_flash.c ****     }
 1890              		.loc 1 1069 7 is_stmt 1 view .LVU460
1069:Core/Src/stm32f4xx_flash.c ****     }
 1891              		.loc 1 1069 45 is_stmt 0 view .LVU461
 1892 0020 034A     		ldr	r2, .L179
 1893 0022 1088     		ldrh	r0, [r2]
 1894              	.LVL97:
1069:Core/Src/stm32f4xx_flash.c ****     }
 1895              		.loc 1 1069 45 view .LVU462
 1896 0024 83B2     		uxth	r3, r0
1069:Core/Src/stm32f4xx_flash.c ****     }
 1897              		.loc 1 1069 48 view .LVU463
 1898 0026 A8B2     		uxth	r0, r5
ARM GAS  /tmp/cczwBOZG.s 			page 66


1069:Core/Src/stm32f4xx_flash.c ****     }
 1899              		.loc 1 1069 45 view .LVU464
 1900 0028 1843     		orrs	r0, r0, r3
 1901 002a 1080     		strh	r0, [r2]	@ movhi
1072:Core/Src/stm32f4xx_flash.c ****  
 1902              		.loc 1 1072 1 view .LVU465
 1903 002c EFE7     		b	.L174
 1904              	.L180:
 1905 002e 00BF     		.align	2
 1906              	.L179:
 1907 0030 1A3C0240 		.word	1073888282
 1908              		.cfi_endproc
 1909              	.LFE254:
 1911              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 1912              		.align	1
 1913              		.global	FLASH_OB_PCROPConfig
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1917              		.fpu fpv4-sp-d16
 1919              	FLASH_OB_PCROPConfig:
 1920              	.LVL98:
 1921              	.LFB256:
1133:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1922              		.loc 1 1133 1 is_stmt 1 view -0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
1133:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1926              		.loc 1 1133 1 is_stmt 0 view .LVU467
 1927 0000 38B5     		push	{r3, r4, r5, lr}
 1928              	.LCFI13:
 1929              		.cfi_def_cfa_offset 16
 1930              		.cfi_offset 3, -16
 1931              		.cfi_offset 4, -12
 1932              		.cfi_offset 5, -8
 1933              		.cfi_offset 14, -4
 1934 0002 0546     		mov	r5, r0
 1935 0004 0C46     		mov	r4, r1
1134:Core/Src/stm32f4xx_flash.c ****   
 1936              		.loc 1 1134 3 is_stmt 1 view .LVU468
 1937              	.LVL99:
1137:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1938              		.loc 1 1137 3 view .LVU469
1138:Core/Src/stm32f4xx_flash.c ****     
 1939              		.loc 1 1138 3 view .LVU470
1140:Core/Src/stm32f4xx_flash.c ****  
 1940              		.loc 1 1140 3 view .LVU471
1140:Core/Src/stm32f4xx_flash.c ****  
 1941              		.loc 1 1140 12 is_stmt 0 view .LVU472
 1942 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1943              	.LVL100:
1142:Core/Src/stm32f4xx_flash.c ****   { 
 1944              		.loc 1 1142 3 is_stmt 1 view .LVU473
1142:Core/Src/stm32f4xx_flash.c ****   { 
 1945              		.loc 1 1142 5 is_stmt 0 view .LVU474
 1946 000a 0928     		cmp	r0, #9
ARM GAS  /tmp/cczwBOZG.s 			page 67


 1947 000c 00D0     		beq	.L185
 1948              	.LVL101:
 1949              	.L181:
1153:Core/Src/stm32f4xx_flash.c ****  
 1950              		.loc 1 1153 1 view .LVU475
 1951 000e 38BD     		pop	{r3, r4, r5, pc}
 1952              	.LVL102:
 1953              	.L185:
1144:Core/Src/stm32f4xx_flash.c ****     {
 1954              		.loc 1 1144 5 is_stmt 1 view .LVU476
1144:Core/Src/stm32f4xx_flash.c ****     {
 1955              		.loc 1 1144 7 is_stmt 0 view .LVU477
 1956 0010 34B1     		cbz	r4, .L183
1146:Core/Src/stm32f4xx_flash.c ****     }
 1957              		.loc 1 1146 7 is_stmt 1 view .LVU478
1146:Core/Src/stm32f4xx_flash.c ****     }
 1958              		.loc 1 1146 44 is_stmt 0 view .LVU479
 1959 0012 074A     		ldr	r2, .L186
 1960 0014 1088     		ldrh	r0, [r2]
 1961              	.LVL103:
1146:Core/Src/stm32f4xx_flash.c ****     }
 1962              		.loc 1 1146 44 view .LVU480
 1963 0016 83B2     		uxth	r3, r0
1146:Core/Src/stm32f4xx_flash.c ****     }
 1964              		.loc 1 1146 47 view .LVU481
 1965 0018 A8B2     		uxth	r0, r5
1146:Core/Src/stm32f4xx_flash.c ****     }
 1966              		.loc 1 1146 44 view .LVU482
 1967 001a 1843     		orrs	r0, r0, r3
 1968 001c 1080     		strh	r0, [r2]	@ movhi
 1969 001e F6E7     		b	.L181
 1970              	.LVL104:
 1971              	.L183:
1150:Core/Src/stm32f4xx_flash.c ****     }
 1972              		.loc 1 1150 7 is_stmt 1 view .LVU483
1150:Core/Src/stm32f4xx_flash.c ****     }
 1973              		.loc 1 1150 44 is_stmt 0 view .LVU484
 1974 0020 034B     		ldr	r3, .L186
 1975 0022 1888     		ldrh	r0, [r3]
 1976              	.LVL105:
1150:Core/Src/stm32f4xx_flash.c ****     }
 1977              		.loc 1 1150 44 view .LVU485
 1978 0024 80B2     		uxth	r0, r0
 1979 0026 20EA0500 		bic	r0, r0, r5
 1980 002a 1880     		strh	r0, [r3]	@ movhi
1153:Core/Src/stm32f4xx_flash.c ****  
 1981              		.loc 1 1153 1 view .LVU486
 1982 002c EFE7     		b	.L181
 1983              	.L187:
 1984 002e 00BF     		.align	2
 1985              	.L186:
 1986 0030 163C0240 		.word	1073888278
 1987              		.cfi_endproc
 1988              	.LFE256:
 1990              		.section	.text.FLASH_OB_PCROP1Config,"ax",%progbits
 1991              		.align	1
 1992              		.global	FLASH_OB_PCROP1Config
ARM GAS  /tmp/cczwBOZG.s 			page 68


 1993              		.syntax unified
 1994              		.thumb
 1995              		.thumb_func
 1996              		.fpu fpv4-sp-d16
 1998              	FLASH_OB_PCROP1Config:
 1999              	.LVL106:
 2000              	.LFB257:
1170:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 2001              		.loc 1 1170 1 is_stmt 1 view -0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 0, uses_anonymous_args = 0
1170:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 2005              		.loc 1 1170 1 is_stmt 0 view .LVU488
 2006 0000 38B5     		push	{r3, r4, r5, lr}
 2007              	.LCFI14:
 2008              		.cfi_def_cfa_offset 16
 2009              		.cfi_offset 3, -16
 2010              		.cfi_offset 4, -12
 2011              		.cfi_offset 5, -8
 2012              		.cfi_offset 14, -4
 2013 0002 0546     		mov	r5, r0
 2014 0004 0C46     		mov	r4, r1
1171:Core/Src/stm32f4xx_flash.c ****   
 2015              		.loc 1 1171 3 is_stmt 1 view .LVU489
 2016              	.LVL107:
1174:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2017              		.loc 1 1174 3 view .LVU490
1175:Core/Src/stm32f4xx_flash.c ****     
 2018              		.loc 1 1175 3 view .LVU491
1177:Core/Src/stm32f4xx_flash.c ****  
 2019              		.loc 1 1177 3 view .LVU492
1177:Core/Src/stm32f4xx_flash.c ****  
 2020              		.loc 1 1177 12 is_stmt 0 view .LVU493
 2021 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 2022              	.LVL108:
1179:Core/Src/stm32f4xx_flash.c ****   { 
 2023              		.loc 1 1179 3 is_stmt 1 view .LVU494
1179:Core/Src/stm32f4xx_flash.c ****   { 
 2024              		.loc 1 1179 5 is_stmt 0 view .LVU495
 2025 000a 0928     		cmp	r0, #9
 2026 000c 00D0     		beq	.L192
 2027              	.LVL109:
 2028              	.L188:
1190:Core/Src/stm32f4xx_flash.c ****  
 2029              		.loc 1 1190 1 view .LVU496
 2030 000e 38BD     		pop	{r3, r4, r5, pc}
 2031              	.LVL110:
 2032              	.L192:
1181:Core/Src/stm32f4xx_flash.c ****     {
 2033              		.loc 1 1181 5 is_stmt 1 view .LVU497
1181:Core/Src/stm32f4xx_flash.c ****     {
 2034              		.loc 1 1181 7 is_stmt 0 view .LVU498
 2035 0010 34B1     		cbz	r4, .L190
1183:Core/Src/stm32f4xx_flash.c ****     }
 2036              		.loc 1 1183 7 is_stmt 1 view .LVU499
1183:Core/Src/stm32f4xx_flash.c ****     }
ARM GAS  /tmp/cczwBOZG.s 			page 69


 2037              		.loc 1 1183 45 is_stmt 0 view .LVU500
 2038 0012 074A     		ldr	r2, .L193
 2039 0014 1088     		ldrh	r0, [r2]
 2040              	.LVL111:
1183:Core/Src/stm32f4xx_flash.c ****     }
 2041              		.loc 1 1183 45 view .LVU501
 2042 0016 83B2     		uxth	r3, r0
1183:Core/Src/stm32f4xx_flash.c ****     }
 2043              		.loc 1 1183 48 view .LVU502
 2044 0018 A8B2     		uxth	r0, r5
1183:Core/Src/stm32f4xx_flash.c ****     }
 2045              		.loc 1 1183 45 view .LVU503
 2046 001a 1843     		orrs	r0, r0, r3
 2047 001c 1080     		strh	r0, [r2]	@ movhi
 2048 001e F6E7     		b	.L188
 2049              	.LVL112:
 2050              	.L190:
1187:Core/Src/stm32f4xx_flash.c ****     }
 2051              		.loc 1 1187 7 is_stmt 1 view .LVU504
1187:Core/Src/stm32f4xx_flash.c ****     }
 2052              		.loc 1 1187 45 is_stmt 0 view .LVU505
 2053 0020 034B     		ldr	r3, .L193
 2054 0022 1888     		ldrh	r0, [r3]
 2055              	.LVL113:
1187:Core/Src/stm32f4xx_flash.c ****     }
 2056              		.loc 1 1187 45 view .LVU506
 2057 0024 80B2     		uxth	r0, r0
 2058 0026 20EA0500 		bic	r0, r0, r5
 2059 002a 1880     		strh	r0, [r3]	@ movhi
1190:Core/Src/stm32f4xx_flash.c ****  
 2060              		.loc 1 1190 1 view .LVU507
 2061 002c EFE7     		b	.L188
 2062              	.L194:
 2063 002e 00BF     		.align	2
 2064              	.L193:
 2065 0030 1A3C0240 		.word	1073888282
 2066              		.cfi_endproc
 2067              	.LFE257:
 2069              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 2070              		.align	1
 2071              		.global	FLASH_OB_RDPConfig
 2072              		.syntax unified
 2073              		.thumb
 2074              		.thumb_func
 2075              		.fpu fpv4-sp-d16
 2077              	FLASH_OB_RDPConfig:
 2078              	.LVL114:
 2079              	.LFB258:
1206:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 2080              		.loc 1 1206 1 is_stmt 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
1206:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 2084              		.loc 1 1206 1 is_stmt 0 view .LVU509
 2085 0000 10B5     		push	{r4, lr}
 2086              	.LCFI15:
ARM GAS  /tmp/cczwBOZG.s 			page 70


 2087              		.cfi_def_cfa_offset 8
 2088              		.cfi_offset 4, -8
 2089              		.cfi_offset 14, -4
 2090 0002 0446     		mov	r4, r0
1207:Core/Src/stm32f4xx_flash.c ****  
 2091              		.loc 1 1207 3 is_stmt 1 view .LVU510
 2092              	.LVL115:
1210:Core/Src/stm32f4xx_flash.c ****  
 2093              		.loc 1 1210 3 view .LVU511
1212:Core/Src/stm32f4xx_flash.c ****  
 2094              		.loc 1 1212 3 view .LVU512
1212:Core/Src/stm32f4xx_flash.c ****  
 2095              		.loc 1 1212 12 is_stmt 0 view .LVU513
 2096 0004 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 2097              	.LVL116:
1214:Core/Src/stm32f4xx_flash.c ****   {
 2098              		.loc 1 1214 3 is_stmt 1 view .LVU514
1214:Core/Src/stm32f4xx_flash.c ****   {
 2099              		.loc 1 1214 5 is_stmt 0 view .LVU515
 2100 0008 0928     		cmp	r0, #9
 2101 000a 00D0     		beq	.L198
 2102              	.L195:
1219:Core/Src/stm32f4xx_flash.c ****  
 2103              		.loc 1 1219 1 view .LVU516
 2104 000c 10BD     		pop	{r4, pc}
 2105              	.L198:
1216:Core/Src/stm32f4xx_flash.c ****  
 2106              		.loc 1 1216 5 is_stmt 1 view .LVU517
1216:Core/Src/stm32f4xx_flash.c ****  
 2107              		.loc 1 1216 41 is_stmt 0 view .LVU518
 2108 000e 014B     		ldr	r3, .L199
 2109 0010 1C70     		strb	r4, [r3]
1219:Core/Src/stm32f4xx_flash.c ****  
 2110              		.loc 1 1219 1 view .LVU519
 2111 0012 FBE7     		b	.L195
 2112              	.L200:
 2113              		.align	2
 2114              	.L199:
 2115 0014 153C0240 		.word	1073888277
 2116              		.cfi_endproc
 2117              	.LFE258:
 2119              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 2120              		.align	1
 2121              		.global	FLASH_OB_UserConfig
 2122              		.syntax unified
 2123              		.thumb
 2124              		.thumb_func
 2125              		.fpu fpv4-sp-d16
 2127              	FLASH_OB_UserConfig:
 2128              	.LVL117:
 2129              	.LFB259:
1238:Core/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 2130              		.loc 1 1238 1 is_stmt 1 view -0
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 0
 2133              		@ frame_needed = 0, uses_anonymous_args = 0
1238:Core/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
ARM GAS  /tmp/cczwBOZG.s 			page 71


 2134              		.loc 1 1238 1 is_stmt 0 view .LVU521
 2135 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2136              	.LCFI16:
 2137              		.cfi_def_cfa_offset 24
 2138              		.cfi_offset 3, -24
 2139              		.cfi_offset 4, -20
 2140              		.cfi_offset 5, -16
 2141              		.cfi_offset 6, -12
 2142              		.cfi_offset 7, -8
 2143              		.cfi_offset 14, -4
 2144 0002 0446     		mov	r4, r0
 2145 0004 0E46     		mov	r6, r1
 2146 0006 1546     		mov	r5, r2
1239:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2; 
 2147              		.loc 1 1239 3 is_stmt 1 view .LVU522
 2148              	.LVL118:
1240:Core/Src/stm32f4xx_flash.c ****  
 2149              		.loc 1 1240 3 view .LVU523
1243:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
 2150              		.loc 1 1243 3 view .LVU524
1244:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
 2151              		.loc 1 1244 3 view .LVU525
1245:Core/Src/stm32f4xx_flash.c ****  
 2152              		.loc 1 1245 3 view .LVU526
1248:Core/Src/stm32f4xx_flash.c ****   
 2153              		.loc 1 1248 3 view .LVU527
1248:Core/Src/stm32f4xx_flash.c ****   
 2154              		.loc 1 1248 12 is_stmt 0 view .LVU528
 2155 0008 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 2156              	.LVL119:
1250:Core/Src/stm32f4xx_flash.c ****   { 
 2157              		.loc 1 1250 3 is_stmt 1 view .LVU529
1250:Core/Src/stm32f4xx_flash.c ****   { 
 2158              		.loc 1 1250 5 is_stmt 0 view .LVU530
 2159 000c 0928     		cmp	r0, #9
 2160 000e 00D0     		beq	.L204
 2161              	.LVL120:
 2162              	.L201:
1265:Core/Src/stm32f4xx_flash.c ****  
 2163              		.loc 1 1265 1 view .LVU531
 2164 0010 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2165              	.LVL121:
 2166              	.L204:
1259:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
 2167              		.loc 1 1259 5 is_stmt 1 view .LVU532
1259:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
 2168              		.loc 1 1259 67 is_stmt 0 view .LVU533
 2169 0012 064F     		ldr	r7, .L205
 2170 0014 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
1259:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
 2171              		.loc 1 1259 15 view .LVU534
 2172 0016 03F00F03 		and	r3, r3, #15
 2173              	.LVL122:
1263:Core/Src/stm32f4xx_flash.c ****   }  
 2174              		.loc 1 1263 5 is_stmt 1 view .LVU535
1263:Core/Src/stm32f4xx_flash.c ****   }  
 2175              		.loc 1 1263 75 is_stmt 0 view .LVU536
ARM GAS  /tmp/cczwBOZG.s 			page 72


 2176 001a 43EA0601 		orr	r1, r3, r6
1263:Core/Src/stm32f4xx_flash.c ****   }  
 2177              		.loc 1 1263 54 view .LVU537
 2178 001e 41EA0502 		orr	r2, r1, r5
1263:Core/Src/stm32f4xx_flash.c ****   }  
 2179              		.loc 1 1263 42 view .LVU538
 2180 0022 42EA0400 		orr	r0, r2, r4
 2181              	.LVL123:
1263:Core/Src/stm32f4xx_flash.c ****   }  
 2182              		.loc 1 1263 42 view .LVU539
 2183 0026 3870     		strb	r0, [r7]
1265:Core/Src/stm32f4xx_flash.c ****  
 2184              		.loc 1 1265 1 view .LVU540
 2185 0028 F2E7     		b	.L201
 2186              	.L206:
 2187 002a 00BF     		.align	2
 2188              	.L205:
 2189 002c 143C0240 		.word	1073888276
 2190              		.cfi_endproc
 2191              	.LFE259:
 2193              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 2194              		.align	1
 2195              		.global	FLASH_OB_Launch
 2196              		.syntax unified
 2197              		.thumb
 2198              		.thumb_func
 2199              		.fpu fpv4-sp-d16
 2201              	FLASH_OB_Launch:
 2202              	.LFB262:
1317:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 2203              		.loc 1 1317 1 is_stmt 1 view -0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 0
 2206              		@ frame_needed = 0, uses_anonymous_args = 0
 2207 0000 08B5     		push	{r3, lr}
 2208              	.LCFI17:
 2209              		.cfi_def_cfa_offset 8
 2210              		.cfi_offset 3, -8
 2211              		.cfi_offset 14, -4
1318:Core/Src/stm32f4xx_flash.c ****  
 2212              		.loc 1 1318 3 view .LVU542
 2213              	.LVL124:
1321:Core/Src/stm32f4xx_flash.c ****  
 2214              		.loc 1 1321 3 view .LVU543
1321:Core/Src/stm32f4xx_flash.c ****  
 2215              		.loc 1 1321 40 is_stmt 0 view .LVU544
 2216 0002 044A     		ldr	r2, .L209
 2217 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2218 0006 43F00203 		orr	r3, r3, #2
 2219 000a 1370     		strb	r3, [r2]
1324:Core/Src/stm32f4xx_flash.c ****  
 2220              		.loc 1 1324 3 is_stmt 1 view .LVU545
1324:Core/Src/stm32f4xx_flash.c ****  
 2221              		.loc 1 1324 12 is_stmt 0 view .LVU546
 2222 000c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 2223              	.LVL125:
1326:Core/Src/stm32f4xx_flash.c **** }
ARM GAS  /tmp/cczwBOZG.s 			page 73


 2224              		.loc 1 1326 3 is_stmt 1 view .LVU547
1327:Core/Src/stm32f4xx_flash.c ****  
 2225              		.loc 1 1327 1 is_stmt 0 view .LVU548
 2226 0010 08BD     		pop	{r3, pc}
 2227              	.L210:
 2228 0012 00BF     		.align	2
 2229              	.L209:
 2230 0014 143C0240 		.word	1073888276
 2231              		.cfi_endproc
 2232              	.LFE262:
 2234              		.text
 2235              	.Letext0:
 2236              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 2237              		.file 3 "Drivers/CMSIS/Include/core_cm4.h"
 2238              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2239              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2240              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2241              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2242              		.file 8 "Core/Inc/stm32f4xx_flash.h"
ARM GAS  /tmp/cczwBOZG.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_flash.c
     /tmp/cczwBOZG.s:18     .text.FLASH_SetLatency:0000000000000000 $t
     /tmp/cczwBOZG.s:26     .text.FLASH_SetLatency:0000000000000000 FLASH_SetLatency
     /tmp/cczwBOZG.s:48     .text.FLASH_SetLatency:0000000000000008 $d
     /tmp/cczwBOZG.s:53     .text.FLASH_PrefetchBufferCmd:0000000000000000 $t
     /tmp/cczwBOZG.s:60     .text.FLASH_PrefetchBufferCmd:0000000000000000 FLASH_PrefetchBufferCmd
     /tmp/cczwBOZG.s:91     .text.FLASH_PrefetchBufferCmd:000000000000001c $d
     /tmp/cczwBOZG.s:96     .text.FLASH_InstructionCacheCmd:0000000000000000 $t
     /tmp/cczwBOZG.s:103    .text.FLASH_InstructionCacheCmd:0000000000000000 FLASH_InstructionCacheCmd
     /tmp/cczwBOZG.s:134    .text.FLASH_InstructionCacheCmd:000000000000001c $d
     /tmp/cczwBOZG.s:139    .text.FLASH_DataCacheCmd:0000000000000000 $t
     /tmp/cczwBOZG.s:146    .text.FLASH_DataCacheCmd:0000000000000000 FLASH_DataCacheCmd
     /tmp/cczwBOZG.s:177    .text.FLASH_DataCacheCmd:000000000000001c $d
     /tmp/cczwBOZG.s:182    .text.FLASH_InstructionCacheReset:0000000000000000 $t
     /tmp/cczwBOZG.s:189    .text.FLASH_InstructionCacheReset:0000000000000000 FLASH_InstructionCacheReset
     /tmp/cczwBOZG.s:207    .text.FLASH_InstructionCacheReset:000000000000000c $d
     /tmp/cczwBOZG.s:212    .text.FLASH_DataCacheReset:0000000000000000 $t
     /tmp/cczwBOZG.s:219    .text.FLASH_DataCacheReset:0000000000000000 FLASH_DataCacheReset
     /tmp/cczwBOZG.s:237    .text.FLASH_DataCacheReset:000000000000000c $d
     /tmp/cczwBOZG.s:242    .text.FLASH_Unlock:0000000000000000 $t
     /tmp/cczwBOZG.s:249    .text.FLASH_Unlock:0000000000000000 FLASH_Unlock
     /tmp/cczwBOZG.s:281    .text.FLASH_Unlock:0000000000000018 $d
     /tmp/cczwBOZG.s:287    .text.FLASH_Lock:0000000000000000 $t
     /tmp/cczwBOZG.s:294    .text.FLASH_Lock:0000000000000000 FLASH_Lock
     /tmp/cczwBOZG.s:312    .text.FLASH_Lock:000000000000000c $d
     /tmp/cczwBOZG.s:317    .text.FLASH_OB_Unlock:0000000000000000 $t
     /tmp/cczwBOZG.s:324    .text.FLASH_OB_Unlock:0000000000000000 FLASH_OB_Unlock
     /tmp/cczwBOZG.s:353    .text.FLASH_OB_Unlock:0000000000000018 $d
     /tmp/cczwBOZG.s:359    .text.FLASH_OB_Lock:0000000000000000 $t
     /tmp/cczwBOZG.s:366    .text.FLASH_OB_Lock:0000000000000000 FLASH_OB_Lock
     /tmp/cczwBOZG.s:384    .text.FLASH_OB_Lock:000000000000000c $d
     /tmp/cczwBOZG.s:389    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:396    .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 FLASH_OB_PCROPSelectionConfig
     /tmp/cczwBOZG.s:424    .text.FLASH_OB_PCROPSelectionConfig:0000000000000010 $d
     /tmp/cczwBOZG.s:429    .text.FLASH_OB_BootConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:436    .text.FLASH_OB_BootConfig:0000000000000000 FLASH_OB_BootConfig
     /tmp/cczwBOZG.s:461    .text.FLASH_OB_BootConfig:0000000000000014 $d
     /tmp/cczwBOZG.s:466    .text.FLASH_OB_BORConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:473    .text.FLASH_OB_BORConfig:0000000000000000 FLASH_OB_BORConfig
     /tmp/cczwBOZG.s:498    .text.FLASH_OB_BORConfig:0000000000000014 $d
     /tmp/cczwBOZG.s:503    .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/cczwBOZG.s:510    .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/cczwBOZG.s:527    .text.FLASH_OB_GetUser:000000000000000c $d
     /tmp/cczwBOZG.s:532    .text.FLASH_OB_GetWRP:0000000000000000 $t
     /tmp/cczwBOZG.s:539    .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
     /tmp/cczwBOZG.s:556    .text.FLASH_OB_GetWRP:0000000000000008 $d
     /tmp/cczwBOZG.s:561    .text.FLASH_OB_GetWRP1:0000000000000000 $t
     /tmp/cczwBOZG.s:568    .text.FLASH_OB_GetWRP1:0000000000000000 FLASH_OB_GetWRP1
     /tmp/cczwBOZG.s:585    .text.FLASH_OB_GetWRP1:0000000000000008 $d
     /tmp/cczwBOZG.s:590    .text.FLASH_OB_GetPCROP:0000000000000000 $t
     /tmp/cczwBOZG.s:597    .text.FLASH_OB_GetPCROP:0000000000000000 FLASH_OB_GetPCROP
     /tmp/cczwBOZG.s:614    .text.FLASH_OB_GetPCROP:0000000000000008 $d
     /tmp/cczwBOZG.s:619    .text.FLASH_OB_GetPCROP1:0000000000000000 $t
     /tmp/cczwBOZG.s:626    .text.FLASH_OB_GetPCROP1:0000000000000000 FLASH_OB_GetPCROP1
     /tmp/cczwBOZG.s:643    .text.FLASH_OB_GetPCROP1:0000000000000008 $d
     /tmp/cczwBOZG.s:648    .text.FLASH_OB_GetRDP:0000000000000000 $t
ARM GAS  /tmp/cczwBOZG.s 			page 75


     /tmp/cczwBOZG.s:655    .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/cczwBOZG.s:685    .text.FLASH_OB_GetRDP:0000000000000014 $d
     /tmp/cczwBOZG.s:690    .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/cczwBOZG.s:697    .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/cczwBOZG.s:714    .text.FLASH_OB_GetBOR:000000000000000c $d
     /tmp/cczwBOZG.s:719    .text.FLASH_ITConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:726    .text.FLASH_ITConfig:0000000000000000 FLASH_ITConfig
     /tmp/cczwBOZG.s:763    .text.FLASH_ITConfig:0000000000000018 $d
     /tmp/cczwBOZG.s:768    .text.FLASH_GetFlagStatus:0000000000000000 $t
     /tmp/cczwBOZG.s:775    .text.FLASH_GetFlagStatus:0000000000000000 FLASH_GetFlagStatus
     /tmp/cczwBOZG.s:808    .text.FLASH_GetFlagStatus:0000000000000010 $d
     /tmp/cczwBOZG.s:813    .text.FLASH_ClearFlag:0000000000000000 $t
     /tmp/cczwBOZG.s:820    .text.FLASH_ClearFlag:0000000000000000 FLASH_ClearFlag
     /tmp/cczwBOZG.s:838    .text.FLASH_ClearFlag:0000000000000008 $d
     /tmp/cczwBOZG.s:843    .text.FLASH_GetStatus:0000000000000000 $t
     /tmp/cczwBOZG.s:850    .text.FLASH_GetStatus:0000000000000000 FLASH_GetStatus
     /tmp/cczwBOZG.s:923    .text.FLASH_GetStatus:000000000000004c $d
     /tmp/cczwBOZG.s:928    .text.FLASH_WaitForLastOperation2:0000000000000000 $t
     /tmp/cczwBOZG.s:935    .text.FLASH_WaitForLastOperation2:0000000000000000 FLASH_WaitForLastOperation2
     /tmp/cczwBOZG.s:988    .text.FLASH_EraseSector:0000000000000000 $t
     /tmp/cczwBOZG.s:995    .text.FLASH_EraseSector:0000000000000000 FLASH_EraseSector
     /tmp/cczwBOZG.s:1108   .text.FLASH_EraseSector:000000000000006c $d
     /tmp/cczwBOZG.s:1113   .text.FLASH_EraseAllSectors:0000000000000000 $t
     /tmp/cczwBOZG.s:1120   .text.FLASH_EraseAllSectors:0000000000000000 FLASH_EraseAllSectors
     /tmp/cczwBOZG.s:1217   .text.FLASH_EraseAllSectors:000000000000005c $d
     /tmp/cczwBOZG.s:1222   .text.FLASH_EraseAllBank1Sectors:0000000000000000 $t
     /tmp/cczwBOZG.s:1229   .text.FLASH_EraseAllBank1Sectors:0000000000000000 FLASH_EraseAllBank1Sectors
     /tmp/cczwBOZG.s:1326   .text.FLASH_EraseAllBank1Sectors:000000000000005c $d
     /tmp/cczwBOZG.s:1331   .text.FLASH_EraseAllBank2Sectors:0000000000000000 $t
     /tmp/cczwBOZG.s:1338   .text.FLASH_EraseAllBank2Sectors:0000000000000000 FLASH_EraseAllBank2Sectors
     /tmp/cczwBOZG.s:1435   .text.FLASH_EraseAllBank2Sectors:000000000000005c $d
     /tmp/cczwBOZG.s:1440   .text.FLASH_ProgramDoubleWord:0000000000000000 $t
     /tmp/cczwBOZG.s:1447   .text.FLASH_ProgramDoubleWord:0000000000000000 FLASH_ProgramDoubleWord
     /tmp/cczwBOZG.s:1516   .text.FLASH_ProgramDoubleWord:0000000000000040 $d
     /tmp/cczwBOZG.s:1521   .text.FLASH_ProgramWord:0000000000000000 $t
     /tmp/cczwBOZG.s:1528   .text.FLASH_ProgramWord:0000000000000000 FLASH_ProgramWord
     /tmp/cczwBOZG.s:1594   .text.FLASH_ProgramWord:000000000000003c $d
     /tmp/cczwBOZG.s:1599   .text.FLASH_ProgramHalfWord:0000000000000000 $t
     /tmp/cczwBOZG.s:1606   .text.FLASH_ProgramHalfWord:0000000000000000 FLASH_ProgramHalfWord
     /tmp/cczwBOZG.s:1672   .text.FLASH_ProgramHalfWord:000000000000003c $d
     /tmp/cczwBOZG.s:1677   .text.FLASH_ProgramByte:0000000000000000 $t
     /tmp/cczwBOZG.s:1684   .text.FLASH_ProgramByte:0000000000000000 FLASH_ProgramByte
     /tmp/cczwBOZG.s:1749   .text.FLASH_ProgramByte:0000000000000038 $d
     /tmp/cczwBOZG.s:1754   .text.FLASH_OB_WRPConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:1761   .text.FLASH_OB_WRPConfig:0000000000000000 FLASH_OB_WRPConfig
     /tmp/cczwBOZG.s:1828   .text.FLASH_OB_WRPConfig:0000000000000030 $d
     /tmp/cczwBOZG.s:1833   .text.FLASH_OB_WRP1Config:0000000000000000 $t
     /tmp/cczwBOZG.s:1840   .text.FLASH_OB_WRP1Config:0000000000000000 FLASH_OB_WRP1Config
     /tmp/cczwBOZG.s:1907   .text.FLASH_OB_WRP1Config:0000000000000030 $d
     /tmp/cczwBOZG.s:1912   .text.FLASH_OB_PCROPConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:1919   .text.FLASH_OB_PCROPConfig:0000000000000000 FLASH_OB_PCROPConfig
     /tmp/cczwBOZG.s:1986   .text.FLASH_OB_PCROPConfig:0000000000000030 $d
     /tmp/cczwBOZG.s:1991   .text.FLASH_OB_PCROP1Config:0000000000000000 $t
     /tmp/cczwBOZG.s:1998   .text.FLASH_OB_PCROP1Config:0000000000000000 FLASH_OB_PCROP1Config
     /tmp/cczwBOZG.s:2065   .text.FLASH_OB_PCROP1Config:0000000000000030 $d
     /tmp/cczwBOZG.s:2070   .text.FLASH_OB_RDPConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:2077   .text.FLASH_OB_RDPConfig:0000000000000000 FLASH_OB_RDPConfig
ARM GAS  /tmp/cczwBOZG.s 			page 76


     /tmp/cczwBOZG.s:2115   .text.FLASH_OB_RDPConfig:0000000000000014 $d
     /tmp/cczwBOZG.s:2120   .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/cczwBOZG.s:2127   .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/cczwBOZG.s:2189   .text.FLASH_OB_UserConfig:000000000000002c $d
     /tmp/cczwBOZG.s:2194   .text.FLASH_OB_Launch:0000000000000000 $t
     /tmp/cczwBOZG.s:2201   .text.FLASH_OB_Launch:0000000000000000 FLASH_OB_Launch
     /tmp/cczwBOZG.s:2230   .text.FLASH_OB_Launch:0000000000000014 $d

NO UNDEFINED SYMBOLS
